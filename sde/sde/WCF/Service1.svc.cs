/*
 * Date         Developer    Issue
 * --------------------------------------------
 * 2015-05-26   David        #675 
 * 2015-09-03   David        #825 
 * 2015-09-08   David        #829 
 * 2015-12-07   David        #1028
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using System.Data.Odbc;
using System.Transactions;
using System.Net;
using System.Messaging;
using log4net;
using sde.Models;
//using sde.comNetsuiteSandboxServices;
using sde.comNetsuiteServices;
using MySql.Data.MySqlClient;
using System.Configuration;
using System.Security.Cryptography;

namespace sde.WCF
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the class name "Service1" in code, svc and config file together.
    // NOTE: In order to launch WCF Test Client for testing this service, please select Service1.svc or Service1.svc.cs at the Solution Explorer and start debugging.
    public class Service1 : IService1
    {
        #region Global
        NetSuiteService service = new NetSuiteService();

        private readonly ILog DataFromNetsuiteLog = LogManager.GetLogger("DataFromNetsuite");    //#361
        private readonly ILog DataReqInMQLog = LogManager.GetLogger("DataReqInMQ");
        public static Int32 exceptionCount = 0;

        bcas bcas = new bcas();
        cpas cpas = new cpas();
        trade trade = new trade();
        cpas_th cpas_th = new cpas_th();
        cpas_ph cpas_ph = new cpas_ph();
        cpas_sandbox cpas_sandbox = new cpas_sandbox();
        nsextract nsextract = new nsextract();

        private static object LockSchedulerProcess = new object();
        private static object LockPushNsProcess = new object();
        private static object LockPullNsProcess = new object();
        //TBA
        string account = @Resource.NETSUITE_LOGIN_ACCOUNT;
        string appID = @Resource.NETSUITE_LOGIN_ACCOUNT;
        string consumerKey = @Resource.NETSUITE_Consumer_Key;
        string consumerSecret = @Resource.NETSUITE_Consumer_Secret;
        string tokenId, tokenSecret;
        //TBA
        #endregion



        //ANET-23 - Scheduler Control Handling
        //Get a list of ready run transaction which is active and has reach the schedule time
        public List<SchedulerEntity> GetActivatedSchedule()
        {
            using (sdeEntities entities = new sdeEntities())
            {

                DateTime tempDate = Convert.ToDateTime(convertDateToString(DateTime.Now));
                var query = (from pro in entities.schedulers
                             where pro.sche_status == "ACTIVE" && pro.sche_nextRun <= tempDate
                             select new SchedulerEntity()
                             {
                                 sche_transactionType = pro.sche_transactionType,
                                 sche_status = pro.sche_status,
                                 sche_minuteGap = pro.sche_minuteGap,
                                 sche_nextRun = pro.sche_nextRun,
                                 sche_nextRunSeqNo = pro.sche_nextRunSeqNo,
                                 sche_lastRun = pro.sche_lastRun,
                                 sche_lastRunSeqNo = pro.sche_lastRunSeqNo,
                                 sche_sequence = pro.sche_sequence,
                                 sche_wait = pro.sche_wait
                             }).OrderBy(x => x.sche_nextRun);
                //.OrderBy(x => x.sche_sequence).OrderBy(y => y.sche_transactionType);
                //}).OrderByDescending(x => x.sche_nextRunSeqNo);

                return query.ToList();
            }
        }

        //ANET-23 - Scheduler Control Handling
        //Execute schedule and change status from STANDY BY to START
        public String ExecuteScheduler()
        {
            Console.WriteLine("Start of execute scheduler");

            this.DataFromNetsuiteLog.Info("ExecuteScheduler is scheduled at: " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
            lock (LockSchedulerProcess)
            {
                this.DataFromNetsuiteLog.Info("ExecuteScheduler start at: " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));

                Console.WriteLine("Start of execute scheduler 1");

                using (sdeEntities entities = new sdeEntities())
                {
                    String transactionType = null;
                    Int32 nextSeqNo = 0;
                    Int32 minuteGap = 0;
                    DateTime tempNextRun = DateTime.Now;
                    DateTime nextRun = DateTime.Now;
                    Int32 sequence = 0;
                    
                    //ANET-23 - Scheduler Control Handling
                    //Added by Brash Developer on 16-Jul-2021
                    Int32 schedulewait = 0;
                    bool pendingStatusCount = false;

                    List<SchedulerEntity> schedule = new List<SchedulerEntity>();
                    schedule = GetActivatedSchedule().ToList();
                    Console.WriteLine("Start of execute scheduler2");
                    if (schedule.Count() != 0)
                    {
                        foreach (var s in schedule)
                        {
                            pendingStatusCount = false;
                            this.DataFromNetsuiteLog.Info("ExecuteScheduler: " + s.sche_transactionType);
                            try
                            {
                                using (TransactionScope scope1 = new TransactionScope())
                                {
                                    transactionType = s.sche_transactionType;
                                    nextSeqNo = Convert.ToInt32(s.sche_nextRunSeqNo);
                                    nextRun = Convert.ToDateTime(s.sche_nextRun);
                                    minuteGap = Convert.ToInt32(s.sche_minuteGap);
                                    sequence = Convert.ToInt32(s.sche_sequence);
                                    schedulewait = Convert.ToInt32(s.sche_wait);

                                    //ANET-24 Threshold Handling
                                    //Added by Brash Developer on 11-Aug-2021
                                    if (transactionType == "RNT-THRESHOLD HANDLING")
                                    {
                                        #region RNT-THRESHOLD HANDLING

                                        var query1 = (from q1 in entities.requestnetsuite_task
                                                      where (q1.rnt_createdDate > s.sche_lastRun && q1.rnt_createdDate <= s.sche_nextRun)
                                                      && (q1.rnt_status == "FALSE")
                                                      select new
                                                      {
                                                          q1.rnt_id,
                                                          q1.rnt_task,
                                                          q1.rnt_description,
                                                          q1.rnt_refNO,
                                                          q1.rnt_jobID,
                                                          q1.rnt_status,
                                                          q1.rnt_createdDate,
                                                          q1.rnt_seqNO,
                                                          q1.rnt_nsInternalId,
                                                          q1.rnt_createdFromInternalId,
                                                          q1.rnt_errorDesc,
                                                          q1.rnt_updatedDate
                                                      }).ToList();

                                        if (query1.Count > 0)
                                        {
                                            for (int i = 0; i < query1.Count; i++)
                                            {
                                                if (!string.IsNullOrEmpty(query1[i].rnt_errorDesc))
                                                {
                                                    string errorDescription = query1[i].rnt_errorDesc.ToLower();

                                                    var query2 = (from q2 in entities.map_master_error
                                                                  where q2.mme_active == "Y"
                                                                  && errorDescription.Contains(q2.mme_errorDesc.ToLower())
                                                                  select new
                                                                  {
                                                                      q2.mme_id,
                                                                      q2.mme_errorDesc,
                                                                      q2.mme_remark,
                                                                      q2.mme_is_rerun,
                                                                      q2.mme_is_netsuitedependent,
                                                                      q2.mme_is_sourcedatadependent,
                                                                      q2.mme_rerun_type,
                                                                      q2.mme_datapatch_desc,
                                                                      q2.mme_status,
                                                                      q2.mme_active
                                                                  }).ToList();
                                                    if (query2 != null && query2.Count() > 0)
                                                    {
                                                        var query3 = query2.FirstOrDefault();

                                                        var updateRequestNetsuiteTaskStatus = "update requestnetsuite_task set rnt_status = '" + query3.mme_status + "'" +
                                                                                              " where rnt_id='" + query1[i].rnt_id + "'";
                                                        this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + updateRequestNetsuiteTaskStatus);
                                                        entities.Database.ExecuteSqlCommand(updateRequestNetsuiteTaskStatus);
                                                    }
                                                }
                                            }
                                        }

                                        #endregion
                                    }
                                    else if (transactionType.StartsWith("MQ"))
                                    {
                                        #region requestmq
                                        var checkStatus = (from r in entities.requestmqs
                                                           where r.rmq_sche_transactionType == transactionType && r.rmq_status == "STAND BY"
                                                           select new { r.rmq_sche_transactionType, r.rmq_status, r.rmq_jobID, r.rmq_rangeFrom, r.rmq_rangeTo, r.rmq_id }).ToList();

                                        if (checkStatus.Count() > 0)
                                        {
                                            foreach (var r in checkStatus)
                                            {
                                                Guid gjob_id = Guid.NewGuid();
                                                var updateRequestMQStatus = "update requestmq set rmq_jobID = '" + gjob_id.ToString() + "', rmq_status = 'START', rmq_seqNo = '" + nextSeqNo + "'," +
                                                        "rmq_rangeFrom='" + convertDateToString(nextRun.AddMinutes(-minuteGap)) + "', rmq_rangeTo='" + convertDateToString(nextRun) + "'," +
                                                        "rmq_updatedDate = '" + convertDateToString(DateTime.Now) + "', " +
                                                        "rmq_sequence = '" + sequence + "' where rmq_id = '" + r.rmq_id + "'";
                                                this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + updateRequestMQStatus);
                                                entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                                                var insertRequestMQ = "insert into requestmq (rmq_sche_transactionType, rmq_createdDate, rmq_status) values " +
                                                    "('" + transactionType + "','" + convertDateToString(DateTime.Now) + "','STAND BY')";
                                                this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + insertRequestMQ);
                                                entities.Database.ExecuteSqlCommand(insertRequestMQ);
                                            }
                                        }
                                        else
                                        {
                                            //Insert missing transaction type in requestmq
                                            var insertRequestMQ = "insert into requestmq (rmq_sche_transactionType, rmq_createdDate, rmq_status) values " +
                                                    "('" + transactionType + "','" + convertDateToString(DateTime.Now) + "','STAND BY')";
                                            this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + insertRequestMQ);
                                            entities.Database.ExecuteSqlCommand(insertRequestMQ);
                                            scope1.Complete();
                                            break;
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        //ANET-23 - Scheduler Control Handling
                                        //Added by Brash Developer on 16-Jul-2021
                                        //
                                        if (schedulewait == 1)
                                        {
                                            TimeSpan ts = tempNextRun - nextRun;
                                            int totalminutes = Convert.ToInt32(ts.TotalMinutes);
                                            if (totalminutes > minuteGap)
                                            {
                                                int increasecount = Convert.ToInt32(totalminutes / minuteGap);
                                                if (increasecount > 0)
                                                {
                                                    for (int i = 1; i <= increasecount; i++)
                                                    {
                                                        nextRun = nextRun.AddMinutes(minuteGap);
                                                    }
                                                }
                                            }

                                            #region requestnetsuites

                                            var checkStatus = (from r in entities.requestnetsuites
                                                               where r.rn_sche_transactionType == transactionType && r.rn_status == "STAND BY"
                                                               select new { r.rn_sche_transactionType, r.rn_status, r.rn_jobID, r.rn_rangeFrom, r.rn_rangeTo, r.rn_id }).ToList();

                                            if (checkStatus.Count() > 0)
                                            {
                                                foreach (var r in checkStatus)
                                                {
                                                    var updateRequestNetsuiteStatus = "update requestnetsuite set rn_status = 'START', rn_seqNo = '" + nextSeqNo + "'," +
                                                            "rn_rangeFrom='" + convertDateToString(Convert.ToDateTime(s.sche_lastRun)) + "',rn_rangeTo='" + convertDateToString(nextRun) + "'," +
                                                            "rn_updatedDate = '" + convertDateToString(DateTime.Now) + "', " +
                                                            "rn_sequence = '" + sequence + "' where rn_id='" + r.rn_id + "'";
                                                    this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + updateRequestNetsuiteStatus);
                                                    entities.Database.ExecuteSqlCommand(updateRequestNetsuiteStatus);

                                                    var insertRequestNetsuite = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status) values " +
                                                        "('" + transactionType + "','" + convertDateToString(DateTime.Now) + "','STAND BY')";
                                                    this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + insertRequestNetsuite);
                                                    entities.Database.ExecuteSqlCommand(insertRequestNetsuite);
                                                }
                                            }
                                            else
                                            {
                                                //Insert missing transaction type in requestnetsuite
                                                var insertRequestNetsuite = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status) values " +
                                                        "('" + transactionType + "','" + convertDateToString(DateTime.Now) + "','STAND BY')";
                                                this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + insertRequestNetsuite);
                                                entities.Database.ExecuteSqlCommand(insertRequestNetsuite);
                                                scope1.Complete();
                                                break;
                                            }
                                            #endregion
                                        }
                                        else if (schedulewait == 2)
                                        {
                                            #region requestnetsuites

                                            var pendingStatus = (from r in entities.requestnetsuites
                                                                 where r.rn_sche_transactionType == transactionType
                                                                 && (r.rn_status == "START" || r.rn_status == "FINISHED" || r.rn_status == "FINISHEDWITHERRORS" || r.rn_status == "PULLING")
                                                                 select new { r.rn_sche_transactionType, r.rn_status, r.rn_jobID, r.rn_rangeFrom, r.rn_rangeTo, r.rn_id }).ToList();

                                            if (pendingStatus.Count() == 0)
                                            {
                                                var checkStatus = (from r in entities.requestnetsuites
                                                                   where r.rn_sche_transactionType == transactionType && r.rn_status == "STAND BY"
                                                                   select new { r.rn_sche_transactionType, r.rn_status, r.rn_jobID, r.rn_rangeFrom, r.rn_rangeTo, r.rn_id }).ToList();

                                                if (checkStatus.Count() > 0)
                                                {
                                                    foreach (var r in checkStatus)
                                                    {
                                                        var updateRequestNetsuiteStatus = "update requestnetsuite set rn_status = 'START', rn_seqNo = '" + nextSeqNo + "'," +
                                                                "rn_rangeFrom='" + convertDateToString(nextRun.AddMinutes(-minuteGap)) + "',rn_rangeTo='" + convertDateToString(nextRun) + "'," +
                                                                "rn_updatedDate = '" + convertDateToString(DateTime.Now) + "', " +
                                                                "rn_sequence = '" + sequence + "' where rn_id='" + r.rn_id + "'";
                                                        this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + updateRequestNetsuiteStatus);
                                                        entities.Database.ExecuteSqlCommand(updateRequestNetsuiteStatus);

                                                        var insertRequestNetsuite = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status) values " +
                                                            "('" + transactionType + "','" + convertDateToString(DateTime.Now) + "','STAND BY')";
                                                        this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + insertRequestNetsuite);
                                                        entities.Database.ExecuteSqlCommand(insertRequestNetsuite);
                                                    }
                                                }
                                                else
                                                {
                                                    //Insert missing transaction type in requestnetsuite
                                                    var insertRequestNetsuite = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status) values " +
                                                            "('" + transactionType + "','" + convertDateToString(DateTime.Now) + "','STAND BY')";
                                                    this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + insertRequestNetsuite);
                                                    entities.Database.ExecuteSqlCommand(insertRequestNetsuite);
                                                    scope1.Complete();
                                                    break;
                                                }
                                            }
                                            else
                                            {
                                                pendingStatusCount = true;
                                            }

                                            #endregion
                                        }
                                        else
                                        {
                                            if (transactionType == "CPAS-PH RETURN AUTHORIZE ITEMS RECEIPT" ||
                                            transactionType == "CPAS-PH RETURN AUTHORIZE CREDIT MEMO" ||
                                            transactionType == "CPAS-PH RETURN CREDIT MEMO RETN GIFI" ||
                                            transactionType == "CPAS-PH RETURN CREDIT MEMO RNCO GIFI" ||
                                            transactionType == "CPAS-PH RETURN CREDIT MEMO RNCO SUSPEND GIFI" ||
                                            transactionType == "CPAS-PH VENDOR CREDIT" ||
                                            transactionType == "CPAS-PH VENDOR CREDIT GIFI")
                                            {
                                                #region requestnetsuites for cpas ph

                                                var pendingStatus = (from r in entities.requestnetsuites
                                                                     where r.rn_sche_transactionType == transactionType
                                                                     && (r.rn_status == "START" || r.rn_status == "FINISHED" || r.rn_status == "FINISHEDWITHERRORS")
                                                                     select new { r.rn_sche_transactionType, r.rn_status, r.rn_jobID, r.rn_rangeFrom, r.rn_rangeTo, r.rn_id }).ToList();

                                                if (pendingStatus.Count() == 0)
                                                {
                                                    var checkStatus = (from r in entities.requestnetsuites
                                                                       where r.rn_sche_transactionType == transactionType && r.rn_status == "STAND BY"
                                                                       select new { r.rn_sche_transactionType, r.rn_status, r.rn_jobID, r.rn_rangeFrom, r.rn_rangeTo, r.rn_id }).ToList();

                                                    if (checkStatus.Count() > 0)
                                                    {
                                                        foreach (var r in checkStatus)
                                                        {
                                                            var updateRequestNetsuiteStatus = "update requestnetsuite set rn_status = 'START', rn_seqNo = '" + nextSeqNo + "'," +
                                                                    "rn_rangeFrom='" + convertDateToString(nextRun.AddMinutes(-minuteGap)) + "',rn_rangeTo='" + convertDateToString(nextRun) + "'," +
                                                                    "rn_updatedDate = '" + convertDateToString(DateTime.Now) + "', " +
                                                                    "rn_sequence = '" + sequence + "' where rn_id='" + r.rn_id + "'";
                                                            this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + updateRequestNetsuiteStatus);
                                                            entities.Database.ExecuteSqlCommand(updateRequestNetsuiteStatus);

                                                            var insertRequestNetsuite = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status) values " +
                                                                "('" + transactionType + "','" + convertDateToString(DateTime.Now) + "','STAND BY')";
                                                            this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + insertRequestNetsuite);
                                                            entities.Database.ExecuteSqlCommand(insertRequestNetsuite);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //Insert missing transaction type in requestnetsuite
                                                        var insertRequestNetsuite = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status) values " +
                                                                "('" + transactionType + "','" + convertDateToString(DateTime.Now) + "','STAND BY')";
                                                        this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + insertRequestNetsuite);
                                                        entities.Database.ExecuteSqlCommand(insertRequestNetsuite);
                                                        scope1.Complete();
                                                        break;
                                                    }
                                                }

                                                #endregion
                                            }
                                            else
                                            {
                                                #region requestnetsuites


                                                var checkStatus = (from r in entities.requestnetsuites
                                                                   where r.rn_sche_transactionType == transactionType && r.rn_status == "STAND BY"
                                                                   select new { r.rn_sche_transactionType, r.rn_status, r.rn_jobID, r.rn_rangeFrom, r.rn_rangeTo, r.rn_id }).ToList();

                                                if (checkStatus.Count() > 0)
                                                {
                                                    foreach (var r in checkStatus)
                                                    {
                                                        var updateRequestNetsuiteStatus = "update requestnetsuite set rn_status = 'START', rn_seqNo = '" + nextSeqNo + "'," +
                                                                "rn_rangeFrom='" + convertDateToString(nextRun.AddMinutes(-minuteGap)) + "',rn_rangeTo='" + convertDateToString(nextRun) + "'," +
                                                                "rn_updatedDate = '" + convertDateToString(DateTime.Now) + "', " +
                                                                "rn_sequence = '" + sequence + "' where rn_id='" + r.rn_id + "'";
                                                        this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + updateRequestNetsuiteStatus);
                                                        entities.Database.ExecuteSqlCommand(updateRequestNetsuiteStatus);

                                                        var insertRequestNetsuite = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status) values " +
                                                            "('" + transactionType + "','" + convertDateToString(DateTime.Now) + "','STAND BY')";
                                                        this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + insertRequestNetsuite);
                                                        entities.Database.ExecuteSqlCommand(insertRequestNetsuite);
                                                    }
                                                }
                                                else
                                                {
                                                    //Insert missing transaction type in requestnetsuite
                                                    var insertRequestNetsuite = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status) values " +
                                                            "('" + transactionType + "','" + convertDateToString(DateTime.Now) + "','STAND BY')";
                                                    this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + insertRequestNetsuite);
                                                    entities.Database.ExecuteSqlCommand(insertRequestNetsuite);
                                                    scope1.Complete();
                                                    break;
                                                }
                                                #endregion

                                            }
                                        }
                                    }

                                    if (schedulewait == 1)
                                    {
                                        var updateSchduler = "update scheduler set sche_lastRun ='" + convertDateToString(nextRun) + "', sche_lastRunSeqNo = sche_nextRunSeqNo, sche_nextRun='" +
                                        convertDateToString(nextRun.AddMinutes(minuteGap)) + "'," +
                                        "sche_nextRunSeqNo='" + (nextSeqNo + 1) + "' where sche_transactionType='" + transactionType + "'";
                                        this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + updateSchduler);
                                        entities.Database.ExecuteSqlCommand(updateSchduler);
                                    }
                                    else if (schedulewait == 2)
                                    {
                                        if (pendingStatusCount == false)
                                        {
                                            var updateSchduler = "update scheduler set sche_lastRun ='" + convertDateToString(nextRun) + "', sche_lastRunSeqNo = sche_nextRunSeqNo, sche_nextRun='" +
                                            convertDateToString(nextRun.AddMinutes(minuteGap)) + "'," +
                                            "sche_nextRunSeqNo='" + (nextSeqNo + 1) + "' where sche_transactionType='" + transactionType + "'";
                                            this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + updateSchduler);
                                            entities.Database.ExecuteSqlCommand(updateSchduler);
                                        }
                                    }
                                    else
                                    {
                                        var updateSchduler = "update scheduler set sche_lastRun = sche_nextRun, sche_lastRunSeqNo = sche_nextRunSeqNo, sche_nextRun='" +
                                        convertDateToString(nextRun.AddMinutes(minuteGap)) + "'," +
                                        "sche_nextRunSeqNo='" + (nextSeqNo + 1) + "' where sche_transactionType='" + transactionType + "'";
                                        this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + updateSchduler);
                                        entities.Database.ExecuteSqlCommand(updateSchduler);
                                    }

                                    scope1.Complete();
                                }
                            }
                            catch (Exception ex)
                            {
                                this.DataFromNetsuiteLog.Error("ExecuteScheduler Exception: " + ex.ToString());
                            }
                        }
                    }
                }
                Console.WriteLine("Start of execute scheduler end0");
                return "SUCCESS";
            }
            Console.WriteLine("Start of execute scheduler end1");
        }

        //Execute schedule and change status from STANDY BY to START
        public String ExecuteSchedulerOld()
        {
            Console.WriteLine("Start of execute scheduler");

            this.DataFromNetsuiteLog.Info("ExecuteScheduler is scheduled at: " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
            lock (LockSchedulerProcess)
            {
                this.DataFromNetsuiteLog.Info("ExecuteScheduler start at: " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));

                Console.WriteLine("Start of execute scheduler 1");

                using (sdeEntities entities = new sdeEntities())
                {
                    String transactionType = null;
                    Int32 nextSeqNo = 0;
                    Int32 minuteGap = 0;
                    DateTime tempNextRun = DateTime.Now;
                    DateTime nextRun = DateTime.Now;
                    Int32 sequence = 0;

                    List<SchedulerEntity> schedule = new List<SchedulerEntity>();
                    schedule = GetActivatedSchedule().ToList();
                    Console.WriteLine("Start of execute scheduler2");
                    if (schedule.Count() != 0)
                    {
                        foreach (var s in schedule)
                        {
                            this.DataFromNetsuiteLog.Info("ExecuteScheduler: " + s.sche_transactionType);
                            try
                            {
                                using (TransactionScope scope1 = new TransactionScope())
                                {
                                    transactionType = s.sche_transactionType;
                                    nextSeqNo = Convert.ToInt32(s.sche_nextRunSeqNo);
                                    nextRun = Convert.ToDateTime(s.sche_nextRun);
                                    minuteGap = Convert.ToInt32(s.sche_minuteGap);
                                    sequence = Convert.ToInt32(s.sche_sequence);

                                    if (transactionType.StartsWith("MQ"))
                                    {
                                        #region requestmq
                                        var checkStatus = (from r in entities.requestmqs
                                                           where r.rmq_sche_transactionType == transactionType && r.rmq_status == "STAND BY"
                                                           select new { r.rmq_sche_transactionType, r.rmq_status, r.rmq_jobID, r.rmq_rangeFrom, r.rmq_rangeTo, r.rmq_id }).ToList();

                                        if (checkStatus.Count() > 0)
                                        {
                                            foreach (var r in checkStatus)
                                            {
                                                Guid gjob_id = Guid.NewGuid();
                                                var updateRequestMQStatus = "update requestmq set rmq_jobID = '" + gjob_id.ToString() + "', rmq_status = 'START', rmq_seqNo = '" + nextSeqNo + "'," +
                                                        "rmq_rangeFrom='" + convertDateToString(nextRun.AddMinutes(-minuteGap)) + "', rmq_rangeTo='" + convertDateToString(nextRun) + "'," +
                                                        "rmq_updatedDate = '" + convertDateToString(DateTime.Now) + "', " +
                                                        "rmq_sequence = '" + sequence + "' where rmq_id = '" + r.rmq_id + "'";
                                                this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + updateRequestMQStatus);
                                                entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                                                var insertRequestMQ = "insert into requestmq (rmq_sche_transactionType, rmq_createdDate, rmq_status) values " +
                                                    "('" + transactionType + "','" + convertDateToString(DateTime.Now) + "','STAND BY')";
                                                this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + insertRequestMQ);
                                                entities.Database.ExecuteSqlCommand(insertRequestMQ);
                                            }
                                        }
                                        else
                                        {
                                            //Insert missing transaction type in requestmq
                                            var insertRequestMQ = "insert into requestmq (rmq_sche_transactionType, rmq_createdDate, rmq_status) values " +
                                                    "('" + transactionType + "','" + convertDateToString(DateTime.Now) + "','STAND BY')";
                                            this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + insertRequestMQ);
                                            entities.Database.ExecuteSqlCommand(insertRequestMQ);
                                            scope1.Complete();
                                            break;
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        if (transactionType == "CPAS-PH RETURN AUTHORIZE ITEMS RECEIPT" ||
                                           transactionType == "CPAS-PH RETURN AUTHORIZE CREDIT MEMO" ||
                                           transactionType == "CPAS-PH RETURN CREDIT MEMO RETN GIFI" ||
                                           transactionType == "CPAS-PH RETURN CREDIT MEMO RNCO GIFI" ||
                                           transactionType == "CPAS-PH RETURN CREDIT MEMO RNCO SUSPEND GIFI" ||
                                           transactionType == "CPAS-PH VENDOR CREDIT" ||
                                           transactionType == "CPAS-PH VENDOR CREDIT GIFI")
                                        {
                                            #region requestnetsuites for cpas ph

                                            var pendingStatus = (from r in entities.requestnetsuites
                                                                 where r.rn_sche_transactionType == transactionType
                                                                 && (r.rn_status == "START" || r.rn_status == "FINISHED" || r.rn_status == "FINISHEDWITHERRORS")
                                                                 select new { r.rn_sche_transactionType, r.rn_status, r.rn_jobID, r.rn_rangeFrom, r.rn_rangeTo, r.rn_id }).ToList();

                                            if (pendingStatus.Count() == 0)
                                            {
                                                var checkStatus = (from r in entities.requestnetsuites
                                                                   where r.rn_sche_transactionType == transactionType && r.rn_status == "STAND BY"
                                                                   select new { r.rn_sche_transactionType, r.rn_status, r.rn_jobID, r.rn_rangeFrom, r.rn_rangeTo, r.rn_id }).ToList();

                                                if (checkStatus.Count() > 0)
                                                {
                                                    foreach (var r in checkStatus)
                                                    {
                                                        var updateRequestNetsuiteStatus = "update requestnetsuite set rn_status = 'START', rn_seqNo = '" + nextSeqNo + "'," +
                                                                "rn_rangeFrom='" + convertDateToString(nextRun.AddMinutes(-minuteGap)) + "',rn_rangeTo='" + convertDateToString(nextRun) + "'," +
                                                                "rn_updatedDate = '" + convertDateToString(DateTime.Now) + "', " +
                                                                "rn_sequence = '" + sequence + "' where rn_id='" + r.rn_id + "'";
                                                        this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + updateRequestNetsuiteStatus);
                                                        entities.Database.ExecuteSqlCommand(updateRequestNetsuiteStatus);

                                                        var insertRequestNetsuite = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status) values " +
                                                            "('" + transactionType + "','" + convertDateToString(DateTime.Now) + "','STAND BY')";
                                                        this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + insertRequestNetsuite);
                                                        entities.Database.ExecuteSqlCommand(insertRequestNetsuite);
                                                    }
                                                }
                                                else
                                                {
                                                    //Insert missing transaction type in requestnetsuite
                                                    var insertRequestNetsuite = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status) values " +
                                                            "('" + transactionType + "','" + convertDateToString(DateTime.Now) + "','STAND BY')";
                                                    this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + insertRequestNetsuite);
                                                    entities.Database.ExecuteSqlCommand(insertRequestNetsuite);
                                                    scope1.Complete();
                                                    break;
                                                }
                                            }

                                            #endregion
                                        }
                                        else
                                        {
                                            #region requestnetsuites


                                            var checkStatus = (from r in entities.requestnetsuites
                                                               where r.rn_sche_transactionType == transactionType && r.rn_status == "STAND BY"
                                                               select new { r.rn_sche_transactionType, r.rn_status, r.rn_jobID, r.rn_rangeFrom, r.rn_rangeTo, r.rn_id }).ToList();

                                            if (checkStatus.Count() > 0)
                                            {
                                                foreach (var r in checkStatus)
                                                {
                                                    var updateRequestNetsuiteStatus = "update requestnetsuite set rn_status = 'START', rn_seqNo = '" + nextSeqNo + "'," +
                                                            "rn_rangeFrom='" + convertDateToString(nextRun.AddMinutes(-minuteGap)) + "',rn_rangeTo='" + convertDateToString(nextRun) + "'," +
                                                            "rn_updatedDate = '" + convertDateToString(DateTime.Now) + "', " +
                                                            "rn_sequence = '" + sequence + "' where rn_id='" + r.rn_id + "'";
                                                    this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + updateRequestNetsuiteStatus);
                                                    entities.Database.ExecuteSqlCommand(updateRequestNetsuiteStatus);

                                                    var insertRequestNetsuite = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status) values " +
                                                        "('" + transactionType + "','" + convertDateToString(DateTime.Now) + "','STAND BY')";
                                                    this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + insertRequestNetsuite);
                                                    entities.Database.ExecuteSqlCommand(insertRequestNetsuite);
                                                }
                                            }
                                            else
                                            {
                                                //Insert missing transaction type in requestnetsuite
                                                var insertRequestNetsuite = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status) values " +
                                                        "('" + transactionType + "','" + convertDateToString(DateTime.Now) + "','STAND BY')";
                                                this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + insertRequestNetsuite);
                                                entities.Database.ExecuteSqlCommand(insertRequestNetsuite);
                                                scope1.Complete();
                                                break;
                                            }
                                            #endregion

                                        }
                                    }

                                    var updateSchduler = "update scheduler set sche_lastRun = sche_nextRun, sche_lastRunSeqNo = sche_nextRunSeqNo, sche_nextRun='" +
                                        convertDateToString(nextRun.AddMinutes(minuteGap)) + "'," +
                                        "sche_nextRunSeqNo='" + (nextSeqNo + 1) + "' where sche_transactionType='" + transactionType + "'";
                                    this.DataFromNetsuiteLog.Debug("ExecuteScheduler: " + updateSchduler);
                                    entities.Database.ExecuteSqlCommand(updateSchduler);

                                    scope1.Complete();
                                }
                            }
                            catch (Exception ex)
                            {
                                this.DataFromNetsuiteLog.Error("ExecuteScheduler Exception: " + ex.ToString());
                            }
                        }
                    }
                }
                Console.WriteLine("Start of execute scheduler end0");
                return "SUCCESS";
            }
            Console.WriteLine("Start of execute scheduler end1");
        }

        public Boolean netsuitePasswordExpired(string loginEmail)
        {
            Boolean passwordExpired = false;
            try
            {
                using (sdeEntities entities = new sdeEntities())
                {
                    var nsSetting = (from s in entities.netsuite_setting
                                     where s.nss_account == loginEmail
                                     select new { s.nss_expired }).ToList();

                    foreach (var r in nsSetting)
                    {
                        DateTime netsuitePassExpired = DateTime.Parse(r.nss_expired.ToString());
                        if ((netsuitePassExpired - DateTime.Today).TotalDays < 15)
                        {
                            passwordExpired = true;
                        }
                    }

                }

            }

            catch (Exception ex)
            {
                this.DataFromNetsuiteLog.Error("netsuitePasswordExpired Exception: " + ex.ToString());
            }
            return passwordExpired;
        }


        //public void changeNetsuitePassword(string loginEmail)
        //{
        //    try
        //    {
        //        var option = new TransactionOptions
        //        {
        //            IsolationLevel = IsolationLevel.RepeatableRead,
        //            Timeout = TimeSpan.FromSeconds(2400)
        //        };

        //        using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
        //        {
        //            Boolean loginStatus = login(loginEmail);
        //            if (loginStatus == true)
        //            {
        //                using (sdeEntities entities = new sdeEntities())
        //                {
        //                    //var nsSetting = (from s in entities.netsuite_setting
        //                    //                 where (s.nss_key == "NETSUITE-PASSWORDEXPIRED" || s.nss_key == "NETSUITE-CURRENTPASSWORD" || s.nss_key == "NETSUITE-NEWPASSWORD")
        //                    //                 select new {s.nss_key, s.nss_value }).ToList();

        //                    var nsSetting = (from s in entities.netsuite_setting
        //                                     where s.nss_account == loginEmail
        //                                     select s).ToList();

        //                    string currentPassword = "";
        //                    string newPassword = "";
        //                    DateTime netsuitePassExpired = DateTime.Today;
        //                    newPassword = System.Web.Security.Membership.GeneratePassword(12, 5);
        //                    newPassword  = newPassword.Replace(@"\" , "\\");
        //                    //foreach (var r in nsSetting)
        //                    //{
        //                    //    if (r.nss_key == "NETSUITE-PASSWORDEXPIRED")
        //                    //        netsuitePassExpired = DateTime.Parse(r.nss_value);
        //                    //    else if (r.nss_key == "NETSUITE-CURRENTPASSWORD")
        //                    //        currentPassword = r.nss_value;
        //                    //    // else
        //                    //        //newPassword = r.nss_value;
        //                    //       // newPassword = System.Web.Security.Membership.GeneratePassword(12, 5);
        //                    //}

        //                    foreach (var r in nsSetting)
        //                    {
        //                        netsuitePassExpired = DateTime.Parse(r.nss_expired.ToString());
        //                        currentPassword = r.nss_password;
        //                    }
        //                    string newnetsuitePassExpired = netsuitePassExpired.AddDays(90).ToString("yyyy/MM/dd");

        //                    ChangePassword changePassword = new ChangePassword();
        //                    changePassword.currentPassword = currentPassword;
        //                    changePassword.newPassword = newPassword;
        //                    changePassword.newPassword2 = newPassword;
        //                    changePassword.justThisAccount = true;

        //                    SessionResponse response = service.changePassword(changePassword);

        //                    if (response.status.isSuccess)
        //                    {
        //                        var updateNetSuiteSetting = "update netsuite_setting set nss_expired = '" + newnetsuitePassExpired + "', nss_password = '" + newPassword + "' where nss_account = '" + loginEmail + "'";
        //                        entities.Database.ExecuteSqlCommand(updateNetSuiteSetting); 
        //                        //var updateNetSuiteSetting = "update netsuite_setting set nss_value = '" + newnetsuitePassExpired + "' WHERE nss_key = 'NETSUITE-PASSWORDEXPIRED'";
        //                        //entities.Database.ExecuteSqlCommand(updateNetSuiteSetting);

        //                        //updateNetSuiteSetting = "update netsuite_setting set nss_value = '" + newPassword + "' WHERE nss_key = 'NETSUITE-CURRENTPASSWORD'";
        //                        //entities.Database.ExecuteSqlCommand(updateNetSuiteSetting);
        //                        this.DataFromNetsuiteLog.Debug("changeNetsuitePassword: Password have been Successful Changed.");
        //                    }
        //                    else
        //                    {
        //                        StatusDetail[] statusDetail = response.status.statusDetail;
        //                        for (var x = 0; x < response.status.statusDetail.Length; x++)
        //                        {
        //                            this.DataFromNetsuiteLog.Error("changeNetsuitePassword Error Code: " + statusDetail[x].code + ". Message: " + statusDetail[x].message);
        //                        }
        //                    }
        //                }


        //                scope1.Complete();
        //            }
        //        }
        //        //logout();
        //    }

        //    catch (Exception ex)
        //    {
        //        this.DataFromNetsuiteLog.Error("changeNetsuitePassword Exception: " + ex.ToString());
        //    }

        //}

        public string getNetsuitePassword(string loginEmail)
        {
            string returnPass = "";
            try
            {
                using (sdeEntities entities = new sdeEntities())
                {
                    var nsSetting = (from s in entities.netsuite_setting
                                     where s.nss_account == loginEmail
                                     select new { s.nss_password }).ToList().FirstOrDefault();

                    returnPass = nsSetting.nss_password;

                }
            }
            catch (Exception ex)
            {
                this.DataFromNetsuiteLog.Error("getNetsuitePassword Exception: " + ex.ToString());
            }
            return returnPass;
        }

        //1. Send job to NetSuite either for extract data from NetSuite or create transaction in NetSuite
        //2. Check sent job status and update status from START to FINISH if NetSuite complete it job
        public String PushNetsuite()
        {
            this.DataFromNetsuiteLog.Info("PushNetsuite is scheduled at: " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
            lock (LockPushNsProcess)
            {
                this.DataFromNetsuiteLog.Info("PushNetsuite start at: " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
                //kang - added change netsuite password when expired.
                //if (netsuitePasswordExpired())
                //    changeNetsuitePassword();
                //if (netsuitePasswordExpired(@Resource.NETSUITE_LOGIN_EMAIL_PULL))
                //    changeNetsuitePassword(@Resource.NETSUITE_LOGIN_EMAIL_PULL);

                //if (netsuitePasswordExpired(@Resource.NETSUITE_LOGIN_EMAIL))
                //    changeNetsuitePassword(@Resource.NETSUITE_LOGIN_EMAIL);

                Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
                var option = new TransactionOptions
                {
                    IsolationLevel = IsolationLevel.RepeatableRead,
                    Timeout = TimeSpan.FromSeconds(minute)
                };

                using (sdeEntities entities = new sdeEntities())
                {
                    var checkStatus = (from r in entities.requestnetsuites
                                       where r.rn_status == "START" //|| r.rn_status == "PROCESSING" 
                                       //where r.rn_status == "DEBUG" //|| r.rn_status == "PROCESSING"  
                                       select new { r.rn_id, r.rn_sche_transactionType, r.rn_status, r.rn_jobID, r.rn_parentJobID, r.rn_rangeFrom, r.rn_rangeTo, r.rn_createdDate, r.rn_updatedDate })
                                       .ToList();

                    foreach (var r in checkStatus)
                    {
                        String tempJobID = "";
                        tempJobID = r.rn_jobID;
                        //this.DataFromNetsuiteLog.Info("PushNetsuite: Running " + r.rn_sche_transactionType + " with " + r.rn_status + " status. (" + tempJobID + ")");

                        #region debug
                        try
                        {
                            RequestNetsuiteEntity reqNSEntity = new RequestNetsuiteEntity();
                            reqNSEntity.rn_sche_transactionType = r.rn_sche_transactionType;
                            reqNSEntity.rn_createdDate = r.rn_createdDate;
                            reqNSEntity.rn_status = r.rn_status;
                            reqNSEntity.rn_jobID = r.rn_jobID;
                            reqNSEntity.rn_rangeFrom = r.rn_rangeFrom;
                            reqNSEntity.rn_rangeTo = r.rn_rangeTo;

                            String pffRangeFrom = r.rn_rangeFrom.ToString();
                            String pffRangeTo = r.rn_rangeTo.ToString();
                            DateTime rangeTo = Convert.ToDateTime(r.rn_rangeTo);

                            if (r.rn_status.Equals("START") && (r.rn_sche_transactionType.StartsWith("NS-") || r.rn_sche_transactionType.StartsWith("CONF-")))
                            //if (r.rn_status.Equals("DEBUG") && (r.rn_sche_transactionType.StartsWith("NS-") || r.rn_sche_transactionType.StartsWith("CONF-")))
                            {
                                if (String.IsNullOrEmpty(r.rn_jobID))
                                {
                                    this.DataFromNetsuiteLog.Info("PushNetsuite: Running " + r.rn_sche_transactionType + " with " + r.rn_status + " status. (" + r.rn_jobID + ")");

                                    #region Send retrieving jobs to Netsuite (Sales Order, Invoice, Purchase Request, Item, Return Authorization, Credit Memo, Inventory Adjustment)
                                    using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                                    {
                                        this.DataFromNetsuiteLog.Info("PushNetsuite: Sending job to netsuite.");
                                        //String getJobID = nsextract.TransactionAsyncSearch(service, null, pffRangeFrom, pffRangeTo, r.rn_sche_transactionType);
                                        String getJobID = nsextract.TransactionAsyncSearch(service, null, reqNSEntity);
                                        this.DataFromNetsuiteLog.Info("PushNetsuite: Assigned jobID: " + getJobID);

                                        if (!getJobID.Equals("NO-DATA"))
                                        {
                                            var updateRequestNetsuite = "update requestnetsuite set rn_jobID = '" + getJobID + "'," +
                                            "rn_updatedDate='" + convertDateToString(DateTime.Now) + "' " +
                                            "where rn_sche_transactionType='" + r.rn_sche_transactionType + "' and rn_rangeTo = '" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "' and rn_status = 'START'";
                                            //"where rn_sche_transactionType='" + r.rn_sche_transactionType + "' and rn_rangeTo = '" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "' and rn_status = 'DEBUG'";
                                            this.DataFromNetsuiteLog.Debug("PushNetsuite: " + updateRequestNetsuite);
                                            entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                                        }
                                        else
                                        {
                                            var updateRequestNetsuite = "update requestnetsuite set rn_jobID = '" + getJobID + "',rn_status = 'NO-DATA'," +
                                            "rn_updatedDate='" + convertDateToString(DateTime.Now) + "' " +
                                            "where rn_sche_transactionType='" + r.rn_sche_transactionType + "' and rn_rangeTo = '" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "' and rn_status = 'START'";
                                            this.DataFromNetsuiteLog.Debug("PushNetsuite: " + updateRequestNetsuite);
                                            entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                                        }
                                        scopeOuter.Complete();
                                    }
                                    #endregion
                                }
                                else
                                {
                                    this.DataFromNetsuiteLog.Info("PushNetsuite: Running " + r.rn_sche_transactionType + " with " + r.rn_status + " status. (" + r.rn_jobID + ")");

                                    TimeSpan ts = DateTime.Now - Convert.ToDateTime(r.rn_updatedDate);
                                    if (ts.Minutes > 10)
                                    {
                                        #region Check job status
                                        using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                                        {
                                            this.DataFromNetsuiteLog.Info("PushNetsuite: Search status for jobID - " + r.rn_jobID);

                                            //String syncFromNetsuiteStatus = nsextract.TransactionAsyncSearch(service, r.rn_jobID, pffRangeFrom, pffRangeTo, r.rn_sche_transactionType);
                                            String syncFromNetsuiteStatus = nsextract.CheckAsyncStatus(service, r.rn_jobID, reqNSEntity);
                                            if (syncFromNetsuiteStatus == "finished" || syncFromNetsuiteStatus == "finishedwitherrors")
                                            {
                                                var updateRequestNetsuite = "update requestnetsuite set rn_status = '" + syncFromNetsuiteStatus.ToUpper().ToString() + "' where rn_jobID = '" + r.rn_jobID + "'";
                                                //var updateRequestNetsuite = "update requestnetsuite set rn_status = 'DEBUG' where rn_jobID = '" + r.rn_jobID + "'";

                                                this.DataFromNetsuiteLog.Debug("PushNetsuite: " + updateRequestNetsuite);
                                                entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                                            }
                                            if (syncFromNetsuiteStatus == "INVALID JOB ID")
                                            {
                                                var updateRequestNetsuite = "update requestnetsuite set rn_jobID = null, rn_status = 'START' where rn_jobID = '" + r.rn_jobID + "'";
                                                this.DataFromNetsuiteLog.Debug("PushNetsuite: " + updateRequestNetsuite);
                                                entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                                            }
                                            scopeOuter.Complete();
                                        }
                                        #endregion
                                    }
                                }
                            }

                            else if (r.rn_status.Equals("START") && (r.rn_sche_transactionType.StartsWith("SSA-") ||
                                                                    r.rn_sche_transactionType.StartsWith("BCAS-") ||
                                                                    r.rn_sche_transactionType.StartsWith("CPAS-") ||
                                                                    r.rn_sche_transactionType.StartsWith("UPD-")))
                            /*
                            else if (r.rn_status.Equals("DEBUG") && (r.rn_sche_transactionType.StartsWith("SSA-") ||
                                                    r.rn_sche_transactionType.StartsWith("BCAS-") ||
                                                    r.rn_sche_transactionType.StartsWith("CPAS-") ||
                                                    r.rn_sche_transactionType.StartsWith("UPD-")))
                             * */
                            {
                                Boolean status = false;
                                if (String.IsNullOrEmpty(r.rn_jobID))
                                {
                                    this.DataFromNetsuiteLog.Info("PushNetsuite: Running " + r.rn_sche_transactionType + " with " + r.rn_status + " status. (" + r.rn_jobID + ")");

                                    #region Prepare and send create/update job to Netsuite
                                    switch (r.rn_sche_transactionType)
                                    {
                                        #region TRADE >>>
                                        //ANET-28 LIMIT To COMMIT
                                        case "SSA-UPDATE COMMIT TAG BEFORE":
                                        case "SSA-UPDATE COMMIT TAG BEFORE PM":
                                            status = trade.UpdateSaleOrderCommitTag(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        //ANET-28 LIMIT To COMMIT
                                        case "SSA-UPDATE COMMIT TAG AFTER ITEM FULFILLMENT":
                                        case "SSA-UPDATE COMMIT TAG AFTER ITEM FULFILLMENT PM":
                                            status = trade.UpdateSaleOrderCommitTagAfterItemFulFillment(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "SSA-FULFILLMENT":
                                        case "SSA-FULFILLMENT PM":
                                            //List<ExcessFulfillment> exFulList 
                                            status = trade.SOFulfillmentUpdate(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            /*if (exFulList.Count() > 0)
                                            {
                                                trade.InventoryAdjustmentUpdate(exFulList);
                                            }*/
                                            break;
                                        case "SSA-UNSCAN":
                                            //status = trade.InventoryAdjustmentUpdate(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "SSA-PURCHASE ORDER":
                                        case "SSA-PURCHASE ORDER PM":
                                            status = trade.POUpdate(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "SSA-EXCESS PURCHASE ORDER":
                                            status = trade.PurchaseOrder(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "SSA-RETURN AUTHORIZATION":
                                            status = trade.ReturnAuthorizationReceiveUpdate(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        /*case "SSA-INVENTORY ADJUSTMENT":
                                            status = trade.InventoryAdjustmentUpdate(Convert.ToDateTime(r.rn_rangeTo));
                                            break;*/
                                        /*case "SSA-INVENTORY TRANSFER":
                                            status = trade.InventoryTransferUpdate(Convert.ToDateTime(r.rn_rangeTo));
                                            break;*/
                                        /*case "SSA-CASH SALE":
                                            status = trade.CashSalesUpdate(Convert.ToDateTime(r.rn_rangeTo));
                                            break;*/
                                        /*case "SSA-INVOICE":
                                            //status = InvoiceUpdate(Convert.ToDateTime(r.rn_rangeTo));
                                            break;*/
                                        /*case "SSA-CREDIT MEMO":
                                            status = trade.ReturnAuthorizationRefundUpdate(Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                         * */
                                        case "UPD-STATUS.NS-CASH SALES":
                                            /* update sync to wms = completed */
                                            status = trade.TradeUpdateNetsuite(r.rn_sche_transactionType, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "UPD-STATUS.NS-LATEST SALES ORDER":
                                            /* find new so to sync */
                                            status = SalesOrdersNewJob(entities, r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "UPD-STATUS.NS-LATEST SALES ORDER 2":   //Add Sync to Wms = 3 and nt1_committedQty = calc_qtyForWMS - WY-10.SEPT.2014
                                            status = SalesOrdersNewJob2(entities, r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "UPD-STATUS.NS-PURCHASE REQUEST":
                                            /* update sync to wms = completed */
                                            status = trade.TradeUpdateNetsuite(r.rn_sche_transactionType, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "UPD-STATUS.NS-SALES ORDER":
                                            /* update sync to wms = completed */
                                            status = trade.TradeUpdateNetsuite(r.rn_sche_transactionType, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "UPD-STATUS.NS-RETURN AUTHORIZATION (RECEIVE)":
                                            /* update sync to wms = completed */
                                            status = trade.TradeUpdateNetsuite(r.rn_sche_transactionType, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "UPD-STATUS.SSA-EXCESS PURCHASE ORDER":
                                            /* excess po fulfillment */
                                            status = trade.TradeUpdateNetsuite(r.rn_sche_transactionType, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "UPD-STATUS.SSA-FULFILLMENT":
                                            /* update sync to wms = no */
                                            status = trade.TradeUpdateNetsuite(r.rn_sche_transactionType, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "UPD-STATUS.SSA-PURCHASE ORDER":
                                            /* update sync to wms = no */
                                            status = trade.TradeUpdateNetsuite(r.rn_sche_transactionType, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        //case "UPD-STATUS.SSA-RETURN AUTHORIZATION":
                                        /* create refund for return authorise */
                                        //status = trade.TradeUpdateNetsuite(r.rn_sche_transactionType, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));                                        
                                        //break;    
                                        //SYNCED WY-04.NOV.2014 - To update the synced col at Netsuite
                                        case "UPD-STATUS.NS-SALES ORDER SYNC UPDATE": //This Transaction Type ady INACTIVE in scheduler, all will refer to UPD-STATUS.NS-SO DEDUCT SYNC
                                        case "UPD-STATUS.NS-SO DEDUCT SYNC":
                                            status = trade.TradeSOUpdateSynced(r.rn_sche_transactionType, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        //To Update wmsfulfilledqty column at netsuite_syncso WY-06.NOV.2214
                                        case "UPD-STATUS.SO FULFILLMENT SYNC":
                                        case "UPD-STATUS.SO FULFILLMENT SYNC PM":
                                            status = SOFulfillmentSyncedUpdate(entities, r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        #region Auto Dropship and Billing - WYSSA-EXCESS PURCHASE ORDER-12.MAR.2015
                                        //To auto-create GMY SO for Dropship customer
                                        case "UPD-STATUS.DROPSHIP GMY SO":
                                            status = trade.DropshipGMYSalesOrderCreation(r.rn_id, r.rn_sche_transactionType, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        //To close Dropshipment SO
                                        case "UPD-STATUS.CLOSE DROPSHIP SO":
                                            status = trade.CloseDropshipSalesOrders(r.rn_id, r.rn_sche_transactionType, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        //To update netsuite_dropshipfulfilment table
                                        case "UPD-STATUS.DROPSHIP FULFILLMENT":
                                        case "UPD-STATUS.DROPSHIP FULFILLMENT PM":
                                            status = DropshipFulfillmentUpdate(entities, r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "SSA-DROPSHIP FULFILLMENT":
                                            status = trade.DropshipFulfillmentCreation(r.rn_id, r.rn_sche_transactionType, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        //To auto-create Dropship Invoice
                                        case "UPD-STATUS.DROPSHIP INVOICE":
                                            status = trade.DropshipInvoiceCreation(r.rn_id, r.rn_sche_transactionType, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "UPD-STATUS.DROPSHIP BOINVOICE":
                                            status = trade.DropshipBillOnlyInvoiceCreation(r.rn_id, r.rn_sche_transactionType, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        //To auto-create GMY Invoice
                                        case "UPD-STATUS.GMY INVOICE":
                                        case "UPD-STATUS.GMY INVOICE PM":
                                            status = trade.GMYInvoiceCreation(r.rn_id, r.rn_sche_transactionType, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        #endregion
                                        //case "UPD-STATUS.NS-PATCHDATA":
                                        //    //status = trade.TradeUpdateSynced(r.rn_sche_transactionType, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));  
                                        //    break;
                                        #endregion
                                        #region BCAS  >>>
                                        case "BCAS-DEDUCT DUMMY SALES ORDER":
                                            status = bcas.BCASDeductDummyUpdate(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "BCAS-DEDUCT SG DUMMY SALES ORDER":
                                            status = bcas.BCASDeductDummyUpdate_SG(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "BCAS-DEDUCT ID DUMMY SALES ORDER":
                                            status = bcas.BCASDeductDummyUpdate_ID(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "BCAS-DEDUCT TH DUMMY SALES ORDER":
                                            status = bcas.BCASDeductDummyUpdate_TH(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "BCAS-SALES ORDER":
                                            status = bcas.BCASSalesOrder(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "BCAS-ORDER ADJUSTMENT":
                                            status = bcas.BCASSOrderAdjustment(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "BCAS-JOURNAL":
                                            status = bcas.BCASJournal(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "UPD-STATUS.BCAS-SALES ORDER":
                                            /* bcas so fulfillment */
                                            status = bcas.BCASSalesOrderFulfillment(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "UPD-STATUS.BCAS-DUMMYORDERS-APPROVE":
                                            /* David added on 26-May-2015 #675*/
                                            //status = bcas.BCASSalesOrderApprove(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "BCAS-INVOICE":
                                            status = bcas.BCASInvoiceCreation(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "BCAS-CREDIT MEMO":
                                            status = bcas.BCASCreditMemo(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            //status = bcas.BCASReturnAuthorize(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        #endregion
                                        #region CPAS  >>>
                                        case "CPAS-JOURNAL":
                                            status = cpas.CPASJournal(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-SALES ORDER":
                                            status = cpas.CPASSalesOrder(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-ORDER ADJUSTMENT":
                                            status = cpas.CPASOrderAdjustment(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-CANCELLATION ORDER":
                                            status = cpas.CPASCancellationOrder(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "UPD-STATUS.CPAS-SALES ORDER":
                                            /* cpas so fulfillment */
                                            status = cpas.CPASSalesOrderFulfillment(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        #region NETSUITE PHASE II (TRX WITH AMOUNT)
                                        case "CPAS-ITEM ADJUSTMENT":
                                            status = cpas.CPASItemAdjustment(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-SALES WITH PRICE INST":
                                            status = cpas.CPASSalesWithPriceInst(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-SALES WITH PRICE CAD":
                                            status = cpas.CPASSalesWithPriceCad(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-SALES UNSHIP":
                                            status = cpas.CPASSalesUnship(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-CASH SALES":
                                            status = cpas.CPASCashSales(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-FULFILLMENT":
                                            status = cpas.CPASFulfillment(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-INVOICE":
                                            status = cpas.CPASInvoiceCreation(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-RETURN AUTHORIZATION INST RETN":
                                            /* #825 */
                                            status = cpas.CPASReturnAuthorizeInstRetn(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-RETURN AUTHORIZATION INST RETN SUSPEND":
                                            /* #825 */
                                            status = cpas.CPASReturnAuthorizeInstRetnSuspend(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-RETURN AUTHORIZATION INST RNCO":
                                            /* #825 */
                                            status = cpas.CPASReturnAuthorizeInstRnco(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-RETURN AUTHORIZATION INST RNCO SUSPEND":
                                            /* #825 */
                                            status = cpas.CPASReturnAuthorizeInstRncoSuspend(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-RETURN AUTHORIZATION CAD":
                                            /* #825 */
                                            status = cpas.CPASReturnAuthorizeCad(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-RETURN AUTHORIZATION CASH SALES":
                                            /* #825 */
                                            status = cpas.CPASReturnAuthorizeCashSales(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-RETURN AUTHORIZE ITEMS RECEIPT":
                                            /* #825 */
                                            status = cpas.CPASReturnAuthorizeItemsReceipt(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-RETURN AUTHORIZE CREDIT MEMO":
                                            /* #825 */
                                            status = cpas.CPASReturnAuthorizeCreditMemo(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-PAYMENT INST":
                                            /* #831 */
                                            status = cpas.CPASPaymentInst(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-PAYMENT CAD":
                                            /* #831 */
                                            status = cpas.CPASPaymentCad(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        //kang added - payment for cpas COD
                                        case "CPAS-PAYMENT COD":
                                            /* #831 */
                                            status = cpas.CPASPaymentCod(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        #endregion
                                        #region Indonesia ID - For Migration Testing only
                                        case "CPAS-SALES ORDER DEMO":
                                            status = cpas_sandbox.sandboxCPASSalesOrder(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-ORDER ADJUSTMENT DEMO":
                                            status = cpas_sandbox.sandboxCPASOrderAdjustment(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-CANCELLATION ORDER DEMO":
                                            status = cpas_sandbox.sandboxCPASCancellationOrder(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "UPD-STATUS.CPAS-SALES ORDER DEMO":
                                            /* cpas so fulfillment */
                                            status = cpas_sandbox.sandboxCPASSalesOrderFulfillment(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        #endregion
                                        #region cpas th
                                        case "CPAS-TH SALES WITH PRICE INST":
                                            status = cpas_th.CPASSalesWithPriceInst(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-TH SALES WITH PRICE CAD":
                                            status = cpas_th.CPASSalesWithPriceCad(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-TH SALES UNSHIP":
                                            status = cpas_th.CPASSalesUnship(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-TH CASH SALES":
                                            status = cpas_th.CPASCashSales(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-TH FULFILLMENT":
                                            status = cpas_th.CPASFulfillment(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-TH INVOICE":
                                            status = cpas_th.CPASInvoiceCreation(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-TH RETURN AUTHORIZATION INST RETN":
                                            /* #825 */
                                            status = cpas_th.CPASReturnAuthorizeInstRetn(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-TH RETURN INST RETN SUSPEND":
                                            /* #825 */
                                            status = cpas_th.CPASReturnAuthorizeInstRetnSuspend(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-TH RETURN AUTHORIZATION INST RNCO":
                                            /* #825 */
                                            status = cpas_th.CPASReturnAuthorizeInstRnco(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-TH RETURN INST RNCO SUSPEND":
                                            /* #825 */
                                            status = cpas_th.CPASReturnAuthorizeInstRncoSuspend(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-TH RETURN AUTHORIZATION CAD":
                                            /* #825 */
                                            status = cpas_th.CPASReturnAuthorizeCad(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-TH RETURN AUTHORIZATION CASH SALES":
                                            /* #825 */
                                            status = cpas_th.CPASReturnAuthorizeCashSales(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-TH RETURN AUTHORIZE ITEMS RECEIPT":
                                            /* #825 */
                                            status = cpas_th.CPASReturnAuthorizeItemsReceipt(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-TH RETURN AUTHORIZE CREDIT MEMO":
                                            /* #825 */
                                            status = cpas_th.CPASReturnAuthorizeCreditMemo(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-TH PAYMENT INST":
                                            /* #831 */
                                            status = cpas_th.CPASPaymentInst(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-TH PAYMENT CAD":
                                            /* #831 */
                                            status = cpas_th.CPASPaymentCad(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        //kang added - payment for cpas COD
                                        case "CPAS-TH PAYMENT COD":
                                            /* #831 */
                                            status = cpas_th.CPASPaymentCod(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        #endregion
                                        #region cpas ph
                                        case "CPAS-PH CASH SALES":
                                            status = cpas_ph.CPASCashSales(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-PH SALES WITH PRICE CAD":
                                            status = cpas_ph.CPASSalesWithPriceCad(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-PH SALES WITH PRICE INST":
                                            status = cpas_ph.CPASSalesWithPriceInst(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-PH SALES UNSHIP":
                                            status = cpas_ph.CPASSalesUnship(Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-PH FULFILLMENT":
                                            status = cpas_ph.CPASFulfillment(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-PH INVOICE":
                                            status = cpas_ph.CPASInvoiceCreation(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-PH INVOICE GIFI":
                                            status = cpas_ph.CPASInvoiceCreationGIFI(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-PH RETURN AUTHORIZATION CASH SALES":
                                            status = cpas_ph.CPASReturnAuthorizeCashSales(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-PH RETURN AUTHORIZATION CAD":
                                            status = cpas_ph.CPASReturnAuthorizeCad(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-PH RETURN AUTHORIZATION INST RETN":
                                            status = cpas_ph.CPASReturnAuthorizeInstRetn(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-PH RETURN AUTHORIZATION INST RNCO":
                                            status = cpas_ph.CPASReturnAuthorizeInstRnco(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-PH RETURN INST RNCO SUSPEND":
                                            status = cpas_ph.CPASReturnAuthorizeInstRncoSuspend(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-PH RETURN AUTHORIZE ITEMS RECEIPT":
                                            status = cpas_ph.CPASReturnAuthorizeItemsReceipt(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-PH RETURN AUTHORIZE CREDIT MEMO":
                                            status = cpas_ph.CPASReturnAuthorizeCreditMemo(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-PH RETURN CREDIT MEMO RETN GIFI":
                                            status = cpas_ph.CPASReturnCreditMemoRETNGIFI(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-PH RETURN CREDIT MEMO RNCO GIFI":
                                            status = cpas_ph.CPASReturnCreditMemoRNCOGIFI(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-PH RETURN CREDIT MEMO RNCO SUSPEND GIFI":
                                            status = cpas_ph.CPASReturnCreditMemoRNCOSUSPENDGIFI(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-PH VENDOR BILL":
                                            status = cpas_ph.CPASVendorBill(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-PH VENDOR BILL GIFI":
                                            status = cpas_ph.CPASVendorBillGIFI(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-PH PAYMENT INST":
                                            /* #831 */
                                            status = cpas_ph.CPASPaymentInst(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-PH PAYMENT CAD":
                                            /* #831 */
                                            status = cpas_ph.CPASPaymentCad(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        //kang added - payment for cpas COD
                                        case "CPAS-PH PAYMENT COD":
                                            /* #831 */
                                            status = cpas_ph.CPASPaymentCod(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-PH VENDOR CREDIT":
                                            /* #831 */
                                            status = cpas_ph.CPASVendorCredit(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        case "CPAS-PH VENDOR CREDIT GIFI":
                                            /* #831 */
                                            status = cpas_ph.CPASVendorCreditGIFI(r.rn_id, Convert.ToDateTime(r.rn_rangeFrom), Convert.ToDateTime(r.rn_rangeTo));
                                            break;
                                        #endregion
                                        #endregion
                                    }
                                    #endregion
                                }
                                else
                                {
                                    this.DataFromNetsuiteLog.Info("PushNetsuite: Running " + r.rn_sche_transactionType + " with " + r.rn_status + " status. (" + r.rn_jobID + ")");

                                    TimeSpan ts = DateTime.Now - Convert.ToDateTime(r.rn_updatedDate);
                                    if ((ts.Hours * 60) + ts.Minutes > 10)
                                    {
                                        #region Check job status
                                        using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                                        {
                                            this.DataFromNetsuiteLog.Info("PushNetsuite: Search status for jobID - " + r.rn_jobID);
                                            //String syncFromNetsuiteStatus = nsextract.TransactionAsyncSearch(service, r.rn_jobID, pffRangeFrom, pffRangeTo, r.rn_sche_transactionType);
                                            String syncFromNetsuiteStatus = nsextract.CheckAsyncStatus(service, r.rn_jobID, reqNSEntity);
                                            if (syncFromNetsuiteStatus == "finished" || syncFromNetsuiteStatus == "finishedWithErrors")
                                            {
                                                switch (r.rn_sche_transactionType)
                                                {
                                                    case "BCAS-DEDUCT DUMMY SALES ORDER":
                                                        //var insertRequestNetsuiteSG = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status,rn_jobID,rn_updatedDate,rn_rangeFrom,rn_rangeTo) values " +
                                                        //    "('BCAS-DEDUCT SG DUMMY SALES ORDER','" + convertDateToString(DateTime.Now) + "','START','','" + convertDateToString(DateTime.Now) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeFrom)) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";

                                                        //this.DataFromNetsuiteLog.Debug("PushNetsuite: " + insertRequestNetsuiteSG);
                                                        //entities.Database.ExecuteSqlCommand(insertRequestNetsuiteSG);

                                                        //var insertRequestNetsuiteTH = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status,rn_jobID,rn_updatedDate,rn_rangeFrom,rn_rangeTo) values " +
                                                        //    "('BCAS-DEDUCT TH DUMMY SALES ORDER','" + convertDateToString(DateTime.Now) + "','START','','" + convertDateToString(DateTime.Now) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeFrom)) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";

                                                        //this.DataFromNetsuiteLog.Debug("PushNetsuite: " + insertRequestNetsuiteTH);
                                                        //entities.Database.ExecuteSqlCommand(insertRequestNetsuiteTH);

                                                        //var insertRequestNetsuite = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status,rn_jobID,rn_updatedDate,rn_rangeFrom,rn_rangeTo) values " +
                                                        //    "('BCAS-DEDUCT ID DUMMY SALES ORDER','" + convertDateToString(DateTime.Now) + "','START','','" + convertDateToString(DateTime.Now) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeFrom)) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";

                                                        //this.DataFromNetsuiteLog.Debug("PushNetsuite: " + insertRequestNetsuite);
                                                        //entities.Database.ExecuteSqlCommand(insertRequestNetsuite);
                                                        break;

                                                    case "UPD-STATUS.BCAS-SALES ORDER":
                                                        ///* David added on 26-May-2015 #675*/
                                                        //var insertRequestNetsuiteBcasApprove = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status,rn_jobID,rn_updatedDate,rn_rangeFrom,rn_rangeTo) values " +
                                                        //    "('UPD-STATUS.BCAS-DUMMYORDERS-APPROVE','" + convertDateToString(DateTime.Now) + "','START','','" + convertDateToString(DateTime.Now) + "','" + convertDateToString(DateTime.Today) + "','" + convertDateToString(DateTime.Today.AddDays(1)) + "')";

                                                        //this.DataFromNetsuiteLog.Debug("PushNetsuite: " + insertRequestNetsuiteBcasApprove);
                                                        //entities.Database.ExecuteSqlCommand(insertRequestNetsuiteBcasApprove);
                                                        break;
                                                }

                                                var updateRequestNetsuite = "update requestnetsuite set rn_status = '" + syncFromNetsuiteStatus.ToUpper().ToString() + "', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                                                    "where rn_jobID = '" + r.rn_jobID + "'";
                                                this.DataFromNetsuiteLog.Debug("PushNetsuite: " + updateRequestNetsuite);
                                                entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                                            }
                                            if (syncFromNetsuiteStatus == "INVALID JOB ID")
                                            {
                                                var updateRequestNetsuite = "update requestnetsuite set rn_jobID = null, rn_status = 'START' where rn_jobID = '" + r.rn_jobID + "'";
                                                this.DataFromNetsuiteLog.Debug("PushNetsuite: " + updateRequestNetsuite);
                                                entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                                            }
                                            scopeOuter.Complete();
                                        }
                                        #endregion
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            if (ex.Message.Contains("a session at a time"))
                            {
                                this.DataFromNetsuiteLog.Debug("PushNetsuite Exception: " + ex.ToString());
                            }
                            else if (ex.Message.Contains("You have specified an invalid Job"))
                            {
                                this.DataFromNetsuiteLog.Error("PushNetsuite Exception: " + ex.ToString() + ">" + r.rn_jobID);
                            }
                            else if (ex.Message.Contains("Your connection has timed out"))
                            {
                                this.DataFromNetsuiteLog.Debug("PushNetsuite Exception: " + ex.ToString() + ">>" + r.rn_jobID);
                            }
                            else
                            {
                                this.DataFromNetsuiteLog.Error("PushNetsuite Exception: " + ex.ToString());
                            }
                        }
                        #endregion
                    }
                }

                this.DataFromNetsuiteLog.Info("PushNetsuite: END");
                return "SUCCESS";
            }
        }

        //Extract data from NetSuite which job is ready
        public String PullNetsuite()
        {
            this.DataFromNetsuiteLog.Info("PullNetsuite is scheduled at: " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
            lock (LockPullNsProcess)
            {
                this.DataFromNetsuiteLog.Info("PullNetsuite start at: " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
                using (sdeEntities entities = new sdeEntities())
                {

                    var checkStatus = (from r in entities.requestnetsuites
                                       where (r.rn_status == "FINISHED" || r.rn_status == "FINISHEDWITHERRORS")
                                       && (r.rn_sche_transactionType.StartsWith("NS-") ||
                                           r.rn_sche_transactionType.StartsWith("CONF-"))
                                       select new { r.rn_id, r.rn_sche_transactionType, r.rn_createdDate, r.rn_status, r.rn_jobID, r.rn_rangeFrom, r.rn_rangeTo }).ToList();
                    /*
                     var checkStatus = (from r in entities.requestnetsuites
                                where (r.rn_status == "DEBUG")
                                && (r.rn_sche_transactionType.StartsWith("NS-") ||
                                    r.rn_sche_transactionType.StartsWith("CONF-"))
                                select new { r.rn_id, r.rn_sche_transactionType, r.rn_createdDate, r.rn_status, r.rn_jobID, r.rn_rangeFrom, r.rn_rangeTo }).ToList();
                     */

                    foreach (var r in checkStatus)
                    {
                        this.DataFromNetsuiteLog.Info("PullNetsuite: Running " + r.rn_sche_transactionType + " with " + r.rn_status + " status.");

                        try
                        {
                            Boolean transactionStatus = false;

                            RequestNetsuiteEntity reqNSEntity = new RequestNetsuiteEntity();
                            reqNSEntity.rn_sche_transactionType = r.rn_sche_transactionType;
                            reqNSEntity.rn_createdDate = r.rn_createdDate;
                            reqNSEntity.rn_status = r.rn_status;
                            reqNSEntity.rn_jobID = r.rn_jobID;
                            reqNSEntity.rn_rangeFrom = r.rn_rangeFrom;
                            reqNSEntity.rn_rangeTo = r.rn_rangeTo;

                            Console.WriteLine(" pull netsuite transaction type " + r.rn_sche_transactionType);

                            switch (r.rn_sche_transactionType)
                            {
                                case "NS-LATEST SALES ORDER":
                                case "NS-LATEST SALES ORDER 5"://Split Dropshipment so extraction from NS-LATEST SALES ORDER - 17.DEC.2014 
                                case "NS-LATEST SALES ORDER 6"://Select Sync To WMS = No only - 05.NOV.2015
                                    transactionStatus = LatestSalesOrders(entities, reqNSEntity);
                                    break;
                                case "NS-LATEST SALES ORDER_1_40":
                                case "NS-LATEST SALES ORDER_41_80":
                                case "NS-LATEST SALES ORDER_81_120":
                                case "NS-LATEST SALES ORDER_121_160":
                                case "NS-LATEST SALES ORDER_161_9999":
                                    transactionStatus = LatestSalesOrders_SPLIT(entities, reqNSEntity);
                                    break;
                                //To handle back order case with no update last modified date - WY-30.SEPT.2014
                                case "NS-LATEST SALES ORDER 2":
                                case "NS-LATEST SALES ORDER 4":
                                    transactionStatus = LatestSalesOrders2(entities, reqNSEntity);
                                    break;
                                //To update committed qty in newso - WY-20.JAN.2015
                                case "NS-COMMMIT QUANTITY":
                                    transactionStatus = UpdSalesOrderCommittedQty(entities, reqNSEntity);
                                    break;
                                //To handle auto-back order extraction - WY-03.NOV.2014
                                case "NS-LATEST SALES ORDER 3":
                                    transactionStatus = LatestSalesOrders3(entities, reqNSEntity);
                                    break;
                                case "NS-SALES ORDER":
                                    transactionStatus = SalesOrders(entities, reqNSEntity);
                                    break;
                                case "NS-SALES ORDER 2":
                                    transactionStatus = SalesOrders2(entities, reqNSEntity);
                                    break;
                                //To extract update synced list - WY-04.NOV.2014
                                case "NS-SALES ORDER SYNC UPDATE":
                                    transactionStatus = SalesOrdersSyncUpdate(entities, reqNSEntity);
                                    break;
                                //To extract deduct synced list - WY-07.NOV.2014
                                case "NS-SO DEDUCT SYNC":
                                case "NS-SYNCEDCOL": //To update when patch data only,can be remove after patch data
                                    transactionStatus = SalesOrdersDeductSyncUpdate(entities, reqNSEntity);
                                    //transactionStatus = LatestSalesOrders(entities, reqNSEntity);
                                    break;
                                //To extract forwarder address list - WY-05.NOV.2014
                                case "NS-FORWARDER ADDRESS":
                                    transactionStatus = ForwarderAddress(entities, reqNSEntity);
                                    break;
                                /*
                                case "NS-INVOICE":
                                    transactionStatus = Invoices(entities, reqNSEntity);
                                    break;
                                */
                                case "NS-PURCHASE REQUEST":
                                    transactionStatus = PurchaseRequests(entities, reqNSEntity);
                                    break;
                                /*
                                case "NS-INVENTORY ADJUSTMENT":
                                    transactionStatus = SRInventoryAdjustments(entities, reqNSEntity);
                                    break;
                                */
                                case "NS-CASH SALES":
                                    transactionStatus = CashSales(entities, reqNSEntity);
                                    break;
                                case "NS-RETURN AUTHORIZATION (RECEIVE)":
                                    transactionStatus = ReturnAuthorizationsReceive(entities, reqNSEntity);
                                    break;
                                /*
                                case "NS-RETURN AUTHORIZATION (REFUND)":
                                    transactionStatus = ReturnAuthorizationsRefund(entities, reqNSEntity);
                                    break;
                                 * */
                                case "CONF-ITEM":
                                case "CONF-ITEM DS": //ANET-35 Item master missing all Grolier Subsidiary
                                    transactionStatus = ConfItem(entities, reqNSEntity);
                                    break;
                                //Added to get daily created items - WY-17.OCT.2014
                                case "CONF-NEW ITEM":
                                    transactionStatus = ConfNewItem(entities, reqNSEntity);
                                    break;
                                //To search null item at netsuite_pritem - WY-24.NOV.2014
                                case "CONF-NULL ITEM":
                                    transactionStatus = ConfNullItem(entities, reqNSEntity);
                                    break;
                                case "CONF-BUSINESS CHANNEL":
                                    transactionStatus = ConfBusinessChannel(entities, reqNSEntity);
                                    break;
                                case "CONF-SUBSIDIARY":
                                    transactionStatus = ConfSubsidiary(entities, reqNSEntity);
                                    break;
                                case "CONF-LOCATION":
                                    transactionStatus = ConfLocation(entities, reqNSEntity);
                                    break;
                                /* ask Ting abt below */
                                case "CONF-CUSTOMER":
                                    transactionStatus = ConfCustomer(entities, reqNSEntity);
                                    break;
                                case "NS-PATCHDATA"://Patching data - WY-02.OCT.2014
                                    //transactionStatus = BackOrderPatching(entities, reqNSEntity);
                                    //transactionStatus = LatestSalesOrders(entities, reqNSEntity);
                                    //transactionStatus = DataPatching(entities, reqNSEntity);
                                    //transactionStatus = bcas.BCASSalesOrderAdhoc();
                                    //transactionStatus = unfulfillSOTesting(reqNSEntity);
                                    transactionStatus = LatestSalesOrdersTest(entities, reqNSEntity);
                                    break;
                            }
                        }
                        catch (Exception ex)
                        {
                            if (ex.Message.Contains("a session at a time"))
                            {
                                this.DataFromNetsuiteLog.Debug("PullNetsuite Exception: " + ex.ToString());
                            }
                            else if (ex.Message.Contains("You have specified an invalid Job"))
                            {
                                this.DataFromNetsuiteLog.Error("PullNetsuite Exception: " + ex.ToString() + ">>>" + r.rn_jobID);
                                switch (r.rn_sche_transactionType)
                                {
                                    case "NS-LATEST SALES ORDER":
                                        var updateRequestNetsuite = "update requestnetsuite set rn_jobID = null, rn_status = 'START' where rn_jobID = '" + r.rn_jobID + "'";
                                        this.DataFromNetsuiteLog.Debug("PullNetsuite: " + updateRequestNetsuite);
                                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                                        break;
                                    case "NS-LATEST SALES ORDER 2":
                                        var updateRequestNetsuite2 = "update requestnetsuite set rn_jobID = null, rn_status = 'START' where rn_jobID = '" + r.rn_jobID + "'";
                                        this.DataFromNetsuiteLog.Debug("PullNetsuite: " + updateRequestNetsuite2);
                                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite2);
                                        break;
                                    case "NS-LATEST SALES ORDER 3":
                                        var updateRequestNetsuite3 = "update requestnetsuite set rn_jobID = null, rn_status = 'START' where rn_jobID = '" + r.rn_jobID + "'";
                                        this.DataFromNetsuiteLog.Debug("PullNetsuite: " + updateRequestNetsuite3);
                                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite3);
                                        break;
                                    case "NS-LATEST SALES ORDER 4":
                                        var updateRequestNetsuite4 = "update requestnetsuite set rn_jobID = null, rn_status = 'START' where rn_jobID = '" + r.rn_jobID + "'";
                                        this.DataFromNetsuiteLog.Debug("PullNetsuite: " + updateRequestNetsuite4);
                                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite4);
                                        break;
                                    case "NS-LATEST SALES ORDER 5":
                                        var updateRequestNetsuite5 = "update requestnetsuite set rn_jobID = null, rn_status = 'START' where rn_jobID = '" + r.rn_jobID + "'";
                                        this.DataFromNetsuiteLog.Debug("PullNetsuite: " + updateRequestNetsuite5);
                                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite5);
                                        break;
                                    case "NS-LATEST SALES ORDER 6":
                                    case "NS-LATEST SALES ORDER_1_40":
                                    case "NS-LATEST SALES ORDER_41_80":
                                    case "NS-LATEST SALES ORDER_81_120":
                                    case "NS-LATEST SALES ORDER_121_160":
                                    case "NS-LATEST SALES ORDER_161_9999":
                                        var updateRequestNetsuite6 = "update requestnetsuite set rn_jobID = null, rn_status = 'START' where rn_jobID = '" + r.rn_jobID + "'";
                                        this.DataFromNetsuiteLog.Debug("PullNetsuite: " + updateRequestNetsuite6);
                                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite6);
                                        break;
                                }
                            }
                            //ANET-35 Item master missing all Grolier Subsidiary
                            else if (r.rn_sche_transactionType == "CONF-ITEM" || r.rn_sche_transactionType == "CONF-NEW ITEM" || r.rn_sche_transactionType == "CONF-NULL ITEM" || r.rn_sche_transactionType == "CONF-ITEM DS")
                            {
                                var updateRequestNetsuite7 = "update requestnetsuite set rn_status = 'FINISHED' where rn_jobID = '" + r.rn_jobID + "'";
                                this.DataFromNetsuiteLog.Debug("PullNetsuite: " + updateRequestNetsuite7);
                                entities.Database.ExecuteSqlCommand(updateRequestNetsuite7);
                            }
                            else
                            {
                                this.DataFromNetsuiteLog.Error("PullNetsuite Exception: " + ex.ToString());
                            }
                        }
                    }

                    /////////////////////////////////////////////////////////
                    var checkStatus2 = (from r in entities.requestnetsuites
                                        where (r.rn_status == "FINISHED" || r.rn_status == "FINISHEDWITHERRORS")
                                        && (!r.rn_sche_transactionType.StartsWith("NS-"))
                                        && (!r.rn_sche_transactionType.StartsWith("CONF-"))
                                        select new { r.rn_id, r.rn_sche_transactionType, r.rn_createdDate, r.rn_status, r.rn_jobID, r.rn_rangeFrom, r.rn_rangeTo }).ToList();
                    /*
                    var checkStatus2 = (from r in entities.requestnetsuites
                                     where (r.rn_status == "DEBUG")
                                     && (!r.rn_sche_transactionType.StartsWith("NS-"))
                                     && (!r.rn_sche_transactionType.StartsWith("CONF-"))
                                     select new { r.rn_id, r.rn_sche_transactionType, r.rn_createdDate, r.rn_status, r.rn_jobID, r.rn_rangeFrom, r.rn_rangeTo }).ToList();
                     */
                    //&& (!r.rn_sche_transactionType.StartsWith("NS-") || !r.rn_sche_transactionType.StartsWith("CONF-") || r.rn_sche_transactionType.StartsWith("SDE-") || r.rn_sche_transactionType.StartsWith("CPAS-"))

                    foreach (var r in checkStatus2)
                    {
                        try
                        {
                            Boolean transactionStatus2 = false;
                            //Boolean transactionStatus3 = false;

                            RequestNetsuiteEntity reqNSEntity2 = new RequestNetsuiteEntity();
                            reqNSEntity2.rn_sche_transactionType = r.rn_sche_transactionType;
                            reqNSEntity2.rn_createdDate = r.rn_createdDate;
                            reqNSEntity2.rn_status = r.rn_status;
                            reqNSEntity2.rn_jobID = r.rn_jobID;
                            reqNSEntity2.rn_rangeFrom = r.rn_rangeFrom;
                            reqNSEntity2.rn_rangeTo = r.rn_rangeTo;

                            if (r.rn_sche_transactionType.Equals("SSA-FULFILLMENT") || r.rn_sche_transactionType.Equals("SSA-DROPSHIP FULFILLMENT"))
                            {
                                transactionStatus2 = NetsuiteResponse(entities, reqNSEntity2, "Add");
                            }
                            else if (r.rn_sche_transactionType.Equals("SSA-PURCHASE ORDER") ||
                                    r.rn_sche_transactionType.Equals("SSA-EXCESS PURCHASE ORDER") ||
                                    r.rn_sche_transactionType.Equals("SSA-CREDIT MEMO") ||
                                    r.rn_sche_transactionType.Equals("CPAS-JOURNAL") ||
                                    r.rn_sche_transactionType.Equals("CPAS-ORDER ADJUSTMENT") ||
                                    r.rn_sche_transactionType.Equals("CPAS-CANCELLATION ORDER") ||
                                    r.rn_sche_transactionType.Equals("BCAS-SALES ORDER FULFILLMENT") ||
                                    r.rn_sche_transactionType.Equals("BCAS-ORDER ADJUSTMENT") ||
                                    r.rn_sche_transactionType.Equals("BCAS-JOURNAL") ||
                                    r.rn_sche_transactionType.Equals("SSA-EXCESS PURCHASE REQUEST") ||
                                    r.rn_sche_transactionType.Equals("SSA-RETURN AUTHORIZATION") ||
                                    r.rn_sche_transactionType.Equals("BCAS-SALES ORDER") ||
                                    r.rn_sche_transactionType.Equals("CPAS-SALES ORDER") ||
                                    r.rn_sche_transactionType.Equals("BCAS-DEDUCT DUMMY SALES ORDER") ||
                                    r.rn_sche_transactionType.Equals("BCAS-DEDUCT SG DUMMY SALES ORDER") ||
                                    r.rn_sche_transactionType.Equals("BCAS-DEDUCT ID DUMMY SALES ORDER") ||
                                    r.rn_sche_transactionType.Equals("BCAS-DEDUCT TH DUMMY SALES ORDER") ||
                                    r.rn_sche_transactionType.Equals("BCAS-INVOICE") ||                         /***    NETSUITE PHASE II (TRX WITH AMOUNT) ***/
                                    r.rn_sche_transactionType.Equals("BCAS-CREDIT MEMO") ||                         /***    NETSUITE PHASE II (TRX WITH AMOUNT) ***/
                                    r.rn_sche_transactionType.Equals("SSA-UNSCAN") ||
                                    r.rn_sche_transactionType.Equals("SSA-FULFILLMENT PM") ||
                                    r.rn_sche_transactionType.Equals("SSA-PURCHASE ORDER PM") ||
                                    r.rn_sche_transactionType.Equals("CPAS-ITEM ADJUSTMENT") ||
                                    r.rn_sche_transactionType.Equals("CPAS-SALES WITH PRICE INST") ||           /***    NETSUITE PHASE II (TRX WITH AMOUNT) ***/
                                    r.rn_sche_transactionType.Equals("CPAS-SALES WITH PRICE CAD") ||            /***    NETSUITE PHASE II (TRX WITH AMOUNT) ***/
                                    r.rn_sche_transactionType.Equals("CPAS-SALES UNSHIP") ||                    /***    NETSUITE PHASE II (TRX WITH AMOUNT) ***/
                                    r.rn_sche_transactionType.Equals("CPAS-CASH SALES") ||                    /***    NETSUITE PHASE II (TRX WITH AMOUNT) ***/
                                    r.rn_sche_transactionType.Equals("CPAS-FULFILLMENT") ||                    /***    NETSUITE PHASE II (TRX WITH AMOUNT) ***/
                                    r.rn_sche_transactionType.Equals("CPAS-INVOICE") ||                    /***    NETSUITE PHASE II (TRX WITH AMOUNT) ***/
                                    r.rn_sche_transactionType.Equals("CPAS-RETURN AUTHORIZATION INST RETN") ||           /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-RETURN AUTHORIZATION INST RETN SUSPEND") ||   /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-RETURN AUTHORIZATION INST RNCO") ||           /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-RETURN AUTHORIZATION INST RNCO SUSPEND") ||   /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-RETURN AUTHORIZATION CAD") ||                 /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-RETURN AUTHORIZATION CASH SALES") ||           /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-RETURN AUTHORIZE ITEMS RECEIPT") || /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-RETURN AUTHORIZE CREDIT MEMO") || /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-PAYMENT INST") || /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-PAYMENT CAD") ||   /*** #831 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-PAYMENT COD") ||
                                    r.rn_sche_transactionType.Equals("CPAS-TH SALES WITH PRICE INST") ||           /***    NETSUITE PHASE II (TRX WITH AMOUNT) ***/
                                    r.rn_sche_transactionType.Equals("CPAS-TH SALES WITH PRICE CAD") ||            /***    NETSUITE PHASE II (TRX WITH AMOUNT) ***/
                                    r.rn_sche_transactionType.Equals("CPAS-TH SALES UNSHIP") ||                    /***    NETSUITE PHASE II (TRX WITH AMOUNT) ***/
                                    r.rn_sche_transactionType.Equals("CPAS-TH CASH SALES") ||                    /***    NETSUITE PHASE II (TRX WITH AMOUNT) ***/
                                    r.rn_sche_transactionType.Equals("CPAS-TH FULFILLMENT") ||                    /***    NETSUITE PHASE II (TRX WITH AMOUNT) ***/
                                    r.rn_sche_transactionType.Equals("CPAS-TH INVOICE") ||                    /***    NETSUITE PHASE II (TRX WITH AMOUNT) ***/
                                    r.rn_sche_transactionType.Equals("CPAS-TH RETURN AUTHORIZATION INST RETN") ||           /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-TH RETURN INST RETN SUSPEND") ||   /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-TH RETURN AUTHORIZATION INST RNCO") ||           /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-TH RETURN INST RNCO SUSPEND") ||   /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-TH RETURN AUTHORIZATION CAD") ||                 /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-TH RETURN AUTHORIZATION CASH SALES") ||           /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-TH RETURN AUTHORIZE ITEMS RECEIPT") || /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-TH RETURN AUTHORIZE CREDIT MEMO") || /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-TH PAYMENT INST") || /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-TH PAYMENT CAD") ||   /*** #831 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-TH PAYMENT COD") ||
                                    r.rn_sche_transactionType.Equals("CPAS-PH SALES WITH PRICE INST") ||           /***    NETSUITE PHASE II (TRX WITH AMOUNT) ***/
                                    r.rn_sche_transactionType.Equals("CPAS-PH SALES WITH PRICE CAD") ||            /***    NETSUITE PHASE II (TRX WITH AMOUNT) ***/
                                    r.rn_sche_transactionType.Equals("CPAS-PH SALES UNSHIP") ||                    /***    NETSUITE PHASE II (TRX WITH AMOUNT) ***/
                                    r.rn_sche_transactionType.Equals("CPAS-PH CASH SALES") ||                    /***    NETSUITE PHASE II (TRX WITH AMOUNT) ***/
                                    r.rn_sche_transactionType.Equals("CPAS-PH FULFILLMENT") ||                    /***    NETSUITE PHASE II (TRX WITH AMOUNT) ***/
                                    r.rn_sche_transactionType.Equals("CPAS-PH INVOICE") ||                    /***    NETSUITE PHASE II (TRX WITH AMOUNT) ***/
                                    r.rn_sche_transactionType.Equals("CPAS-PH INVOICE GIFI") ||
                                    r.rn_sche_transactionType.Equals("CPAS-PH RETURN AUTHORIZATION INST RETN") ||           /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-PH RETURN AUTHORIZATION INST RNCO") ||           /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-PH RETURN INST RNCO SUSPEND") ||   /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-PH RETURN AUTHORIZATION CAD") ||                 /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-PH RETURN AUTHORIZATION CASH SALES") ||           /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-PH RETURN AUTHORIZE ITEMS RECEIPT") || /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-PH RETURN AUTHORIZE CREDIT MEMO") || /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-PH RETURN CREDIT MEMO RETN GIFI") ||
                                    r.rn_sche_transactionType.Equals("CPAS-PH RETURN CREDIT MEMO RNCO GIFI") ||
                                    r.rn_sche_transactionType.Equals("CPAS-PH RETURN CREDIT MEMO RNCO SUSPEND GIFI") ||
                                    r.rn_sche_transactionType.Equals("CPAS-PH VENDOR BILL") ||
                                    r.rn_sche_transactionType.Equals("CPAS-PH VENDOR BILL GIFI") ||
                                    r.rn_sche_transactionType.Equals("CPAS-PH PAYMENT INST") || /*** #825 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-PH PAYMENT CAD") ||   /*** #831 ***/
                                    r.rn_sche_transactionType.Equals("CPAS-PH PAYMENT COD") ||
                                    r.rn_sche_transactionType.Equals("CPAS-PH VENDOR CREDIT") ||
                                    r.rn_sche_transactionType.Equals("CPAS-PH VENDOR CREDIT GIFI")
                                    )
                            {
                                transactionStatus2 = NetsuiteResponse(entities, reqNSEntity2, "Add");
                            }
                            //ANET-28 LIMIT To COMMIT
                            else if (r.rn_sche_transactionType.Contains("UPD-STATUS.") ||
                                r.rn_sche_transactionType.Equals("SSA-UPDATE COMMIT TAG BEFORE") ||
                                r.rn_sche_transactionType.Equals("SSA-UPDATE COMMIT TAG BEFORE PM") ||
                                r.rn_sche_transactionType.Equals("SSA-UPDATE COMMIT TAG AFTER ITEM FULFILLMENT") ||
                                r.rn_sche_transactionType.Equals("SSA-UPDATE COMMIT TAG AFTER ITEM FULFILLMENT PM"))
                            {
                                transactionStatus2 = NetsuiteResponse(entities, reqNSEntity2, "Update");
                            }
                        }
                        catch (Exception ex)
                        {
                            if (ex.Message.Contains("a session at a time"))
                            {
                                this.DataFromNetsuiteLog.Debug("PullNetsuite Exception: " + ex.ToString());
                            }
                            else if (ex.Message.Contains("You have specified an invalid Job"))
                            {
                                this.DataFromNetsuiteLog.Error("PullNetsuite Exception: " + ex.ToString() + ">>>" + r.rn_jobID);
                                /*
                                var updateRequestNetsuite = "update requestnetsuite set rn_jobID = null, rn_status = 'START' where rn_jobID = '" + r.rn_jobID + "'";
                                this.DataFromNetsuiteLog.Debug("PullNetsuite: " + updateRequestNetsuite);
                                entities.Database.ExecuteSqlCommand(updateRequestNetsuite);*/
                            }
                            else
                            {
                                this.DataFromNetsuiteLog.Error("PullNetsuite Exception: " + ex.ToString());
                            }
                        }
                    }
                }
                return "SUCCESS";
            }
        }

        //Send job to MSMQ either for push data to other database or request for extract data
        public String PushMQ()
        {
            try
            {
                using (sdeEntities entities = new sdeEntities())
                {
                    Boolean bTranStatus = false;
                    var checkStatus = (from r in entities.requestmqs
                                       where r.rmq_status == "START" && r.rmq_sche_transactionType.StartsWith("MQPUSH")
                                       //where r.rmq_status == "DEBUG" && r.rmq_sche_transactionType.StartsWith("MQPUSH") 
                                       select new { r.rmq_sche_transactionType, r.rmq_jobID, r.rmq_createdDate, r.rmq_status, r.rmq_rangeFrom, r.rmq_rangeTo, r.rmq_sequence, r.rmq_id }).OrderBy(x => x.rmq_sequence).ToList();

                    foreach (var r in checkStatus)
                    {
                        this.DataReqInMQLog.Info("PushMQ: Sending requests to MQ.");
                        DateTime rangeFrom = Convert.ToDateTime(r.rmq_rangeFrom);
                        DateTime rangeTo = Convert.ToDateTime(r.rmq_rangeTo);
                        switch (r.rmq_sche_transactionType)
                        {
                            case "MQPUSH-JOB":
                                bTranStatus = Job(entities, r.rmq_sche_transactionType, r.rmq_jobID, convertDateToString(Convert.ToDateTime(r.rmq_createdDate)), rangeFrom, rangeTo, Convert.ToInt32(r.rmq_sequence), r.rmq_id);
                                break;
                            case "MQPUSH-JOB MO":
                                bTranStatus = JobMO(entities, r.rmq_sche_transactionType, r.rmq_jobID, convertDateToString(Convert.ToDateTime(r.rmq_createdDate)), rangeFrom, rangeTo, Convert.ToInt32(r.rmq_sequence), r.rmq_id);
                                break;
                            case "MQPUSH-JOB MO CLS":
                                bTranStatus = JobMOCls(entities, r.rmq_sche_transactionType, r.rmq_jobID, convertDateToString(Convert.ToDateTime(r.rmq_createdDate)), rangeFrom, rangeTo, Convert.ToInt32(r.rmq_sequence), r.rmq_id);
                                break;
                            case "MQPUSH-JOB MO ADDRESS":
                                bTranStatus = JobMOAddress(entities, r.rmq_sche_transactionType, r.rmq_jobID, convertDateToString(Convert.ToDateTime(r.rmq_createdDate)), rangeFrom, rangeTo, Convert.ToInt32(r.rmq_sequence), r.rmq_id);
                                break;
                            case "MQPUSH-JOB MO PACK":
                                bTranStatus = JobMOPack(entities, r.rmq_sche_transactionType, r.rmq_jobID, convertDateToString(Convert.ToDateTime(r.rmq_createdDate)), rangeFrom, rangeTo, Convert.ToInt32(r.rmq_sequence), r.rmq_id);
                                break;
                            case "MQPUSH-JOB ITEM":
                                bTranStatus = JobItem(entities, r.rmq_sche_transactionType, r.rmq_jobID, convertDateToString(Convert.ToDateTime(r.rmq_createdDate)), rangeFrom, rangeTo, Convert.ToInt32(r.rmq_sequence), r.rmq_id);
                                break;
                            case "MQPUSH-JOB ORD MASTER":
                                bTranStatus = JobOrdMaster(entities, r.rmq_sche_transactionType, r.rmq_jobID, convertDateToString(Convert.ToDateTime(r.rmq_createdDate)), rangeFrom, rangeTo, Convert.ToInt32(r.rmq_sequence), r.rmq_id);
                                break;
                            case "MQPUSH-JOB ORD MASTER PACK":
                                bTranStatus = JobOrdMasterPack(entities, r.rmq_sche_transactionType, r.rmq_jobID, convertDateToString(Convert.ToDateTime(r.rmq_createdDate)), rangeFrom, rangeTo, Convert.ToInt32(r.rmq_sequence), r.rmq_id);
                                break;
                            case "MQPUSH-JOB ORD MASTER PACK DETAIL":
                                bTranStatus = JobOrdMasterPackDetail(entities, r.rmq_sche_transactionType, r.rmq_jobID, convertDateToString(Convert.ToDateTime(r.rmq_createdDate)), rangeFrom, rangeTo, Convert.ToInt32(r.rmq_sequence), r.rmq_id);
                                break;
                            case "MQPUSH-DISCOUNT AND TAX":
                                bTranStatus = DiscountAndTax(entities, r.rmq_sche_transactionType, r.rmq_jobID, convertDateToString(Convert.ToDateTime(r.rmq_createdDate)), rangeFrom, rangeTo, Convert.ToInt32(r.rmq_sequence), r.rmq_id);
                                break;
                            case "MQPUSH-SALES FULFILLMENT":
                            case "MQPUSH-SALES FULFILLMENT PM":
                                bTranStatus = SOFulfillment(entities, r.rmq_sche_transactionType, r.rmq_jobID, convertDateToString(Convert.ToDateTime(r.rmq_createdDate)), rangeFrom, rangeTo, Convert.ToInt32(r.rmq_sequence), r.rmq_id);
                                break;
                            case "MQPUSH-JOBORDMASTER EXTRACTION": //Split the jobordmaster,jobitem,jobmopack table with sofulfillment - WY-26.AUG.2014
                                bTranStatus = JobOrdMasterExtraction(entities, r.rmq_sche_transactionType, r.rmq_jobID, convertDateToString(Convert.ToDateTime(r.rmq_createdDate)), rangeFrom, rangeTo, Convert.ToInt32(r.rmq_sequence), r.rmq_id);
                                break;
                            case "MQPUSH-PURCHASE REQUEST":
                                bTranStatus = PurchaseRequest(entities, r.rmq_sche_transactionType, r.rmq_jobID, convertDateToString(Convert.ToDateTime(r.rmq_createdDate)), rangeFrom, rangeTo, Convert.ToInt32(r.rmq_sequence), r.rmq_id);
                                break;
                            case "MQPUSH-PURCHASE REQUEST ITEM":
                                bTranStatus = PurchaseRequestItem(entities, r.rmq_sche_transactionType, r.rmq_jobID, convertDateToString(Convert.ToDateTime(r.rmq_createdDate)), rangeFrom, rangeTo, Convert.ToInt32(r.rmq_sequence), r.rmq_id);
                                break;
                            case "MQPUSH-PO RECEIVE":
                            case "MQPUSH-PO RECEIVE PM":
                                bTranStatus = POReceive(entities, r.rmq_sche_transactionType, r.rmq_jobID, convertDateToString(Convert.ToDateTime(r.rmq_createdDate)), rangeFrom, rangeTo, Convert.ToInt32(r.rmq_sequence), r.rmq_id);
                                break;
                            case "MQPUSH-PO RECEIVE ITEM":
                            case "MQPUSH-PO RECEIVE ITEM PM":
                                bTranStatus = POReceiveItem(entities, r.rmq_sche_transactionType, r.rmq_jobID, convertDateToString(Convert.ToDateTime(r.rmq_createdDate)), rangeFrom, rangeTo, Convert.ToInt32(r.rmq_sequence), r.rmq_id);
                                break;
                            case "MQPUSH-SO RETURN":
                                bTranStatus = SOReturn(entities, r.rmq_sche_transactionType, r.rmq_jobID, convertDateToString(Convert.ToDateTime(r.rmq_createdDate)), rangeFrom, rangeTo, Convert.ToInt32(r.rmq_sequence), r.rmq_id);
                                break;
                            case "MQPUSH-SO RETURN ITEM":
                                bTranStatus = SOReturnItem(entities, r.rmq_sche_transactionType, r.rmq_jobID, convertDateToString(Convert.ToDateTime(r.rmq_createdDate)), rangeFrom, rangeTo, Convert.ToInt32(r.rmq_sequence), r.rmq_id);
                                break;
                            case "MQPUSH-SO RETURN UPDATE":
                                bTranStatus = SOReturnUpdate(entities, r.rmq_sche_transactionType, r.rmq_jobID, convertDateToString(Convert.ToDateTime(r.rmq_createdDate)), rangeFrom, rangeTo, Convert.ToInt32(r.rmq_sequence), r.rmq_id);
                                break;
                            case "MQPUSH-ITEM":
                                bTranStatus = SyncNewItemToImas(entities, r.rmq_sche_transactionType, r.rmq_jobID, convertDateToString(Convert.ToDateTime(r.rmq_createdDate)), rangeFrom, rangeTo, Convert.ToInt32(r.rmq_sequence), r.rmq_id);
                                //bool testing = SyncNewItemToWMS(entities, r.rmq_sche_transactionType, r.rmq_jobID, convertDateToString(Convert.ToDateTime(r.rmq_createdDate)), rangeFrom, rangeTo, Convert.ToInt32(r.rmq_sequence), r.rmq_id);
                                break;
                            //Added to get daily created items - WY-17.OCT.2014
                            case "MQPUSH-NEW ITEM":
                                bTranStatus = SyncNewItemToImas2(entities, r.rmq_sche_transactionType, r.rmq_jobID, convertDateToString(Convert.ToDateTime(r.rmq_createdDate)), rangeFrom, rangeTo, Convert.ToInt32(r.rmq_sequence), r.rmq_id);
                                break;
                            case "MQPUSH-CASH SALES":
                                bTranStatus = CashSales(entities, r.rmq_sche_transactionType, r.rmq_jobID, convertDateToString(Convert.ToDateTime(r.rmq_createdDate)), rangeFrom, rangeTo, Convert.ToInt32(r.rmq_sequence), r.rmq_id);
                                break;
                            case "MQPUSH-CASH SALES ITEM":
                                bTranStatus = CashSalesItem(entities, r.rmq_sche_transactionType, r.rmq_jobID, convertDateToString(Convert.ToDateTime(r.rmq_createdDate)), rangeFrom, rangeTo, Convert.ToInt32(r.rmq_sequence), r.rmq_id);
                                break;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("PushMQ Exception: " + ex.ToString());
            }
            return "SUCCESS";
        }

        //Extract queue messages from MSMQ
        public String PullMQ()
        {
            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            System.Messaging.Message objMessage = new System.Messaging.Message();

            String qname = @Resource.QUEUENAME_SDE;

            MessageQueue messageQueue = null;
            messageQueue = new MessageQueue(qname);
            this.DataReqInMQLog.Info("PullMQ: Connect to " + qname);

            #region defineDataStructure
            Object o = new Object();
            //System.Type[] arrTypes = new System.Type[16];  
            System.Type[] arrTypes = new System.Type[21];  /***    NETSUITE PHASE II (TRX WITH AMOUNT) ***/

            arrTypes[0] = o.GetType();

            List<JobOrdScan> josList = new List<JobOrdScan>();
            arrTypes[1] = josList.GetType();

            List<JobOrdScanPack> jospList = new List<JobOrdScanPack>();
            arrTypes[2] = jospList.GetType();

            List<CanceledItem> cpas_ciList = new List<CanceledItem>();
            arrTypes[3] = cpas_ciList.GetType();

            List<PostingItem> cpas_piList = new List<PostingItem>();
            arrTypes[4] = cpas_piList.GetType();

            List<CPAS_JournalEntryWeekly> cpas_jeWeeklyList = new List<CPAS_JournalEntryWeekly>();
            arrTypes[5] = cpas_jeWeeklyList.GetType();

            List<CPAS_JournalEntryMonthly> cpas_jeMonthlyList = new List<CPAS_JournalEntryMonthly>();
            arrTypes[6] = cpas_jeMonthlyList.GetType();

            List<POReceive> porList = new List<POReceive>();
            arrTypes[7] = porList.GetType();

            List<POReceiveItem> poriList = new List<POReceiveItem>();
            arrTypes[8] = poriList.GetType();

            List<SOReturn> sorList = new List<SOReturn>();
            arrTypes[9] = sorList.GetType();

            List<SOReturnItem> sriList = new List<SOReturnItem>();
            arrTypes[10] = sriList.GetType();

            List<JobOrdMasterPack> jompList = new List<JobOrdMasterPack>();
            arrTypes[11] = jompList.GetType();

            List<JobOrdMasterPackDetail> jompdList = new List<JobOrdMasterPackDetail>();
            arrTypes[12] = jompdList.GetType();

            List<JobItem> jiList = new List<JobItem>();
            arrTypes[13] = jiList.GetType();

            List<JobOrdMaster> jomList = new List<JobOrdMaster>();
            arrTypes[14] = jomList.GetType();

            List<JobMoPack> jmpList = new List<JobMoPack>();
            arrTypes[15] = jmpList.GetType();

            /***    NETSUITE PHASE II (TRX WITH AMOUNT) ***/
            List<PostingSales> cpas_psList = new List<PostingSales>();
            arrTypes[16] = cpas_psList.GetType();

            List<PostingCancellation> cpas_pcList = new List<PostingCancellation>();
            arrTypes[17] = cpas_pcList.GetType();

            List<PostingPayment> cpas_payList = new List<PostingPayment>();
            arrTypes[18] = cpas_payList.GetType();

            List<PostingSalesContract> cpas_ppList = new List<PostingSalesContract>();
            arrTypes[19] = cpas_ppList.GetType();

            List<PostingCancelContract> cpas_pcpList = new List<PostingCancelContract>();
            arrTypes[20] = cpas_pcpList.GetType();
            #endregion

            messageQueue.Formatter = new XmlMessageFormatter(arrTypes);

            try
            {
                msgTx.Begin();
                byte[] bt = new byte[10];
                objMessage = messageQueue.Receive(new TimeSpan(0, 10, 0), msgTx);

                this.DataReqInMQLog.Info("PullMQ: Extracting message from MQ with label: " + objMessage.Label.ToString());
                int indexFind = objMessage.Label.IndexOf(">");
                String jobMQ = objMessage.Label.Substring(indexFind);
                String insData = "FAIL";

                #region queue checking
                switch (jobMQ)
                {
                    case "> MQPUSH-JOB ORD SCAN":
                        josList = ((List<JobOrdScan>)objMessage.Body);
                        insData = JobOrdScan(josList);
                        break;
                    case "> MQPUSH-JOB ORD SCAN PACK":
                        jospList = ((List<JobOrdScanPack>)objMessage.Body);
                        insData = JobOrdScanPack(jospList);
                        break;
                    case "> MQPUSH-JOB ORD MASTER PACK":
                        jompList = ((List<JobOrdMasterPack>)objMessage.Body);
                        insData = JobOrdMasterPack(jompList);
                        break;
                    case "> MQPUSH-JOB ORD MASTER PACK DETAIL":
                        jompdList = ((List<JobOrdMasterPackDetail>)objMessage.Body);
                        insData = JobOrdMasterPackDetail(jompdList);
                        break;
                    case "> MQPUSH-JOB ITEM":
                        jiList = ((List<JobItem>)objMessage.Body);
                        insData = JobItem(jiList);
                        break;
                    case "> MQPUSH-JOB ORD MASTER":
                        jomList = ((List<JobOrdMaster>)objMessage.Body);
                        insData = JobOrdMaster(jomList);
                        break;
                    case "> MQPUSH-JOB MO PACK":
                        jmpList = ((List<JobMoPack>)objMessage.Body);
                        insData = JobMOPack(jmpList);
                        break;
                    case "> CPAS-CANCELED ITEM":
                        cpas_ciList = ((List<CanceledItem>)objMessage.Body);
                        insData = cpas.CPASCanceledItem(cpas_ciList);
                        break;
                    case "> CPAS-POSTING ITEM"://SALES
                        cpas_piList = ((List<PostingItem>)objMessage.Body);
                        insData = cpas.CPASPostingItem(cpas_piList, "POSTING ITEM");
                        break;
                    case "> CPAS-UNSHIP ITEM":
                        cpas_piList = ((List<PostingItem>)objMessage.Body);
                        insData = cpas.CPASPostingItem(cpas_piList, "UNSHIP ITEM");
                        break;
                    case "> CPAS-ADJUSTMENT ITEM":
                        cpas_piList = ((List<PostingItem>)objMessage.Body);
                        insData = cpas.CPASPostingItem(cpas_piList, "ADJUSTMENT ITEM");
                        break;
                    case "> CPAS-JOURNAL ENTRY (WEEKLY)":
                        cpas_jeWeeklyList = ((List<CPAS_JournalEntryWeekly>)objMessage.Body);
                        insData = cpas.CPASJournalEntryWeekly(cpas_jeWeeklyList, "SALES");
                        break;
                    case "> CPAS-JOURNAL ENTRY (MONTHLY)":
                        cpas_jeMonthlyList = ((List<CPAS_JournalEntryMonthly>)objMessage.Body);
                        insData = cpas.CPASJournalEntryMonthly(cpas_jeMonthlyList, "UNSHIP");
                        break;
                    case "> MQPUSH-PO RECEIVE":
                        porList = ((List<POReceive>)objMessage.Body);
                        insData = POReceive(porList);
                        break;
                    case "> MQPUSH-PO RECEIVE ITEM":
                        poriList = ((List<POReceiveItem>)objMessage.Body);
                        insData = POReceiveItem(poriList);
                        break;
                    case "> MQPUSH-SO RETURN UPDATE":
                        sorList = ((List<SOReturn>)objMessage.Body);
                        insData = SOReturn(sorList);
                        break;
                    case "> MQPUSH-SO RETURN ITEM UPDATE":
                        sriList = ((List<SOReturnItem>)objMessage.Body);
                        insData = SOReturnItem(sriList);
                        break;
                    /***    NETSUITE PHASE II (TRX WITH AMOUNT) ***/
                    case "> CPAS-POSTING SALES CONTRACT"://POST ITEMS PARENT
                        cpas_ppList = ((List<PostingSalesContract>)objMessage.Body);
                        insData = cpas_ph.CPASPostingParent(cpas_ppList, "POSTING Sales Contract");
                        break;
                    case "> CPAS-POSTING CANCELLATION CONTRACT"://POST ITEMS PARENT
                        cpas_pcpList = ((List<PostingCancelContract>)objMessage.Body);
                        insData = cpas_ph.CPASPostingCancelParent(cpas_pcpList, "POSTING Cancellation Contract");
                        break;
                    case "> CPAS-POSTING SALES"://POST ITEMS WITH SALES AMT
                        cpas_psList = ((List<PostingSales>)objMessage.Body);
                        insData = cpas.CPASPostingSales(cpas_psList, "POSTING SALES");
                        break;
                    case "> CPAS-POSTING CANCELLATION"://POST CANCELLATION ITEMS WITH SALES AMT
                        cpas_pcList = ((List<PostingCancellation>)objMessage.Body);
                        insData = cpas.CPASPostingCancellation(cpas_pcList, "POSTING CANCELLATION");
                        break;
                    case "> CPAS-POSTING PAYMENT"://POST PAYMENT
                        cpas_payList = ((List<PostingPayment>)objMessage.Body);
                        insData = cpas.CPASPostingPayment(cpas_payList, "POSTING PAYMENT");
                        break;
                    case "> CPAS-POSTING SALES UNSHIP":
                        cpas_piList = ((List<PostingItem>)objMessage.Body);
                        insData = cpas.CPASPostingContract(cpas_piList, "POSTING SALES UNSHIP");
                        break;
                    case "> CPAS-POSTING SALES ADJUSTMENT":
                        cpas_piList = ((List<PostingItem>)objMessage.Body);
                        insData = cpas.CPASPostingContract(cpas_piList, "POSTING SALES ADJUSTMENT");
                        break;
                    default:
                        insData = "SUCCESS";
                        this.DataReqInMQLog.Error("INVALID " + jobMQ + ": NOT FOUND.");
                        break;
                }

                #endregion

                if (insData != "SUCCESS")
                {
                    msgTx.Abort();
                }
                else
                {
                    msgTx.Commit();
                }
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("Timeout"))
                {
                    this.DataReqInMQLog.Debug("PullMQ Exception: " + ex.Message.ToString());
                }
                else
                {
                    this.DataReqInMQLog.Error("PullMQ Exception: " + ex.Message.ToString());
                }
                msgTx.Abort();
            }
            return "SUCCESS";
        }
        public String PullMQ2()
        {
            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            System.Messaging.Message objMessage = new System.Messaging.Message();

            String qname = @Resource.QUEUENAME_SDE2;

            MessageQueue messageQueue = null;
            messageQueue = new MessageQueue(qname);
            this.DataReqInMQLog.Info("PullMQ2: Connect to " + qname);

            #region defineDataStructure
            Object o = new Object();
            System.Type[] arrTypes = new System.Type[16];

            arrTypes[0] = o.GetType();

            List<JobOrdScan> josList = new List<JobOrdScan>();
            arrTypes[1] = josList.GetType();

            List<JobOrdScanPack> jospList = new List<JobOrdScanPack>();
            arrTypes[2] = jospList.GetType();

            List<CanceledItem> cpas_ciList = new List<CanceledItem>();
            arrTypes[3] = cpas_ciList.GetType();

            List<PostingItem> cpas_piList = new List<PostingItem>();
            arrTypes[4] = cpas_piList.GetType();

            List<CPAS_JournalEntryWeekly> cpas_jeWeeklyList = new List<CPAS_JournalEntryWeekly>();
            arrTypes[5] = cpas_jeWeeklyList.GetType();

            List<CPAS_JournalEntryMonthly> cpas_jeMonthlyList = new List<CPAS_JournalEntryMonthly>();
            arrTypes[6] = cpas_jeMonthlyList.GetType();

            List<POReceive> porList = new List<POReceive>();
            arrTypes[7] = porList.GetType();

            List<POReceiveItem> poriList = new List<POReceiveItem>();
            arrTypes[8] = poriList.GetType();

            List<SOReturn> sorList = new List<SOReturn>();
            arrTypes[9] = sorList.GetType();

            List<SOReturnItem> sriList = new List<SOReturnItem>();
            arrTypes[10] = sriList.GetType();

            List<JobOrdMasterPack> jompList = new List<JobOrdMasterPack>();
            arrTypes[11] = jompList.GetType();

            List<JobOrdMasterPackDetail> jompdList = new List<JobOrdMasterPackDetail>();
            arrTypes[12] = jompdList.GetType();

            List<JobItem> jiList = new List<JobItem>();
            arrTypes[13] = jiList.GetType();

            List<JobOrdMaster> jomList = new List<JobOrdMaster>();
            arrTypes[14] = jomList.GetType();

            List<JobMoPack> jmpList = new List<JobMoPack>();
            arrTypes[15] = jmpList.GetType();

            #endregion

            messageQueue.Formatter = new XmlMessageFormatter(arrTypes);

            try
            {
                msgTx.Begin();
                byte[] bt = new byte[10];
                objMessage = messageQueue.Receive(new TimeSpan(0, 10, 0), msgTx);

                this.DataReqInMQLog.Info("PullMQ2: Extracting message from MQ with label: " + objMessage.Label.ToString());
                int indexFind = objMessage.Label.IndexOf(">");
                String jobMQ = objMessage.Label.Substring(indexFind);
                String insData = "FAIL";

                #region queue checking
                switch (jobMQ)
                {
                    case "> MQPUSH-JOB ORD SCAN":
                        josList = ((List<JobOrdScan>)objMessage.Body);
                        insData = JobOrdScan(josList);
                        break;
                    case "> MQPUSH-JOB ORD SCAN PACK":
                        jospList = ((List<JobOrdScanPack>)objMessage.Body);
                        insData = JobOrdScanPack(jospList);
                        break;
                    case "> MQPUSH-JOB ORD MASTER PACK":
                        jompList = ((List<JobOrdMasterPack>)objMessage.Body);
                        insData = JobOrdMasterPack(jompList);
                        break;
                    case "> MQPUSH-JOB ORD MASTER PACK DETAIL":
                        jompdList = ((List<JobOrdMasterPackDetail>)objMessage.Body);
                        insData = JobOrdMasterPackDetail(jompdList);
                        break;
                    case "> MQPUSH-JOB ITEM":
                        jiList = ((List<JobItem>)objMessage.Body);
                        insData = JobItem(jiList);
                        break;
                    case "> MQPUSH-JOB ORD MASTER":
                        jomList = ((List<JobOrdMaster>)objMessage.Body);
                        insData = JobOrdMaster(jomList);
                        break;
                    case "> MQPUSH-JOB MO PACK":
                        jmpList = ((List<JobMoPack>)objMessage.Body);
                        insData = JobMOPack(jmpList);
                        break;
                    default:
                        insData = "SUCCESS";
                        this.DataReqInMQLog.Error("INVALID " + jobMQ + ": NOT FOUND.");
                        break;
                }

                #endregion

                if (insData != "SUCCESS")
                {
                    msgTx.Abort();
                }
                else
                {
                    msgTx.Commit();
                }
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("Timeout"))
                {
                    this.DataReqInMQLog.Debug("PullMQ2 Exception: " + ex.Message.ToString());
                }
                else
                {
                    this.DataReqInMQLog.Error("PullMQ2 Exception: " + ex.Message.ToString());
                }
                msgTx.Abort();
            }
            return "SUCCESS";
        }

        #region Load Netsuite data into SDE
        //NS-LATEST SALES ORDER
        private Boolean LatestSalesOrders(sdeEntities entities, RequestNetsuiteEntity r)
        {
            this.DataFromNetsuiteLog.Info("LatestSalesOrders: Pulling sales orders ********");

            //TBA
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            DataCenterAwareNetSuiteService netsuiteService = new DataCenterAwareNetSuiteService(account);


            //WY-11.SEPT.2014
            List<cls_customer> listCust = new List<cls_customer>();
            Record[] customerRecord = null;
            Boolean isValidCust = true;

            Record[] pffRecord = null;
            Boolean status = false;

            /*Status netsuiteStatus = new Status();
            service.Timeout = 1000000000;
            service.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();
            appinfo.applicationId = @Resource.NETSUITE_LOGIN_APPLICATIONID;
            service.applicationInfo = appinfo;

            Passport passport = new Passport();
            passport.account = @Resource.NETSUITE_LOGIN_ACCOUNT;
            passport.email = @Resource.NETSUITE_LOGIN_EMAIL_PULL;

            RecordRef role = new RecordRef();
            role.internalId = @Resource.NETSUITE_LOGIN_ROLE_INTERNALID;

            passport.role = role;
            //kang get netsuite password from DB
            //passport.password = @Resource.NETSUITE_LOGIN_PASSWORD;
            passport.password = getNetsuitePassword(@Resource.NETSUITE_LOGIN_EMAIL_PULL);

            netsuiteStatus = service.login(passport).status;
            Boolean loginStatus = netsuiteStatus.isSuccess;
            */
            //TBA
            ItemSearchBasic basic = new ItemSearchBasic()
            {
                internalId = new SearchMultiSelectField()
                {
                    @operator = SearchMultiSelectFieldOperator.anyOf,
                    operatorSpecified = true,
                    searchValue = new RecordRef[] {
                    new RecordRef() {
                    internalId = "14943"
                         }
                    }
                }
            };

            string loginEmail = "";
            loginEmail = @Resource.NETSUITE_LOGIN_EMAIL_PULL;
            tokenId = @Resource.ASIA_WEBSERVICE_4_TOKEN_ID;
            tokenSecret = @Resource.ASIA_WEBSERVICE_4_TOKEN_SECRET;


            netsuiteService.Timeout = 1000000000;
            netsuiteService.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();
            //  appinfo.applicationId = appID;
            netsuiteService.applicationInfo = appinfo;
            int startRec = 0;
            int endRec = 0;
            try
            {
                Console.WriteLine("Success");
                netsuiteService.tokenPassport = createTokenPassport();
                SearchResult status1 = netsuiteService.search(basic);

                if (status1.status.isSuccess == true)
                {

                    this.DataFromNetsuiteLog.Debug("LatestSalesOrders: Login Netsuite success.");
                    this.DataFromNetsuiteLog.Info("LatestSalesOrders: Retrieving sales order every 2 hours from Netsuite.");
                    netsuiteService.tokenPassport = createTokenPassport();
                    AsyncResult pffResponse = netsuiteService.getAsyncResult(r.rn_jobID, 1);
                    AsyncSearchResult salesOrderSearchResult = (AsyncSearchResult)pffResponse;
                    pffRecord = salesOrderSearchResult.searchResult.recordList;
                    startRec = 0;
                    endRec = pffRecord.Count();
                    try
                    {
                        #region Customer Info
                        if (pffRecord != null && pffRecord.Count() > 0)
                        {
                            //customer info remains getting all instead of using startRec and endRec
                            for (int g = 0; g < pffRecord.Count(); g++)
                            {
                                SalesOrder so = (SalesOrder)pffRecord[g];
                                String customerInternalID = so.entity.internalId;
                                String dropShipMYCustID = string.Empty; //If dropshipment will based on MY Sales Order Customer Info - WY-22.SEPT.2014

                                // DAVID
                                String SEISSONumber = null;
                                #region Custom Fields Looping
                                for (int i = 0; i < so.customFieldList.Count(); i++)
                                {
                                    if (so.customFieldList[i].ToString().Equals("sde.comNetsuiteServices.StringCustomFieldRef"))
                                    {
                                        StringCustomFieldRef custom1 = (StringCustomFieldRef)so.customFieldList[i];
                                        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SEISSALESORDERNUMBER_SCRIPTID))
                                        {
                                            SEISSONumber = custom1.value;
                                            if (!String.IsNullOrEmpty(SEISSONumber))
                                            {
                                                var SEISInfo = (from q1 in entities.netsuite_newso
                                                                where q1.nt1_moNo == SEISSONumber
                                                                select new { q1.nt1_customer_internalID, q1.nt1_country, q1.nt1_businessChannel_internalID }).FirstOrDefault();

                                                if ((SEISInfo != null) && (!String.IsNullOrEmpty(SEISInfo.nt1_customer_internalID)))
                                                {
                                                    customerInternalID = SEISInfo.nt1_customer_internalID;

                                                    //If dropshipment will based on MY Sales Order Customer Info - WY-22.SEPT.2014 
                                                    switch (SEISInfo.nt1_country)
                                                    {
                                                        case "SG":
                                                            dropShipMYCustID = @Resource.SEIS_CUSTOMER_MY; //P00892
                                                            break;
                                                        //TH DROPSHIP
                                                        case "TH":
                                                            dropShipMYCustID = @Resource.DROPSHIP_CUSTOMER_TH; //P01042
                                                            break;
                                                        default:
                                                            dropShipMYCustID = "";
                                                            break;
                                                    }
                                                    if (SEISInfo.nt1_country == "SG" && SEISInfo.nt1_businessChannel_internalID == @Resource.LOB_EDUCATIONGENERAL_INTERNALID)
                                                    {
                                                        dropShipMYCustID = @Resource.SEIS_CUSTOMER_MY_EDUGENERAL;
                                                    }
                                                    //Added by Brash Developer on 21-Apr-2021 Start
                                                    else if (SEISInfo.nt1_country == "SG" && SEISInfo.nt1_businessChannel_internalID == @Resource.LOB_ONLINESTORE_INTERNALID)
                                                    {
                                                        dropShipMYCustID = @Resource.SEIS_CUSTOMER_MY_ONLINESTORE;
                                                    }
                                                    else if (SEISInfo.nt1_country == "TH" && SEISInfo.nt1_businessChannel_internalID == @Resource.LOB_ONLINESTORE_INTERNALID)
                                                    {
                                                        dropShipMYCustID = @Resource.DROPSHIP_CUSTOMER_TH_ONLINESTORE;
                                                    }
                                                    //End
                                                }
                                                else
                                                {
                                                    customerInternalID = "";
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion
                                // DAVID

                                //Add checking for customerInternalId if empty then skip - WY-02.OCT.2014
                                if (!String.IsNullOrEmpty(customerInternalID))
                                {
                                    SearchPreferences sp = new SearchPreferences();
                                    sp.bodyFieldsOnly = false;
                                    netsuiteService.searchPreferences = sp;
                                    CustomerSearchAdvanced csa = new CustomerSearchAdvanced();
                                    CustomerSearch cs = new CustomerSearch();
                                    CustomerSearchBasic csb = new CustomerSearchBasic();

                                    RecordRef[] refInternalID = new RecordRef[1];
                                    RecordRef refEntity = new RecordRef();
                                    refEntity.internalId = customerInternalID;
                                    refInternalID[0] = refEntity;

                                    SearchMultiSelectField csInternalID = new SearchMultiSelectField();
                                    csInternalID.@operator = SearchMultiSelectFieldOperator.anyOf;
                                    csInternalID.operatorSpecified = true;
                                    csInternalID.searchValue = refInternalID;
                                    csb.internalId = csInternalID;

                                    cs.basic = csb;
                                    csa.criteria = cs;
                                    //login(@Resource.NETSUITE_LOGIN_EMAIL_PULL);
                                    //TBA

                                    this.DataFromNetsuiteLog.Info("customer details.");
                                    netsuiteService.tokenPassport = createTokenPassport();
                                    SearchResult sr = netsuiteService.search(csa);
                                    customerRecord = sr.recordList;

                                    //logout();


                                    for (int i = 0; i < customerRecord.Count(); i++)
                                    {
                                        Customer cust = (Customer)customerRecord[i];
                                        cls_customer cust2 = new cls_customer();
                                        String salesTer = null;

                                        for (int a = 0; a < cust.customFieldList.Count(); a++)
                                        {
                                            if (cust.customFieldList[a].ToString().Equals("sde.comNetsuiteServices.SelectCustomFieldRef"))
                                            {
                                                SelectCustomFieldRef custom1 = (SelectCustomFieldRef)cust.customFieldList[a];
                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SALESTERRITORY_SCRIPTID))
                                                {
                                                    switch (custom1.value.internalId)
                                                    {
                                                        case "1":
                                                            salesTer = "TH";
                                                            break;
                                                        case "16":
                                                            salesTer = "TH";
                                                            break;
                                                        case "8":
                                                            salesTer = "ID";
                                                            break;
                                                        case "14":
                                                            salesTer = "SG";
                                                            break;
                                                        case "10":
                                                            salesTer = "MY";
                                                            break;
                                                        default:
                                                            salesTer = "NA";
                                                            break;
                                                    }
                                                }
                                            }
                                        }

                                        if (cust.addressbookList != null)
                                        {
                                            cust2.custID = customerInternalID;
                                            Int32 addBookCount = cust.addressbookList.addressbook.Count();

                                            //To get Customer ID - WY-22.SEPT.2014
                                            if (!String.IsNullOrEmpty(dropShipMYCustID))
                                            {
                                                cust2.customerID = dropShipMYCustID;
                                            }
                                            else
                                            {
                                                cust2.customerID = cust.entityId;
                                            }

                                            for (int b = 0; b < addBookCount; b++)
                                            {
                                                Boolean isDefaultShipAdd = false;
                                                Boolean isDefaultBillAdd = false;//Added Billing Address - WY-25.SEPT.2014
                                                String deliveryAdd3, billingAdd3 = string.Empty;//Change the Address3 - WY-17.SEPT.2014
                                                String city, billingCity = string.Empty;//Change the Address3 - WY-17.SEPT.2014
                                                String state, billingState = string.Empty;//Change the Address3 - WY-17.SEPT.2014
                                                String postCode, billingPostcode = string.Empty;//Change the Address3 - WY-17.SEPT.2014
                                                String country, billingCountry = string.Empty;//Change the Address3 - WY-17.SEPT.2014

                                                isDefaultShipAdd = cust.addressbookList.addressbook[b].defaultShipping;
                                                if (isDefaultShipAdd == true)
                                                {
                                                    cust2.addressee = cust.addressbookList.addressbook[b].addressbookAddress.addressee;
                                                    cust2.deliveryAdd = cust.addressbookList.addressbook[b].addressbookAddress.addr1;
                                                    cust2.deliveryAdd2 = cust.addressbookList.addressbook[b].addressbookAddress.addr2;
                                                    //cust2.deliveryAdd3 = cust.addressbookList.addressbook[b].addr3;
                                                    cust2.postCode = cust.addressbookList.addressbook[b].addressbookAddress.zip;
                                                    cust2.contactPerson = cust.addressbookList.addressbook[b].addressbookAddress.attention;
                                                    cust2.phone = cust.addressbookList.addressbook[b].addressbookAddress.addrPhone;

                                                    //Change the Address3 - WY-17.SEPT.2014
                                                    city = cust.addressbookList.addressbook[b].addressbookAddress.city;
                                                    state = cust.addressbookList.addressbook[b].addressbookAddress.state;
                                                    postCode = cust.addressbookList.addressbook[b].addressbookAddress.zip;
                                                    country = checkIsNull(cust.addressbookList.addressbook[b].addressbookAddress.country.ToString()).Replace("_", string.Empty).ToUpper();
                                                    //deliveryAdd3 = city + " " + state + " " + postCode + " " + country;
                                                    deliveryAdd3 = "";
                                                    if (!String.IsNullOrEmpty(city))
                                                    {
                                                        deliveryAdd3 = city;
                                                    }

                                                    if (!String.IsNullOrEmpty(state))
                                                    {
                                                        if (!String.IsNullOrEmpty(deliveryAdd3))
                                                        {
                                                            deliveryAdd3 = deliveryAdd3.TrimEnd() + " " + state;
                                                        }
                                                        else
                                                        {
                                                            deliveryAdd3 = state;
                                                        }
                                                    }

                                                    if (!String.IsNullOrEmpty(postCode))
                                                    {
                                                        if (!String.IsNullOrEmpty(deliveryAdd3))
                                                        {
                                                            deliveryAdd3 = deliveryAdd3.TrimEnd() + " " + postCode;
                                                        }
                                                        else
                                                        {
                                                            deliveryAdd3 = postCode;
                                                        }
                                                    }

                                                    if (!String.IsNullOrEmpty(country))
                                                    {
                                                        if (!String.IsNullOrEmpty(deliveryAdd3))
                                                        {
                                                            deliveryAdd3 = deliveryAdd3.TrimEnd() + " " + country;
                                                        }
                                                        else
                                                        {
                                                            deliveryAdd3 = country;
                                                        }
                                                    }
                                                    deliveryAdd3 = checkIsNull(deliveryAdd3);
                                                    cust2.deliveryAdd3 = deliveryAdd3;
                                                    //break;
                                                }

                                                //Added Billing Address - WY-25.SEPT.2014
                                                isDefaultBillAdd = cust.addressbookList.addressbook[b].defaultBilling;
                                                if (isDefaultBillAdd == true)
                                                {
                                                    cust2.billingAddressee = cust.addressbookList.addressbook[b].addressbookAddress.addressee;
                                                    cust2.billingAdd = cust.addressbookList.addressbook[b].addressbookAddress.addr1;
                                                    cust2.billingAdd2 = cust.addressbookList.addressbook[b].addressbookAddress.addr2;
                                                    cust2.billingPostcode = cust.addressbookList.addressbook[b].addressbookAddress.zip;
                                                    cust2.billingContactPerson = cust.addressbookList.addressbook[b].addressbookAddress.attention;
                                                    cust2.billingPhone = cust.addressbookList.addressbook[b].addressbookAddress.addrPhone;

                                                    billingCity = cust.addressbookList.addressbook[b].addressbookAddress.city;
                                                    billingState = cust.addressbookList.addressbook[b].addressbookAddress.state;
                                                    billingPostcode = cust.addressbookList.addressbook[b].addressbookAddress.zip;
                                                    billingCountry = checkIsNull(cust.addressbookList.addressbook[b].addressbookAddress.country.ToString()).Replace("_", string.Empty).ToUpper();
                                                    //billingAdd3 = billingCity + " " + billingState + " " + billingPostcode + " " + billingCountry;

                                                    billingAdd3 = "";
                                                    if (!String.IsNullOrEmpty(billingCity))
                                                    {
                                                        billingAdd3 = billingCity;
                                                    }

                                                    if (!String.IsNullOrEmpty(billingState))
                                                    {
                                                        if (!String.IsNullOrEmpty(billingAdd3))
                                                        {
                                                            billingAdd3 = billingAdd3.TrimEnd() + " " + billingState;
                                                        }
                                                        else
                                                        {
                                                            billingAdd3 = billingState;
                                                        }
                                                    }

                                                    if (!String.IsNullOrEmpty(billingPostcode))
                                                    {
                                                        if (!String.IsNullOrEmpty(billingAdd3))
                                                        {
                                                            billingAdd3 = billingAdd3.TrimEnd() + " " + billingPostcode;
                                                        }
                                                        else
                                                        {
                                                            billingAdd3 = billingPostcode;
                                                        }
                                                    }

                                                    if (!String.IsNullOrEmpty(billingCountry))
                                                    {
                                                        if (!String.IsNullOrEmpty(billingAdd3))
                                                        {
                                                            billingAdd3 = billingAdd3.TrimEnd() + " " + billingCountry;
                                                        }
                                                        else
                                                        {
                                                            billingAdd3 = billingCountry;
                                                        }
                                                    }
                                                    billingAdd3 = checkIsNull(billingAdd3);
                                                    cust2.billingAdd3 = billingAdd3;
                                                }
                                            }
                                            cust2.country = salesTer;
                                        }
                                        listCust.Add(cust2);
                                    }
                                }
                                else
                                {
                                    cls_customer cust2 = new cls_customer();
                                    cust2.custID = customerInternalID;
                                    cust2.customerID = string.Empty;
                                    cust2.addressee = string.Empty;
                                    cust2.deliveryAdd = string.Empty;
                                    cust2.deliveryAdd2 = string.Empty;
                                    cust2.deliveryAdd3 = string.Empty;
                                    cust2.postCode = string.Empty;
                                    cust2.contactPerson = string.Empty;
                                    cust2.phone = string.Empty;
                                    cust2.billingAddressee = string.Empty;
                                    cust2.billingAdd = string.Empty;
                                    cust2.billingAdd2 = string.Empty;
                                    cust2.billingPostcode = string.Empty;
                                    cust2.billingContactPerson = string.Empty;
                                    cust2.billingPhone = string.Empty;
                                    cust2.billingAdd3 = string.Empty;
                                    listCust.Add(cust2);
                                }
                            }
                        }
                        #endregion
                    }
                    catch (Exception ex)
                    {
                        if (ex.Message.Contains("a session at a time") || ex.Message.Contains("Your connection has timed out"))
                        {
                            this.DataFromNetsuiteLog.Debug("LatestSalesOrders Logout Exception: " + ex.ToString());
                        }
                        else
                        {
                            this.DataFromNetsuiteLog.Error("LatestSalesOrders Logout Exception: " + ex.ToString());
                        }
                        isValidCust = false;
                    }
                }
                else
                {
                    this.DataFromNetsuiteLog.Fatal("LatestSalesOrders: Login Netsuite failed.");
                    isValidCust = false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error!! ");
                Console.WriteLine(ex.Message);
                this.DataFromNetsuiteLog.Fatal("LatestSalesOrders: Login Netsuite failed.");
                isValidCust = false;
            }

            if (isValidCust == true)
            {
                //Extend the transaction timeout - WY-02.SEPT.2014
                var option = new TransactionOptions
                {
                    IsolationLevel = IsolationLevel.RepeatableRead,
                    Timeout = TimeSpan.FromSeconds(2400)
                };

                //using (TransactionScope scope1 = new TransactionScope()) 
                using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    if (pffRecord != null && pffRecord.Count() > 0)
                    {
                        this.DataFromNetsuiteLog.Info("LatestSalesOrders: " + pffRecord.Count() + " records is retrieved.");
                        try
                        {
                            String rangeTo = convertDateToString(Convert.ToDateTime(r.rn_rangeTo));
                            String createdDate = convertDateToString(DateTime.Now);

                            for (int i = startRec; i < endRec; i++)
                            {
                                SalesOrder so = (SalesOrder)pffRecord[i];

                                //if ((so.status.ToUpper() == "PENDING BILLING") || (so.status.ToUpper() == "BILLED") || (so.status.ToUpper() == "CLOSED"))
                                //{
                                //    var doneSO1 = "update netsuite_newso set nt1_status='" + so.status.ToUpper() + "' where nt1_moNo_internalID = '" + so.internalId + "'";
                                //    this.DataFromNetsuiteLog.Debug("LatestSalesOrders: " + doneSO1);
                                //    entities.Database.ExecuteSqlCommand(doneSO1);
                                //}
                                //else
                                //{
                                //}

                                var deleteSO1 = "delete from netsuite_newso where nt1_moNo_internalID = '" + so.internalId + "' ";
                                this.DataFromNetsuiteLog.Debug("LatestSalesOrders: " + deleteSO1);
                                entities.Database.ExecuteSqlCommand(deleteSO1);

                                String moNo = so.tranId;
                                String moNoInternalID = so.internalId;
                                String memo = so.memo;
                                String ponumber = so.otherRefNum;
                                String discItemInternalID = string.Empty;
                                if (so.discountItem != null)
                                {
                                    discItemInternalID = so.discountItem.internalId;
                                }
                                String soDate = "0001-01-01";
                                if (so.tranDate != null)
                                {
                                    soDate = convertDateToString(so.tranDate);
                                }
                                String LOB = so.@class.internalId;
                                #region Custom List Information - WY-05.FEB.2015
                                String customer = checkIsNull(listCust[i].customerID).Replace("'", "''");
                                String customerInternalID = so.entity.internalId;
                                String SEISmoNo = "";
                                String SEISmoNoInternalID = "";
                                String syncToWMS = "";
                                String subsidiary = so.subsidiary.name;
                                if (so.subsidiary.name.ToUpper().Equals("SCHOLASTIC EDUCATION INTERNATIONAL (SINGAPORE) PTE LTD"))
                                {
                                    subsidiary = "SEIS";
                                }
                                String term = checkRecordRefIsNull(so.terms);
                                this.DataFromNetsuiteLog.Debug("LatestSalesOrders: " + term + "SO NO : " + so.tranId);
                                if (!String.IsNullOrEmpty(term))
                                {
                                    term = SplitSalesOrderTerm(term);
                                }
                                String poDate = "0001-01-01";
                                String forwTo = string.Empty;
                                String forwLabel = string.Empty;
                                String forwAddressee = string.Empty;
                                String forwAttention = string.Empty;
                                String forwAdd1 = string.Empty;
                                String forwAdd2 = string.Empty;
                                String forwAdd3 = string.Empty;
                                String forwState = string.Empty;
                                String forwPostcode = string.Empty;
                                String forwCountry = string.Empty;
                                String forwCity = string.Empty;
                                String forwPhone = string.Empty;
                                String forwInternalID = string.Empty;
                                String custBooking = "N";
                                //FAS order 09/10/2018 - Mohan

                                String teacherName = string.Empty;
                                int creditHold = 0;
                                string fasOrder = "N";
                                //FAS order 09/10/2018 - Mohan end

                                //ANET-37 - Sales Order - Auto stop back order
                                //No Back Order - Brash Developer 28-Apr-2021 Start
                                string noBackOrder = "N";
                                //End

                                for (int custAtt = 0; custAtt < so.customFieldList.Count(); custAtt++)
                                {
                                    String customFieldStr = so.customFieldList[custAtt].ToString();
                                    switch (customFieldStr)
                                    {
                                        case "sde.comNetsuiteServices.StringCustomFieldRef":
                                            StringCustomFieldRef custom1 = (StringCustomFieldRef)so.customFieldList[custAtt];
                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SEISSALESORDERNUMBER_SCRIPTID))
                                            {
                                                SEISmoNo = custom1.value;
                                                SEISmoNoInternalID = custom1.internalId;
                                            }
                                            else
                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_LABEL_SCRIPTID))
                                                {
                                                    forwLabel = custom1.value;
                                                }
                                                else
                                                    if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ATTENTION_SCRIPTID))
                                                    {
                                                        forwAttention = custom1.value;
                                                    }
                                                    else
                                                        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ADDRESSEE_SCRIPTID))
                                                        {
                                                            forwAddressee = custom1.value;
                                                        }
                                                        else
                                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_PHONE_SCRIPTID))
                                                            {
                                                                forwPhone = custom1.value;
                                                            }
                                                            else
                                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ADDR1_SCRIPTID))
                                                                {
                                                                    forwAdd1 = custom1.value;
                                                                }
                                                                else
                                                                    if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ADDR2_SCRIPTID))
                                                                    {
                                                                        forwAdd2 = custom1.value;
                                                                    }
                                                                    else
                                                                        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ADDR3_SCRIPTID))
                                                                        {
                                                                            forwAdd3 = custom1.value;
                                                                        }
                                                                        else
                                                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_CITY_SCRIPTID))
                                                                            {
                                                                                forwCity = custom1.value;
                                                                            }
                                                                            else
                                                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_STATE_SCRIPTID))
                                                                                {
                                                                                    forwState = custom1.value;
                                                                                }
                                                                                else
                                                                                    if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_COUNTRY_SCRIPTID))
                                                                                    {
                                                                                        forwCountry = custom1.value;
                                                                                    }
                                                                                    //FAS order 09/10/2018 - Mohan
                                                                                    else if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_OFFER_DESC_INTERNAL_SCRIPTID))
                                                                                    {
                                                                                        teacherName = custom1.value;
                                                                                    }
                                            //FAS order 09/10/2018 - Mohan end
                                            break;

                                        case "sde.comNetsuiteServices.SelectCustomFieldRef":
                                            SelectCustomFieldRef customSelect = (SelectCustomFieldRef)so.customFieldList[custAtt];
                                            if (customSelect.scriptId.Equals(@Resource.CUSTOMFIELD_SYNCTOWMS_SCRIPTID))
                                            {
                                                syncToWMS = customSelect.value.internalId;
                                            }
                                            else
                                                if (customSelect.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDERTO_SCRIPTID))
                                                {
                                                    forwTo = customSelect.value.name;
                                                    forwInternalID = customSelect.value.internalId;
                                                }
                                            break;
                                        case "sde.comNetsuiteServices.DateCustomFieldRef":
                                            DateCustomFieldRef customDate = (DateCustomFieldRef)so.customFieldList[custAtt];
                                            if (customDate.scriptId.Equals(@Resource.CUSTOMFIELD_PODATE_SCRIPTID))
                                            {
                                                poDate = convertDateToString(customDate.value);
                                            }
                                            break;
                                        case "sde.comNetsuiteServices.LongCustomFieldRef":
                                            LongCustomFieldRef customLong = (LongCustomFieldRef)so.customFieldList[custAtt];
                                            if (customLong.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_POSTCODE_SCRIPTID))
                                            {
                                                forwPostcode = Convert.ToString(customLong.value);
                                            }
                                            break;
                                        case "sde.comNetsuiteServices.BooleanCustomFieldRef":
                                            BooleanCustomFieldRef customBool = (BooleanCustomFieldRef)so.customFieldList[custAtt];
                                            if (customBool.scriptId.Equals(@Resource.CUSTOMFIELD_CUST_BOOKING_SCRIPTID))
                                            {
                                                if (customBool.value)
                                                {
                                                    custBooking = "Y";
                                                }
                                            }
                                            //FAS order 09/10/2018 - Mohan
                                            else if (customBool.scriptId.Equals(@Resource.CUSTOMFIELD_FAS_ORDER_INTERNAL_SCRIPTID))
                                            {
                                                if (customBool.value)
                                                {
                                                    fasOrder = "Y";
                                                }
                                            }
                                            //FAS order 09/10/2018 - Mohan end
                                            //Credit Hold 02052019 - MOHAN
                                            else if (customBool.scriptId.Equals(@Resource.SALES_ORDER_CREDIT_HOLD_FIELDID))
                                            {
                                                if (customBool.value)
                                                {
                                                    creditHold = 1;
                                                }
                                            }
                                            //Credit Hold 02052019 - MOHAN
                                            //ANET-37 - Sales Order - Auto stop back order
                                            //No Back Order - Brash Developer 28-Apr-2021 Start
                                            else if (customBool.scriptId.Equals(@Resource.CUSTOMFIELD_NO_BACK_ORDER_INTERNAL_SCRIPTID))
                                            {
                                                if (customBool.value)
                                                {
                                                    noBackOrder = "Y";
                                                }
                                            }
                                            //End

                                            break;
                                    }
                                }
                                #endregion

                                for (int j = 0; j < so.itemList.item.Count(); j++)
                                {
                                    String moNoStatus = so.status.ToUpper();
                                    String itemTitle = SplitItemByISBN(so.itemList.item[j].item.name);
                                    Int32 itemLine = Convert.ToInt32(so.itemList.item[j].line);
                                    String itemInternalID = so.itemList.item[j].item.internalId;
                                    Double committedQty = so.itemList.item[j].quantityCommitted;
                                    Double fulfilledQty = so.itemList.item[j].quantityFulfilled;
                                    Double ordQty = so.itemList.item[j].quantity;
                                    Double tax = so.itemList.item[j].taxRate1;
                                    Double rate = 0;
                                    Double nt_discount = 0; //Get the Discount Total - WY-08.SEPT.2014
                                    String strDiscPercentage = string.Empty;//Get the Discount Total - WY-08.SEPT.2014
                                    //FAS order 09/10/2018 - Mohan
                                    String className = string.Empty;
                                    //FAS order 09/10/2018 - Mohan end
                                    if (so.itemList.item[j].rate == null)
                                    {
                                        rate = 0;
                                    }
                                    else
                                    {
                                        rate = Convert.ToDouble(so.itemList.item[j].rate.Replace("%", ""));
                                    }
                                    String isClosed = "N";
                                    if (so.itemList.item[j].isClosed)
                                    {
                                        isClosed = "Y";
                                    }
                                    Double grossAmount = so.itemList.item[j].grossAmt; //Get the Discount Total - WY-08.SEPT.2014
                                    //Double amount = so.itemList.item[j].amount;  //Get the Discount Total - WY-08.SEPT.2014
                                    Double amount = 0;
                                    //String customer = checkIsNull(listCust[i].customerID).Replace("'", "''");//To get Customer ID - WY-22.SEPT.2014
                                    //String customerInternalID = so.entity.internalId;
                                    //String SEISmoNo = "";
                                    //String SEISmoNoInternalID = "";
                                    //String syncToWMS = "";
                                    //String subsidiary = so.subsidiary.name;
                                    //if (so.subsidiary.name.ToUpper().Equals("SCHOLASTIC EDUCATION INTERNATIONAL (SINGAPORE) PTE LTD"))
                                    //{
                                    //    subsidiary = "SEIS";
                                    //}
                                    //Add BasedPrice & RRP - WY-29.SEPT.2014
                                    Double basedPrice = 0;
                                    String priceLevel = so.itemList.item[j].price.name;
                                    String priceLevelInternalID = so.itemList.item[j].price.internalId;

                                    //for (int k = 0; k < so.customFieldList.Count(); k++)
                                    //{
                                    //    if (customerInternalID == @Resource.SEIS_CUSTOMER_MY_INTERNALID)//Only DropShip Customer will checking
                                    //    {
                                    //        if (so.customFieldList[k].ToString().Equals("sde.comNetsuiteServices.StringCustomFieldRef"))
                                    //        {
                                    //            StringCustomFieldRef custom1 = (StringCustomFieldRef)so.customFieldList[k];
                                    //            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SEISSALESORDERNUMBER_SCRIPTID))
                                    //            {
                                    //                SEISmoNo = custom1.value;
                                    //                SEISmoNoInternalID = custom1.internalId;
                                    //            }
                                    //        }
                                    //    }
                                    //    /*  Change filter when insert into netsuite_syncso - WY-25.AUG.2014     */ 
                                    //    if (so.customFieldList[k].ToString().Equals("sde.comNetsuiteServices.SelectCustomFieldRef"))
                                    //    {
                                    //        SelectCustomFieldRef custom1 = (SelectCustomFieldRef)so.customFieldList[k];
                                    //        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SYNCTOWMS_SCRIPTID))
                                    //        {
                                    //            syncToWMS = custom1.value.internalId;
                                    //        }
                                    //    }
                                    //}

                                    /*  Get the Discount Total - WY-08.SEPT.2014     */
                                    for (int discTol = 0; discTol < so.itemList.item[j].customFieldList.Count(); discTol++)
                                    {
                                        if (so.itemList.item[j].customFieldList[discTol].ToString().Equals("sde.comNetsuiteServices.DoubleCustomFieldRef"))
                                        {
                                            DoubleCustomFieldRef custom1 = (DoubleCustomFieldRef)so.itemList.item[j].customFieldList[discTol];
                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_DISCTOTAL_SCRIPTID))
                                            {
                                                amount = custom1.value;
                                            }
                                            //Add BasedPrice & RRP - WY-29.SEPT.2014
                                            else
                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_BASEDPRICE_SCRIPTID))
                                                {
                                                    basedPrice = custom1.value;
                                                }
                                        }
                                        else
                                            if (so.itemList.item[j].customFieldList[discTol].ToString().Equals("sde.comNetsuiteServices.StringCustomFieldRef"))
                                            {
                                                StringCustomFieldRef custom1 = (StringCustomFieldRef)so.itemList.item[j].customFieldList[discTol];
                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_DISCPERCENTAGE_SCRIPTID))
                                                {
                                                    strDiscPercentage = checkIsNull(custom1.value);
                                                    if ((strDiscPercentage == "") || (strDiscPercentage == "%"))
                                                    {
                                                        nt_discount = 0;
                                                    }
                                                    else
                                                    {
                                                        strDiscPercentage = strDiscPercentage.Replace('%', ' ');
                                                        strDiscPercentage = strDiscPercentage.Replace('-', ' ');
                                                        nt_discount = Convert.ToDouble(strDiscPercentage);
                                                    }
                                                }
                                                //FAS order 09/10/2018 - Mohan
                                                else if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_BOOK_CLUB_CLASS_INTERNAL_SCRIPTID))
                                                {

                                                    className = custom1.value;
                                                }
                                                //FAS order 09/10/2018 - Mohan end
                                            }
                                    }

                                    ////nt_discount = grossAmount - amount; //Get the Discount Total - WY-08.SEPT.2014 

                                    //String term = checkRecordRefIsNull(so.terms);
                                    //this.DataFromNetsuiteLog.Debug("LatestSalesOrders: " + term + "SO NO : " + so.tranId);
                                    //if (!String.IsNullOrEmpty(term))
                                    //{
                                    //    term = SplitSalesOrderTerm(term);
                                    //}

                                    var qItemIsbn = (from mi in entities.map_item
                                                     where mi.mi_item_internalID == itemInternalID
                                                     select mi.mi_item_isbn).FirstOrDefault();
                                    if (!String.IsNullOrEmpty(qItemIsbn))
                                    {
                                        itemTitle = qItemIsbn;
                                    }

                                    //ANET-37 - Sales Order - Auto stop back order -> No Back Order "nt1_nobackorder" - Brash Developer 28-Apr-2021 Start
                                    //FAS order 09/10/2018 - Mohan
                                    var insertSO1 = "insert into netsuite_newso (nt1_moNo,nt1_moNo_internalID,nt1_status,nt1_itemID,nt1_item_internalID,nt1_ordQty,nt1_committedQty,nt1_fulfilledQty,nt1_tax," +
                                       "nt1_rate,nt1_amount,nt1_customer,nt1_customer_internalID,nt1_SEIS_moNo,nt1_SEIS_moNo_internalID,nt1_subsidiary,nt1_createdDate,nt1_rangeTo,nt1_synctowms,nt1_discount," +
                                       "nt1_custID,nt1_addressee,nt1_deliveryAdd,nt1_deliveryAdd2,nt1_deliveryAdd3,nt1_postCode,nt1_contactPerson,nt1_phone,nt1_country, " +
                                       "nt1_billingAddressee,nt1_billingAdd,nt1_billingAdd2,nt1_billingAdd3,nt1_billingPostcode,nt1_billingContactPerson,nt1_billingPhone, " +
                                       "nt1_shipMethod,nt1_creditTerm,nt1_basedprice,nt1_pricelevel,nt1_memo,nt1_ponumber,nt1_itemLine,nt1_discountItem_internalID,nt1_podate,nt1_forwarderTo,nt1_forwarderLabel,nt1_forwarderAddressee," +
                                       "nt1_forwarderAdd1,nt1_forwarderAdd2,nt1_forwarderAdd3,nt1_forwarderAttention,nt1_forwarderState,nt1_forwarderPostcode,nt1_forwarderCity,nt1_forwarderCountry,nt1_forwarderPhone," +
                                       "nt1_forwarderInternalID,nt1_pricelevel_InternalID,nt1_sodate,nt1_closed,nt1_businessChannel_internalID,nt1_customer_booked, nt1_is_fas, nt1_teacher_name, nt1_class_name, nt1_credit_hold,nt1_nobackorder  ) values (" +
                                       "'" + moNo + "','" + moNoInternalID + "','" + moNoStatus + "','" + itemTitle + "','" + itemInternalID + "','" + ordQty + "','" + committedQty + "','" + fulfilledQty + "','" + tax + "'," +
                                       "'" + rate + "','" + amount + "','" + customer + "','" + customerInternalID + "','" + SEISmoNo + "','" + SEISmoNoInternalID + "','" + subsidiary.ToUpper() + "'," +
                                       "'" + createdDate + "','" + rangeTo + "','" + syncToWMS + "','" + nt_discount + "','" + listCust[i].custID + "','" + checkIsNull(listCust[i].addressee).Replace("'", "''") + "'," +
                                       "'" + checkIsNull(listCust[i].deliveryAdd).Replace("'", "''") + "','" + checkIsNull(listCust[i].deliveryAdd2).Replace("'", "''") + "'," +
                                       "'" + checkIsNull(listCust[i].deliveryAdd3).Replace("'", "''") + "','" + checkIsNull(listCust[i].postCode).Replace("'", "''").Replace(" ", "") + "','" + checkIsNull(listCust[i].contactPerson).Replace("'", "''") + "'," +
                                       "'" + checkIsNull(listCust[i].phone).Replace("'", "''") + "','" + checkIsNull(listCust[i].country).Replace("'", "''") + "'," +
                                       "'" + checkIsNull(listCust[i].billingAddressee).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingAdd).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingAdd2).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingAdd3).Replace("'", "''") + "', " +
                                       "'" + checkIsNull(listCust[i].billingPostcode).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingContactPerson).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingPhone).Replace("'", "''") + "', " +
                                       "'" + checkRecordRefIsNull(so.shipMethod) + "','" + term + "','" + basedPrice + "','" + priceLevel + "','" + checkIsNull(memo).Replace("'", "''") + "','" + checkIsNull(ponumber).Replace("'", "''") + "', " +
                                       "'" + itemLine + "','" + discItemInternalID + "','" + checkIsNull(poDate).Replace("'", "''") + "','" + checkIsNull(forwTo).Replace("'", "''") + "','" + checkIsNull(forwLabel).Replace("'", "''") + "' " +
                                       ",'" + checkIsNull(forwAddressee).Replace("'", "''") + "','" + checkIsNull(forwAdd1).Replace("'", "''") + "','" + checkIsNull(forwAdd2).Replace("'", "''") + "' " +
                                       ",'" + checkIsNull(forwAdd3).Replace("'", "''") + "','" + checkIsNull(forwAttention).Replace("'", "''") + "','" + checkIsNull(forwState).Replace("'", "''") + "' " +
                                       ",'" + checkIsNull(forwPostcode).Replace("'", "''") + "','" + checkIsNull(forwCity).Replace("'", "''") + "','" + checkIsNull(forwCountry).Replace("'", "''") + "' " +
                                       ",'" + checkIsNull(forwPhone).Replace("'", "''") + "','" + checkIsNull(forwInternalID).Replace("'", "''") + "','" + checkIsNull(priceLevelInternalID).Replace("'", "''") + "','" + checkIsNull(soDate).Replace("'", "''") + "','" + isClosed + "','" + checkIsNull(LOB).Replace("'", "''") +
                                       "','" + custBooking + "','" + checkIsNull(fasOrder).Replace("'", "''") + "','" + checkIsNull(teacherName).Replace("'", "''") + "','" + checkIsNull(className).Replace("'", "''") + "','" + creditHold + "','" + checkIsNull(noBackOrder).Replace("'", "''") + "')";
                                    this.DataFromNetsuiteLog.Debug("LatestSalesOrders: " + insertSO1);
                                    entities.Database.ExecuteSqlCommand(insertSO1);
                                    //FAS order 09/10/2018 - Mohan end
                                }

                                Int32 rowCount = i + 1;
                                String _refno = "NETSUITE.LATEST-SO.SELECT." + r.rn_rangeFrom + "-" + r.rn_rangeTo;
                                var insertTask = "insert into requestnetsuite_task (rnt_task, rnt_description, rnt_refNO, rnt_jobID, rnt_status, rnt_createdDate, " +
                                "rnt_seqNO, rnt_createdFromInternalID, rnt_nsInternalId, rnt_updatedDate) values ('SELECT', '" + r.rn_sche_transactionType + "', '" + _refno + "', '" + r.rn_jobID + "'," +
                                "'TRUE', '" + convertDateToString(DateTime.Now) + "', '" + rowCount + "','', '" + moNoInternalID + "', '" + convertDateToString(DateTime.Now) + "')";
                                this.DataFromNetsuiteLog.Debug("LatestSalesOrders: " + insertTask);
                                entities.Database.ExecuteSqlCommand(insertTask);
                            }

                            var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                                "where rn_jobID = '" + r.rn_jobID + "'";
                            this.DataFromNetsuiteLog.Debug("LatestSalesOrders: " + updateRequestNetsuite);
                            entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                            scope1.Complete();
                            status = true;
                        }
                        catch (Exception ex)
                        {
                            this.DataFromNetsuiteLog.Error("LatestSalesOrders Exception: " + ex.ToString());
                            status = false;
                        }
                    }
                    else
                    {
                        var updateRequestNetsuite = "update requestnetsuite set rn_status='NO-DATA', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                            "where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("LatestSalesOrders: " + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                        scope1.Complete();

                    }
                    ////scope1.Complete();
                }
            }
            return status;
        }
        //For testing, insert into netsuite_newso_test table
        private Boolean LatestSalesOrdersTest(sdeEntities entities, RequestNetsuiteEntity r)
        {
            //TBA
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            DataCenterAwareNetSuiteService netsuiteService = new DataCenterAwareNetSuiteService(account);

            this.DataFromNetsuiteLog.Info("LatestSalesOrders: Pulling sales orders ********");

            //WY-11.SEPT.2014
            List<cls_customer> listCust = new List<cls_customer>();
            Record[] customerRecord = null;
            Boolean isValidCust = true;

            Record[] pffRecord = null;
            Boolean status = false;

            /*
            Status netsuiteStatus = new Status();
            service.Timeout = 1000000000;
            service.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();
            appinfo.applicationId = @Resource.NETSUITE_LOGIN_APPLICATIONID;
            service.applicationInfo = appinfo;

            Passport passport = new Passport();
            passport.account = @Resource.NETSUITE_LOGIN_ACCOUNT;
            passport.email = @Resource.NETSUITE_LOGIN_EMAIL;

            RecordRef role = new RecordRef();
            role.internalId = @Resource.NETSUITE_LOGIN_ROLE_INTERNALID;

            passport.role = role;
            //kang get netsuite password from DB
            //passport.password = @Resource.NETSUITE_LOGIN_PASSWORD;
            passport.password = getNetsuitePassword(@Resource.NETSUITE_LOGIN_EMAIL);

            netsuiteStatus = service.login(passport).status;
            Boolean loginStatus = netsuiteStatus.isSuccess;
             * */

            //TBA
            ItemSearchBasic basic = new ItemSearchBasic()
            {
                internalId = new SearchMultiSelectField()
                {
                    @operator = SearchMultiSelectFieldOperator.anyOf,
                    operatorSpecified = true,
                    searchValue = new RecordRef[] {
                    new RecordRef() {
                    internalId = "14943"
                         }
                    }
                }
            };


            netsuiteService.Timeout = 1000000000;
            netsuiteService.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();

            //  appinfo.applicationId = appID;
            netsuiteService.applicationInfo = appinfo;
            string loginEmail = "";
            loginEmail = @Resource.NETSUITE_LOGIN_EMAIL;
            tokenId = @Resource.ASIA_WEBSERVICE_TOKEN_ID;
            tokenSecret = @Resource.ASIA_WEBSERVICE_TOKEN_SECRET;


            Boolean loginStatus = false;
            try
            {
                Console.WriteLine("Success");
                netsuiteService.tokenPassport = createTokenPassport();
                SearchResult status1 = netsuiteService.search(basic);
                if (status1.status.isSuccess == true)
                {
                    loginStatus = true;
                }
                else
                {
                    loginStatus = false;
                }
            }
            catch (Exception ex)
            {
                loginStatus = false;
                this.DataFromNetsuiteLog.Fatal("SOFulfillmentUpdate: Login Netsuite failed. Exception : " + ex.ToString());

            }
            //

            int startRec = 0;
            int endRec = 0;
            if (loginStatus == true)
            {
                this.DataFromNetsuiteLog.Debug("LatestSalesOrders: Login Netsuite success.");
                this.DataFromNetsuiteLog.Info("LatestSalesOrders: Retrieving sales order every 2 hours from Netsuite.");

                //TBA
                netsuiteService.tokenPassport = createTokenPassport();
                AsyncResult pffResponse = netsuiteService.getAsyncResult(r.rn_jobID, 1);
                AsyncSearchResult salesOrderSearchResult = (AsyncSearchResult)pffResponse;
                pffRecord = salesOrderSearchResult.searchResult.recordList;
                startRec = 0;
                endRec = pffRecord.Count();

                try
                {
                    /*netsuiteStatus = (service.logout()).status;
                    if (netsuiteStatus.isSuccess == true)
                    {
                        this.DataFromNetsuiteLog.Debug("LatestSalesOrders: Logout Netsuite success.");
                    }
                    else
                    {
                        this.DataFromNetsuiteLog.Error("LatestSalesOrders: Logout Netsuite failed.");
                    }*/

                    //Move Code From SalesOrders - WY-11.SEPT.2014 
                    #region Customer Info
                    if (pffRecord != null && pffRecord.Count() > 0)
                    {
                        //customer info remains getting all instead of using startRec and endRec
                        for (int g = 0; g < pffRecord.Count(); g++)
                        {
                            SalesOrder so = (SalesOrder)pffRecord[g];
                            String customerInternalID = so.entity.internalId;
                            String dropShipMYCustID = string.Empty; //If dropshipment will based on MY Sales Order Customer Info - WY-22.SEPT.2014

                            // DAVID
                            String SEISSONumber = null;
                            #region Custom Fields Looping
                            for (int i = 0; i < so.customFieldList.Count(); i++)
                            {
                                if (so.customFieldList[i].ToString().Equals("sde.comNetsuiteServices.StringCustomFieldRef"))
                                {
                                    StringCustomFieldRef custom1 = (StringCustomFieldRef)so.customFieldList[i];
                                    if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SEISSALESORDERNUMBER_SCRIPTID))
                                    {
                                        SEISSONumber = custom1.value;
                                        if (!String.IsNullOrEmpty(SEISSONumber))
                                        {
                                            var SEISInfo = (from q1 in entities.netsuite_newso_test
                                                            where q1.nt1_moNo == SEISSONumber
                                                            select new { q1.nt1_customer_internalID, q1.nt1_country }).FirstOrDefault();

                                            if ((SEISInfo != null) && (!String.IsNullOrEmpty(SEISInfo.nt1_customer_internalID)))
                                            {
                                                customerInternalID = SEISInfo.nt1_customer_internalID;

                                                //If dropshipment will based on MY Sales Order Customer Info - WY-22.SEPT.2014 
                                                switch (SEISInfo.nt1_country)
                                                {
                                                    case "SG":
                                                        dropShipMYCustID = @Resource.SEIS_CUSTOMER_MY; //P00892
                                                        break;
                                                    //TH DROPSHIP
                                                    case "TH":
                                                        dropShipMYCustID = @Resource.DROPSHIP_CUSTOMER_TH; //P01042
                                                        break;
                                                    default:
                                                        dropShipMYCustID = "";
                                                        break;
                                                }
                                            }
                                            else
                                            {
                                                customerInternalID = "";
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion
                            // DAVID

                            //Add checking for customerInternalId if empty then skip - WY-02.OCT.2014
                            if (!String.IsNullOrEmpty(customerInternalID))
                            {
                                SearchPreferences sp = new SearchPreferences();
                                sp.bodyFieldsOnly = false;
                                //TBA
                                netsuiteService.tokenPassport = createTokenPassport();
                                netsuiteService.searchPreferences = sp;
                                CustomerSearchAdvanced csa = new CustomerSearchAdvanced();
                                CustomerSearch cs = new CustomerSearch();
                                CustomerSearchBasic csb = new CustomerSearchBasic();

                                RecordRef[] refInternalID = new RecordRef[1];
                                RecordRef refEntity = new RecordRef();
                                refEntity.internalId = customerInternalID;
                                refInternalID[0] = refEntity;

                                SearchMultiSelectField csInternalID = new SearchMultiSelectField();
                                csInternalID.@operator = SearchMultiSelectFieldOperator.anyOf;
                                csInternalID.operatorSpecified = true;
                                csInternalID.searchValue = refInternalID;
                                csb.internalId = csInternalID;

                                cs.basic = csb;
                                csa.criteria = cs;
                                //  login(@Resource.NETSUITE_LOGIN_EMAIL);
                                //TBA
                                netsuiteService.tokenPassport = createTokenPassport();
                                SearchResult sr = netsuiteService.search(csa);
                                //logout();
                                customerRecord = sr.recordList;

                                for (int i = 0; i < customerRecord.Count(); i++)
                                {
                                    Customer cust = (Customer)customerRecord[i];
                                    cls_customer cust2 = new cls_customer();
                                    String salesTer = null;

                                    for (int a = 0; a < cust.customFieldList.Count(); a++)
                                    {
                                        if (cust.customFieldList[a].ToString().Equals("sde.comNetsuiteServices.SelectCustomFieldRef"))
                                        {
                                            SelectCustomFieldRef custom1 = (SelectCustomFieldRef)cust.customFieldList[a];
                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SALESTERRITORY_SCRIPTID))
                                            {
                                                switch (custom1.value.internalId)
                                                {
                                                    case "1":
                                                        salesTer = "TH";
                                                        break;
                                                    case "16":
                                                        salesTer = "TH";
                                                        break;
                                                    case "8":
                                                        salesTer = "ID";
                                                        break;
                                                    case "14":
                                                        salesTer = "SG";
                                                        break;
                                                    case "10":
                                                        salesTer = "MY";
                                                        break;
                                                    default:
                                                        salesTer = "NA";
                                                        break;
                                                }
                                            }
                                        }
                                    }

                                    if (cust.addressbookList != null)
                                    {
                                        cust2.custID = customerInternalID;
                                        Int32 addBookCount = cust.addressbookList.addressbook.Count();

                                        //To get Customer ID - WY-22.SEPT.2014
                                        if (!String.IsNullOrEmpty(dropShipMYCustID))
                                        {
                                            cust2.customerID = dropShipMYCustID;
                                        }
                                        else
                                        {
                                            cust2.customerID = cust.entityId;
                                        }

                                        for (int b = 0; b < addBookCount; b++)
                                        {
                                            Boolean isDefaultShipAdd = false;
                                            Boolean isDefaultBillAdd = false;//Added Billing Address - WY-25.SEPT.2014
                                            String deliveryAdd3, billingAdd3 = string.Empty;//Change the Address3 - WY-17.SEPT.2014
                                            String city, billingCity = string.Empty;//Change the Address3 - WY-17.SEPT.2014
                                            String state, billingState = string.Empty;//Change the Address3 - WY-17.SEPT.2014
                                            String postCode, billingPostcode = string.Empty;//Change the Address3 - WY-17.SEPT.2014
                                            String country, billingCountry = string.Empty;//Change the Address3 - WY-17.SEPT.2014

                                            isDefaultShipAdd = cust.addressbookList.addressbook[b].defaultShipping;
                                            if (isDefaultShipAdd == true)
                                            {
                                                cust2.addressee = cust.addressbookList.addressbook[b].addressbookAddress.addressee;
                                                cust2.deliveryAdd = cust.addressbookList.addressbook[b].addressbookAddress.addr1;
                                                cust2.deliveryAdd2 = cust.addressbookList.addressbook[b].addressbookAddress.addr2;
                                                //cust2.deliveryAdd3 = cust.addressbookList.addressbook[b].addr3;
                                                cust2.postCode = cust.addressbookList.addressbook[b].addressbookAddress.zip;
                                                cust2.contactPerson = cust.addressbookList.addressbook[b].addressbookAddress.attention;
                                                cust2.phone = cust.addressbookList.addressbook[b].addressbookAddress.addrPhone;

                                                //Change the Address3 - WY-17.SEPT.2014
                                                city = cust.addressbookList.addressbook[b].addressbookAddress.city;
                                                state = cust.addressbookList.addressbook[b].addressbookAddress.state;
                                                postCode = cust.addressbookList.addressbook[b].addressbookAddress.zip;
                                                country = checkIsNull(cust.addressbookList.addressbook[b].addressbookAddress.country.ToString()).Replace("_", string.Empty).ToUpper();
                                                //deliveryAdd3 = city + " " + state + " " + postCode + " " + country;
                                                deliveryAdd3 = "";
                                                if (!String.IsNullOrEmpty(city))
                                                {
                                                    deliveryAdd3 = city;
                                                }

                                                if (!String.IsNullOrEmpty(state))
                                                {
                                                    if (!String.IsNullOrEmpty(deliveryAdd3))
                                                    {
                                                        deliveryAdd3 = deliveryAdd3.TrimEnd() + " " + state;
                                                    }
                                                    else
                                                    {
                                                        deliveryAdd3 = state;
                                                    }
                                                }

                                                if (!String.IsNullOrEmpty(postCode))
                                                {
                                                    if (!String.IsNullOrEmpty(deliveryAdd3))
                                                    {
                                                        deliveryAdd3 = deliveryAdd3.TrimEnd() + " " + postCode;
                                                    }
                                                    else
                                                    {
                                                        deliveryAdd3 = postCode;
                                                    }
                                                }

                                                if (!String.IsNullOrEmpty(country))
                                                {
                                                    if (!String.IsNullOrEmpty(deliveryAdd3))
                                                    {
                                                        deliveryAdd3 = deliveryAdd3.TrimEnd() + " " + country;
                                                    }
                                                    else
                                                    {
                                                        deliveryAdd3 = country;
                                                    }
                                                }
                                                deliveryAdd3 = checkIsNull(deliveryAdd3);
                                                cust2.deliveryAdd3 = deliveryAdd3;
                                                //break;
                                            }

                                            //Added Billing Address - WY-25.SEPT.2014
                                            isDefaultBillAdd = cust.addressbookList.addressbook[b].defaultBilling;
                                            if (isDefaultBillAdd == true)
                                            {
                                                cust2.billingAddressee = cust.addressbookList.addressbook[b].addressbookAddress.addressee;
                                                cust2.billingAdd = cust.addressbookList.addressbook[b].addressbookAddress.addr1;
                                                cust2.billingAdd2 = cust.addressbookList.addressbook[b].addressbookAddress.addr2;
                                                cust2.billingPostcode = cust.addressbookList.addressbook[b].addressbookAddress.zip;
                                                cust2.billingContactPerson = cust.addressbookList.addressbook[b].addressbookAddress.attention;
                                                cust2.billingPhone = cust.addressbookList.addressbook[b].addressbookAddress.addrPhone;

                                                billingCity = cust.addressbookList.addressbook[b].addressbookAddress.city;
                                                billingState = cust.addressbookList.addressbook[b].addressbookAddress.state;
                                                billingPostcode = cust.addressbookList.addressbook[b].addressbookAddress.zip;
                                                billingCountry = checkIsNull(cust.addressbookList.addressbook[b].addressbookAddress.country.ToString()).Replace("_", string.Empty).ToUpper();
                                                //billingAdd3 = billingCity + " " + billingState + " " + billingPostcode + " " + billingCountry;

                                                billingAdd3 = "";
                                                if (!String.IsNullOrEmpty(billingCity))
                                                {
                                                    billingAdd3 = billingCity;
                                                }

                                                if (!String.IsNullOrEmpty(billingState))
                                                {
                                                    if (!String.IsNullOrEmpty(billingAdd3))
                                                    {
                                                        billingAdd3 = billingAdd3.TrimEnd() + " " + billingState;
                                                    }
                                                    else
                                                    {
                                                        billingAdd3 = billingState;
                                                    }
                                                }

                                                if (!String.IsNullOrEmpty(billingPostcode))
                                                {
                                                    if (!String.IsNullOrEmpty(billingAdd3))
                                                    {
                                                        billingAdd3 = billingAdd3.TrimEnd() + " " + billingPostcode;
                                                    }
                                                    else
                                                    {
                                                        billingAdd3 = billingPostcode;
                                                    }
                                                }

                                                if (!String.IsNullOrEmpty(billingCountry))
                                                {
                                                    if (!String.IsNullOrEmpty(billingAdd3))
                                                    {
                                                        billingAdd3 = billingAdd3.TrimEnd() + " " + billingCountry;
                                                    }
                                                    else
                                                    {
                                                        billingAdd3 = billingCountry;
                                                    }
                                                }
                                                billingAdd3 = checkIsNull(billingAdd3);
                                                cust2.billingAdd3 = billingAdd3;
                                            }
                                        }
                                        cust2.country = salesTer;
                                    }
                                    listCust.Add(cust2);
                                }
                            }
                            else
                            {
                                cls_customer cust2 = new cls_customer();
                                cust2.custID = customerInternalID;
                                cust2.customerID = string.Empty;
                                cust2.addressee = string.Empty;
                                cust2.deliveryAdd = string.Empty;
                                cust2.deliveryAdd2 = string.Empty;
                                cust2.deliveryAdd3 = string.Empty;
                                cust2.postCode = string.Empty;
                                cust2.contactPerson = string.Empty;
                                cust2.phone = string.Empty;
                                cust2.billingAddressee = string.Empty;
                                cust2.billingAdd = string.Empty;
                                cust2.billingAdd2 = string.Empty;
                                cust2.billingPostcode = string.Empty;
                                cust2.billingContactPerson = string.Empty;
                                cust2.billingPhone = string.Empty;
                                cust2.billingAdd3 = string.Empty;
                                listCust.Add(cust2);
                            }
                        }
                    }
                    #endregion
                }
                catch (Exception ex)
                {
                    if (ex.Message.Contains("a session at a time") || ex.Message.Contains("Your connection has timed out"))
                    {
                        this.DataFromNetsuiteLog.Debug("LatestSalesOrders Logout Exception: " + ex.ToString());
                    }
                    else
                    {
                        this.DataFromNetsuiteLog.Error("LatestSalesOrders Logout Exception: " + ex.ToString());
                    }
                    isValidCust = false;
                }
            }
            else
            {
                this.DataFromNetsuiteLog.Fatal("LatestSalesOrders: Login Netsuite failed.");
                isValidCust = false;
            }

            if (isValidCust == true)
            {
                //Extend the transaction timeout - WY-02.SEPT.2014
                var option = new TransactionOptions
                {
                    IsolationLevel = IsolationLevel.RepeatableRead,
                    Timeout = TimeSpan.FromSeconds(2400)
                };

                //using (TransactionScope scope1 = new TransactionScope()) 
                using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    if (pffRecord != null && pffRecord.Count() > 0)
                    {
                        this.DataFromNetsuiteLog.Info("LatestSalesOrders: " + pffRecord.Count() + " records is retrieved.");
                        try
                        {
                            String rangeTo = convertDateToString(Convert.ToDateTime(r.rn_rangeTo));
                            String createdDate = convertDateToString(DateTime.Now);

                            for (int i = startRec; i < endRec; i++)
                            {
                                SalesOrder so = (SalesOrder)pffRecord[i];

                                //if ((so.status.ToUpper() == "PENDING BILLING") || (so.status.ToUpper() == "BILLED") || (so.status.ToUpper() == "CLOSED"))
                                //{
                                //    var doneSO1 = "update netsuite_newso set nt1_status='" + so.status.ToUpper() + "' where nt1_moNo_internalID = '" + so.internalId + "'";
                                //    this.DataFromNetsuiteLog.Debug("LatestSalesOrders: " + doneSO1);
                                //    entities.Database.ExecuteSqlCommand(doneSO1);
                                //}
                                //else
                                //{
                                //}

                                var deleteSO1 = "delete from netsuite_newso_test where nt1_moNo_internalID = '" + so.internalId + "' ";
                                this.DataFromNetsuiteLog.Debug("LatestSalesOrders: " + deleteSO1);
                                entities.Database.ExecuteSqlCommand(deleteSO1);

                                String moNo = so.tranId;
                                String moNoInternalID = so.internalId;
                                String memo = so.memo;
                                String ponumber = so.otherRefNum;
                                String discItemInternalID = string.Empty;
                                if (so.discountItem != null)
                                {
                                    discItemInternalID = so.discountItem.internalId;
                                }
                                #region Custom List Information - WY-05.FEB.2015
                                String customer = checkIsNull(listCust[i].customerID).Replace("'", "''");
                                String customerInternalID = so.entity.internalId;
                                String SEISmoNo = "";
                                String SEISmoNoInternalID = "";
                                String syncToWMS = "";
                                String subsidiary = so.subsidiary.name;
                                if (so.subsidiary.name.ToUpper().Equals("SCHOLASTIC EDUCATION INTERNATIONAL (SINGAPORE) PTE LTD"))
                                {
                                    subsidiary = "SEIS";
                                }
                                String term = checkRecordRefIsNull(so.terms);
                                this.DataFromNetsuiteLog.Debug("LatestSalesOrders: " + term + "SO NO : " + so.tranId);
                                if (!String.IsNullOrEmpty(term))
                                {
                                    term = SplitSalesOrderTerm(term);
                                }
                                String poDate = "0001-01-01";
                                String forwTo = string.Empty;
                                String forwLabel = string.Empty;
                                String forwAddressee = string.Empty;
                                String forwAttention = string.Empty;
                                String forwAdd1 = string.Empty;
                                String forwAdd2 = string.Empty;
                                String forwAdd3 = string.Empty;
                                String forwState = string.Empty;
                                String forwPostcode = string.Empty;
                                String forwCountry = string.Empty;
                                String forwCity = string.Empty;
                                String forwPhone = string.Empty;
                                String forwInternalID = string.Empty;

                                for (int custAtt = 0; custAtt < so.customFieldList.Count(); custAtt++)
                                {
                                    String customFieldStr = so.customFieldList[custAtt].ToString();
                                    switch (customFieldStr)
                                    {
                                        case "sde.comNetsuiteServices.StringCustomFieldRef":
                                            StringCustomFieldRef custom1 = (StringCustomFieldRef)so.customFieldList[custAtt];
                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SEISSALESORDERNUMBER_SCRIPTID))
                                            {
                                                SEISmoNo = custom1.value;
                                                SEISmoNoInternalID = custom1.internalId;
                                            }
                                            else
                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_LABEL_SCRIPTID))
                                                {
                                                    forwLabel = custom1.value;
                                                }
                                                else
                                                    if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ATTENTION_SCRIPTID))
                                                    {
                                                        forwAttention = custom1.value;
                                                    }
                                                    else
                                                        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ADDRESSEE_SCRIPTID))
                                                        {
                                                            forwAddressee = custom1.value;
                                                        }
                                                        else
                                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_PHONE_SCRIPTID))
                                                            {
                                                                forwPhone = custom1.value;
                                                            }
                                                            else
                                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ADDR1_SCRIPTID))
                                                                {
                                                                    forwAdd1 = custom1.value;
                                                                }
                                                                else
                                                                    if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ADDR2_SCRIPTID))
                                                                    {
                                                                        forwAdd2 = custom1.value;
                                                                    }
                                                                    else
                                                                        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ADDR3_SCRIPTID))
                                                                        {
                                                                            forwAdd3 = custom1.value;
                                                                        }
                                                                        else
                                                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_CITY_SCRIPTID))
                                                                            {
                                                                                forwCity = custom1.value;
                                                                            }
                                                                            else
                                                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_STATE_SCRIPTID))
                                                                                {
                                                                                    forwState = custom1.value;
                                                                                }
                                                                                else
                                                                                    if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_COUNTRY_SCRIPTID))
                                                                                    {
                                                                                        forwCountry = custom1.value;
                                                                                    }
                                            break;

                                        case "sde.comNetsuiteServices.SelectCustomFieldRef":
                                            SelectCustomFieldRef customSelect = (SelectCustomFieldRef)so.customFieldList[custAtt];
                                            if (customSelect.scriptId.Equals(@Resource.CUSTOMFIELD_SYNCTOWMS_SCRIPTID))
                                            {
                                                syncToWMS = customSelect.value.internalId;
                                            }
                                            else
                                                if (customSelect.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDERTO_SCRIPTID))
                                                {
                                                    forwTo = customSelect.value.name;
                                                    forwInternalID = customSelect.value.internalId;
                                                }
                                            break;
                                        case "sde.comNetsuiteServices.DateCustomFieldRef":
                                            DateCustomFieldRef customDate = (DateCustomFieldRef)so.customFieldList[custAtt];
                                            if (customDate.scriptId.Equals(@Resource.CUSTOMFIELD_PODATE_SCRIPTID))
                                            {
                                                poDate = convertDateToString(customDate.value);
                                            }
                                            break;
                                        case "sde.comNetsuiteServices.LongCustomFieldRef":
                                            LongCustomFieldRef customLong = (LongCustomFieldRef)so.customFieldList[custAtt];
                                            if (customLong.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_POSTCODE_SCRIPTID))
                                            {
                                                forwPostcode = Convert.ToString(customLong.value);
                                            }
                                            break;
                                    }
                                }
                                #endregion

                                for (int j = 0; j < so.itemList.item.Count(); j++)
                                {
                                    String moNoStatus = so.status.ToUpper();
                                    String itemTitle = SplitItemByISBN(so.itemList.item[j].item.name);
                                    Int32 itemLine = Convert.ToInt32(so.itemList.item[j].line);
                                    String itemInternalID = so.itemList.item[j].item.internalId;
                                    Double committedQty = so.itemList.item[j].quantityCommitted;
                                    Double fulfilledQty = so.itemList.item[j].quantityFulfilled;
                                    Double invoicedQty = so.itemList.item[j].quantityBilled;
                                    Double ordQty = so.itemList.item[j].quantity;
                                    Double tax = so.itemList.item[j].taxRate1;
                                    Double rate = 0;
                                    Double nt_discount = 0; //Get the Discount Total - WY-08.SEPT.2014
                                    String strDiscPercentage = string.Empty;//Get the Discount Total - WY-08.SEPT.2014
                                    if (so.itemList.item[j].rate == null)
                                    {
                                        rate = 0;
                                    }
                                    else
                                    {
                                        rate = Convert.ToDouble(so.itemList.item[j].rate.Replace("%", ""));
                                    }
                                    Double grossAmount = so.itemList.item[j].grossAmt; //Get the Discount Total - WY-08.SEPT.2014
                                    //Double amount = so.itemList.item[j].amount;  //Get the Discount Total - WY-08.SEPT.2014
                                    Double amount = 0;
                                    //String customer = checkIsNull(listCust[i].customerID).Replace("'", "''");//To get Customer ID - WY-22.SEPT.2014
                                    //String customerInternalID = so.entity.internalId;
                                    //String SEISmoNo = "";
                                    //String SEISmoNoInternalID = "";
                                    //String syncToWMS = "";
                                    //String subsidiary = so.subsidiary.name;
                                    //if (so.subsidiary.name.ToUpper().Equals("SCHOLASTIC EDUCATION INTERNATIONAL (SINGAPORE) PTE LTD"))
                                    //{
                                    //    subsidiary = "SEIS";
                                    //}
                                    //Add BasedPrice & RRP - WY-29.SEPT.2014
                                    Double basedPrice = 0;
                                    String priceLevel = so.itemList.item[j].price.name;
                                    String priceLevelInternalID = so.itemList.item[j].price.internalId;

                                    //for (int k = 0; k < so.customFieldList.Count(); k++)
                                    //{
                                    //    if (customerInternalID == @Resource.SEIS_CUSTOMER_MY_INTERNALID)//Only DropShip Customer will checking
                                    //    {
                                    //        if (so.customFieldList[k].ToString().Equals("sde.comNetsuiteServices.StringCustomFieldRef"))
                                    //        {
                                    //            StringCustomFieldRef custom1 = (StringCustomFieldRef)so.customFieldList[k];
                                    //            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SEISSALESORDERNUMBER_SCRIPTID))
                                    //            {
                                    //                SEISmoNo = custom1.value;
                                    //                SEISmoNoInternalID = custom1.internalId;
                                    //            }
                                    //        }
                                    //    }
                                    //    /*  Change filter when insert into netsuite_syncso - WY-25.AUG.2014     */ 
                                    //    if (so.customFieldList[k].ToString().Equals("sde.comNetsuiteServices.SelectCustomFieldRef"))
                                    //    {
                                    //        SelectCustomFieldRef custom1 = (SelectCustomFieldRef)so.customFieldList[k];
                                    //        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SYNCTOWMS_SCRIPTID))
                                    //        {
                                    //            syncToWMS = custom1.value.internalId;
                                    //        }
                                    //    }
                                    //}

                                    /*  Get the Discount Total - WY-08.SEPT.2014     */
                                    for (int discTol = 0; discTol < so.itemList.item[j].customFieldList.Count(); discTol++)
                                    {
                                        if (so.itemList.item[j].customFieldList[discTol].ToString().Equals("sde.comNetsuiteServices.DoubleCustomFieldRef"))
                                        {
                                            DoubleCustomFieldRef custom1 = (DoubleCustomFieldRef)so.itemList.item[j].customFieldList[discTol];
                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_DISCTOTAL_SCRIPTID))
                                            {
                                                amount = custom1.value;
                                            }
                                            //Add BasedPrice & RRP - WY-29.SEPT.2014
                                            else
                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_BASEDPRICE_SCRIPTID))
                                                {
                                                    basedPrice = custom1.value;
                                                }
                                        }
                                        else
                                            if (so.itemList.item[j].customFieldList[discTol].ToString().Equals("sde.comNetsuiteServices.StringCustomFieldRef"))
                                            {
                                                StringCustomFieldRef custom1 = (StringCustomFieldRef)so.itemList.item[j].customFieldList[discTol];
                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_DISCPERCENTAGE_SCRIPTID))
                                                {
                                                    strDiscPercentage = checkIsNull(custom1.value);
                                                    if ((strDiscPercentage == "") || (strDiscPercentage == "%"))
                                                    {
                                                        nt_discount = 0;
                                                    }
                                                    else
                                                    {
                                                        strDiscPercentage = strDiscPercentage.Replace('%', ' ');
                                                        strDiscPercentage = strDiscPercentage.Replace('-', ' ');
                                                        nt_discount = Convert.ToDouble(strDiscPercentage);
                                                    }
                                                }
                                            }
                                    }

                                    ////nt_discount = grossAmount - amount; //Get the Discount Total - WY-08.SEPT.2014 

                                    //String term = checkRecordRefIsNull(so.terms);
                                    //this.DataFromNetsuiteLog.Debug("LatestSalesOrders: " + term + "SO NO : " + so.tranId);
                                    //if (!String.IsNullOrEmpty(term))
                                    //{
                                    //    term = SplitSalesOrderTerm(term);
                                    //}

                                    var qItemIsbn = (from mi in entities.map_item
                                                     where mi.mi_item_internalID == itemInternalID
                                                     select mi.mi_item_isbn).FirstOrDefault();
                                    if (!String.IsNullOrEmpty(qItemIsbn))
                                    {
                                        itemTitle = qItemIsbn;
                                    }

                                    var insertSO1 = "insert into netsuite_newso_test (nt1_moNo,nt1_moNo_internalID,nt1_status,nt1_itemID,nt1_item_internalID,nt1_ordQty,nt1_committedQty,nt1_fulfilledQty,nt1_tax," +
                                        "nt1_rate,nt1_amount,nt1_customer,nt1_customer_internalID,nt1_SEIS_moNo,nt1_SEIS_moNo_internalID,nt1_subsidiary,nt1_createdDate,nt1_rangeTo,nt1_synctowms,nt1_discount," +
                                        "nt1_custID,nt1_addressee,nt1_deliveryAdd,nt1_deliveryAdd2,nt1_deliveryAdd3,nt1_postCode,nt1_contactPerson,nt1_phone,nt1_country, " +
                                        "nt1_billingAddressee,nt1_billingAdd,nt1_billingAdd2,nt1_billingAdd3,nt1_billingPostcode,nt1_billingContactPerson,nt1_billingPhone, " +
                                        "nt1_shipMethod,nt1_creditTerm,nt1_basedprice,nt1_pricelevel,nt1_memo,nt1_ponumber,nt1_itemLine,nt1_discountItem_internalID,nt1_podate,nt1_forwarderTo,nt1_forwarderLabel,nt1_forwarderAddressee," +
                                        "nt1_forwarderAdd1,nt1_forwarderAdd2,nt1_forwarderAdd3,nt1_forwarderAttention,nt1_forwarderState,nt1_forwarderPostcode,nt1_forwarderCity,nt1_forwarderCountry,nt1_forwarderPhone," +
                                        "nt1_forwarderInternalID,nt1_pricelevel_InternalID,nt1_invoiceQty) values (" +
                                        "'" + moNo + "','" + moNoInternalID + "','" + moNoStatus + "','" + itemTitle + "','" + itemInternalID + "','" + ordQty + "','" + committedQty + "','" + fulfilledQty + "','" + tax + "'," +
                                        "'" + rate + "','" + amount + "','" + customer + "','" + customerInternalID + "','" + SEISmoNo + "','" + SEISmoNoInternalID + "','" + subsidiary.ToUpper() + "'," +
                                        "'" + createdDate + "','" + rangeTo + "','" + syncToWMS + "','" + nt_discount + "','" + listCust[i].custID + "','" + checkIsNull(listCust[i].addressee).Replace("'", "''") + "'," +
                                        "'" + checkIsNull(listCust[i].deliveryAdd).Replace("'", "''") + "','" + checkIsNull(listCust[i].deliveryAdd2).Replace("'", "''") + "'," +
                                        "'" + checkIsNull(listCust[i].deliveryAdd3).Replace("'", "''") + "','" + checkIsNull(listCust[i].postCode).Replace("'", "''").Replace(" ", "") + "','" + checkIsNull(listCust[i].contactPerson).Replace("'", "''") + "'," +
                                        "'" + checkIsNull(listCust[i].phone).Replace("'", "''") + "','" + checkIsNull(listCust[i].country).Replace("'", "''") + "'," +
                                        "'" + checkIsNull(listCust[i].billingAddressee).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingAdd).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingAdd2).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingAdd3).Replace("'", "''") + "', " +
                                        "'" + checkIsNull(listCust[i].billingPostcode).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingContactPerson).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingPhone).Replace("'", "''") + "', " +
                                        "'" + checkRecordRefIsNull(so.shipMethod) + "','" + term + "','" + basedPrice + "','" + priceLevel + "','" + checkIsNull(memo).Replace("'", "''") + "','" + checkIsNull(ponumber).Replace("'", "''") + "', " +
                                        "'" + itemLine + "','" + discItemInternalID + "','" + checkIsNull(poDate).Replace("'", "''") + "','" + checkIsNull(forwTo).Replace("'", "''") + "','" + checkIsNull(forwLabel).Replace("'", "''") + "' " +
                                        ",'" + checkIsNull(forwAddressee).Replace("'", "''") + "','" + checkIsNull(forwAdd1).Replace("'", "''") + "','" + checkIsNull(forwAdd2).Replace("'", "''") + "' " +
                                        ",'" + checkIsNull(forwAdd3).Replace("'", "''") + "','" + checkIsNull(forwAttention).Replace("'", "''") + "','" + checkIsNull(forwState).Replace("'", "''") + "' " +
                                        ",'" + checkIsNull(forwPostcode).Replace("'", "''") + "','" + checkIsNull(forwCity).Replace("'", "''") + "','" + checkIsNull(forwCountry).Replace("'", "''") + "' " +
                                        ",'" + checkIsNull(forwPhone).Replace("'", "''") + "','" + checkIsNull(forwInternalID).Replace("'", "''") + "','" + checkIsNull(priceLevelInternalID).Replace("'", "''") + "','" + invoicedQty + "')";
                                    this.DataFromNetsuiteLog.Debug("LatestSalesOrders: " + insertSO1);
                                    entities.Database.ExecuteSqlCommand(insertSO1);
                                }

                                Int32 rowCount = i + 1;
                                String _refno = "NETSUITE.LATEST-SO.SELECT." + r.rn_rangeFrom + "-" + r.rn_rangeTo;
                                var insertTask = "insert into requestnetsuite_task (rnt_task, rnt_description, rnt_refNO, rnt_jobID, rnt_status, rnt_createdDate, " +
                                "rnt_seqNO, rnt_createdFromInternalID, rnt_nsInternalId, rnt_updatedDate) values ('SELECT', '" + r.rn_sche_transactionType + "', '" + _refno + "', '" + r.rn_jobID + "'," +
                                "'TRUE', '" + convertDateToString(DateTime.Now) + "', '" + rowCount + "','', '" + moNoInternalID + "', '" + convertDateToString(DateTime.Now) + "')";
                                this.DataFromNetsuiteLog.Debug("LatestSalesOrders: " + insertTask);
                                entities.Database.ExecuteSqlCommand(insertTask);
                            }

                            var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                                "where rn_jobID = '" + r.rn_jobID + "'";
                            this.DataFromNetsuiteLog.Debug("LatestSalesOrders: " + updateRequestNetsuite);
                            entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                            scope1.Complete();
                            status = true;
                        }
                        catch (Exception ex)
                        {
                            this.DataFromNetsuiteLog.Error("LatestSalesOrders Exception: " + ex.ToString());
                            status = false;
                        }
                    }
                    else
                    {
                        var updateRequestNetsuite = "update requestnetsuite set rn_status='NO-DATA', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                            "where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("LatestSalesOrders: " + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                        scope1.Complete();

                    }
                    ////scope1.Complete();
                }
            }
            return status;
        }
        //NS-LATEST SALES ORDER_1_40
        private Boolean LatestSalesOrders_SPLIT(sdeEntities entities, RequestNetsuiteEntity r)
        {
            this.DataFromNetsuiteLog.Info("LatestSalesOrders_SPLIT: Pulling sales orders ********");

            //TBA
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            DataCenterAwareNetSuiteService netsuiteService = new DataCenterAwareNetSuiteService(account);


            //WY-11.SEPT.2014
            List<cls_customer> listCust = new List<cls_customer>();
            Record[] customerRecord = null;
            Boolean isValidCust = true;

            Record[] pffRecord = null;
            Boolean status = false;
            /*
            Status netsuiteStatus = new Status();
            service.Timeout = 1000000000;
            service.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();
            appinfo.applicationId = @Resource.NETSUITE_LOGIN_APPLICATIONID;
            service.applicationInfo = appinfo;

            Passport passport = new Passport();
            passport.account = @Resource.NETSUITE_LOGIN_ACCOUNT;
            passport.email = @Resource.NETSUITE_LOGIN_EMAIL;

            RecordRef role = new RecordRef();
            role.internalId = @Resource.NETSUITE_LOGIN_ROLE_INTERNALID;

            passport.role = role;
            //kang get netsuite password from DB
            //passport.password = @Resource.NETSUITE_LOGIN_PASSWORD;
            passport.password = getNetsuitePassword(@Resource.NETSUITE_LOGIN_EMAIL);

            netsuiteStatus = service.login(passport).status;
            Boolean loginStatus = netsuiteStatus.isSuccess;
            */
            //TBA
            ItemSearchBasic basic = new ItemSearchBasic()
            {
                internalId = new SearchMultiSelectField()
                {
                    @operator = SearchMultiSelectFieldOperator.anyOf,
                    operatorSpecified = true,
                    searchValue = new RecordRef[] {
                    new RecordRef() {
                    internalId = "14943"
                         }
                    }
                }
            };


            netsuiteService.Timeout = 1000000000;
            netsuiteService.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();

            //  appinfo.applicationId = appID;
            netsuiteService.applicationInfo = appinfo;
            string loginEmail = "";
            loginEmail = @Resource.NETSUITE_LOGIN_EMAIL;
            tokenId = @Resource.ASIA_WEBSERVICE_TOKEN_ID;
            tokenSecret = @Resource.ASIA_WEBSERVICE_TOKEN_SECRET;


            Boolean loginStatus = false;
            try
            {
                Console.WriteLine("Success");
                netsuiteService.tokenPassport = createTokenPassport();
                SearchResult status1 = netsuiteService.search(basic);
                if (status1.status.isSuccess == true)
                {
                    loginStatus = true;
                }
                else
                {
                    loginStatus = false;
                }
            }
            catch (Exception ex)
            {
                loginStatus = false;
                this.DataFromNetsuiteLog.Fatal("SOFulfillmentUpdate: Login Netsuite failed. Exception : " + ex.ToString());

            }
            //

            int startRec = -1;
            int endRec = -1;
            if (loginStatus == true)
            {
                this.DataFromNetsuiteLog.Debug("LatestSalesOrders_SPLIT: Login Netsuite success.");
                this.DataFromNetsuiteLog.Info("LatestSalesOrders_SPLIT: Retrieving sales order every 2 hours from Netsuite.");

                //TBA
                netsuiteService.tokenPassport = createTokenPassport();
                AsyncResult pffResponse = netsuiteService.getAsyncResult(r.rn_jobID, 1);
                AsyncSearchResult salesOrderSearchResult = (AsyncSearchResult)pffResponse;
                pffRecord = salesOrderSearchResult.searchResult.recordList;

                if (r.rn_sche_transactionType == "NS-LATEST SALES ORDER_1_40")
                {
                    if (pffRecord.Count() >= 1)
                    {
                        startRec = 0;
                    }
                    if (pffRecord.Count() >= 40)
                    {
                        endRec = 40;
                    }
                    else
                    {
                        endRec = pffRecord.Count();
                    }
                }
                if (r.rn_sche_transactionType == "NS-LATEST SALES ORDER_41_80")
                {
                    if (pffRecord.Count() >= 41)
                    {
                        startRec = 40;
                    }
                    if (pffRecord.Count() >= 80)
                    {
                        endRec = 80;
                    }
                    else
                    {
                        endRec = pffRecord.Count();
                    }
                }
                if (r.rn_sche_transactionType == "NS-LATEST SALES ORDER_81_120")
                {
                    if (pffRecord.Count() >= 81)
                    {
                        startRec = 80;
                    }
                    if (pffRecord.Count() >= 120)
                    {
                        endRec = 120;
                    }
                    else
                    {
                        endRec = pffRecord.Count();
                    }
                }
                if (r.rn_sche_transactionType == "NS-LATEST SALES ORDER_121_160")
                {
                    if (pffRecord.Count() >= 121)
                    {
                        startRec = 120;
                    }
                    if (pffRecord.Count() >= 160)
                    {
                        endRec = 160;
                    }
                    else
                    {
                        endRec = pffRecord.Count();
                    }
                }
                if (r.rn_sche_transactionType == "NS-LATEST SALES ORDER_161_9999")
                {
                    if (pffRecord.Count() >= 161)
                    {
                        startRec = 160;
                    }
                    endRec = pffRecord.Count();
                }

                try
                {
                    /*
                    netsuiteStatus = (service.logout()).status;
                    if (netsuiteStatus.isSuccess == true)
                    {
                        this.DataFromNetsuiteLog.Debug("LatestSalesOrders_SPLIT: Logout Netsuite success.");
                    }
                    else
                    {
                        this.DataFromNetsuiteLog.Error("LatestSalesOrders_SPLIT: Logout Netsuite failed.");
                    }*/

                    //Move Code From SalesOrders - WY-11.SEPT.2014 
                    #region Customer Info
                    if ((pffRecord != null) && (pffRecord.Count() > 0) && (startRec >= 0))
                    {
                        if (startRec > 0)
                        {
                            for (int g = 0; g < startRec; g++)
                            {
                                cls_customer cust2 = new cls_customer();
                                cust2.custID = g.ToString();
                                cust2.customerID = string.Empty;
                                cust2.addressee = string.Empty;
                                cust2.deliveryAdd = string.Empty;
                                cust2.deliveryAdd2 = string.Empty;
                                cust2.deliveryAdd3 = string.Empty;
                                cust2.postCode = string.Empty;
                                cust2.contactPerson = string.Empty;
                                cust2.phone = string.Empty;
                                cust2.billingAddressee = string.Empty;
                                cust2.billingAdd = string.Empty;
                                cust2.billingAdd2 = string.Empty;
                                cust2.billingPostcode = string.Empty;
                                cust2.billingContactPerson = string.Empty;
                                cust2.billingPhone = string.Empty;
                                cust2.billingAdd3 = string.Empty;
                                listCust.Add(cust2);
                            }
                        }

                        for (int g = startRec; g < endRec; g++)
                        {
                            SalesOrder so = (SalesOrder)pffRecord[g];
                            String customerInternalID = so.entity.internalId;
                            String dropShipMYCustID = string.Empty; //If dropshipment will based on MY Sales Order Customer Info - WY-22.SEPT.2014

                            // DAVID
                            String SEISSONumber = null;
                            #region Custom Fields Looping
                            for (int i = 0; i < so.customFieldList.Count(); i++)
                            {
                                if (so.customFieldList[i].ToString().Equals("sde.comNetsuiteServices.StringCustomFieldRef"))
                                {
                                    StringCustomFieldRef custom1 = (StringCustomFieldRef)so.customFieldList[i];
                                    if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SEISSALESORDERNUMBER_SCRIPTID))
                                    {
                                        SEISSONumber = custom1.value;
                                        if (!String.IsNullOrEmpty(SEISSONumber))
                                        {
                                            var SEISInfo = (from q1 in entities.netsuite_newso_test
                                                            where q1.nt1_moNo == SEISSONumber
                                                            select new { q1.nt1_customer_internalID, q1.nt1_country }).FirstOrDefault();

                                            if ((SEISInfo != null) && (!String.IsNullOrEmpty(SEISInfo.nt1_customer_internalID)))
                                            {
                                                customerInternalID = SEISInfo.nt1_customer_internalID;

                                                //If dropshipment will based on MY Sales Order Customer Info - WY-22.SEPT.2014 
                                                switch (SEISInfo.nt1_country)
                                                {
                                                    case "SG":
                                                        dropShipMYCustID = @Resource.SEIS_CUSTOMER_MY; //P00892
                                                        break;
                                                    //TH DROPSHIP
                                                    case "TH":
                                                        dropShipMYCustID = @Resource.DROPSHIP_CUSTOMER_TH; //P01042
                                                        break;
                                                    default:
                                                        dropShipMYCustID = "";
                                                        break;
                                                }
                                            }
                                            else
                                            {
                                                customerInternalID = "";
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion
                            // DAVID

                            //Add checking for customerInternalId if empty then skip - WY-02.OCT.2014
                            if (!String.IsNullOrEmpty(customerInternalID))
                            {
                                SearchPreferences sp = new SearchPreferences();
                                sp.bodyFieldsOnly = false;
                                netsuiteService.searchPreferences = sp;
                                CustomerSearchAdvanced csa = new CustomerSearchAdvanced();
                                CustomerSearch cs = new CustomerSearch();
                                CustomerSearchBasic csb = new CustomerSearchBasic();

                                RecordRef[] refInternalID = new RecordRef[1];
                                RecordRef refEntity = new RecordRef();
                                refEntity.internalId = customerInternalID;
                                refInternalID[0] = refEntity;

                                SearchMultiSelectField csInternalID = new SearchMultiSelectField();
                                csInternalID.@operator = SearchMultiSelectFieldOperator.anyOf;
                                csInternalID.operatorSpecified = true;
                                csInternalID.searchValue = refInternalID;
                                csb.internalId = csInternalID;

                                cs.basic = csb;
                                csa.criteria = cs;
                                //login(@Resource.NETSUITE_LOGIN_EMAIL_PULL);
                                //TBA
                                netsuiteService.tokenPassport = createTokenPassport();
                                SearchResult sr = netsuiteService.search(csa);
                                // logout();
                                customerRecord = sr.recordList;

                                for (int i = 0; i < customerRecord.Count(); i++)
                                {
                                    Customer cust = (Customer)customerRecord[i];
                                    cls_customer cust2 = new cls_customer();
                                    String salesTer = null;

                                    for (int a = 0; a < cust.customFieldList.Count(); a++)
                                    {
                                        if (cust.customFieldList[a].ToString().Equals("sde.comNetsuiteServices.SelectCustomFieldRef"))
                                        {
                                            SelectCustomFieldRef custom1 = (SelectCustomFieldRef)cust.customFieldList[a];
                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SALESTERRITORY_SCRIPTID))
                                            {
                                                switch (custom1.value.internalId)
                                                {
                                                    case "1":
                                                        salesTer = "TH";
                                                        break;
                                                    case "16":
                                                        salesTer = "TH";
                                                        break;
                                                    case "8":
                                                        salesTer = "ID";
                                                        break;
                                                    case "14":
                                                        salesTer = "SG";
                                                        break;
                                                    case "10":
                                                        salesTer = "MY";
                                                        break;
                                                    default:
                                                        salesTer = "NA";
                                                        break;
                                                }
                                            }
                                        }
                                    }

                                    if (cust.addressbookList != null)
                                    {
                                        cust2.custID = customerInternalID;
                                        Int32 addBookCount = cust.addressbookList.addressbook.Count();

                                        //To get Customer ID - WY-22.SEPT.2014
                                        if (!String.IsNullOrEmpty(dropShipMYCustID))
                                        {
                                            cust2.customerID = dropShipMYCustID;
                                        }
                                        else
                                        {
                                            cust2.customerID = cust.entityId;
                                        }

                                        for (int b = 0; b < addBookCount; b++)
                                        {
                                            Boolean isDefaultShipAdd = false;
                                            Boolean isDefaultBillAdd = false;//Added Billing Address - WY-25.SEPT.2014
                                            String deliveryAdd3, billingAdd3 = string.Empty;//Change the Address3 - WY-17.SEPT.2014
                                            String city, billingCity = string.Empty;//Change the Address3 - WY-17.SEPT.2014
                                            String state, billingState = string.Empty;//Change the Address3 - WY-17.SEPT.2014
                                            String postCode, billingPostcode = string.Empty;//Change the Address3 - WY-17.SEPT.2014
                                            String country, billingCountry = string.Empty;//Change the Address3 - WY-17.SEPT.2014

                                            isDefaultShipAdd = cust.addressbookList.addressbook[b].defaultShipping;
                                            if (isDefaultShipAdd == true)
                                            {
                                                cust2.addressee = cust.addressbookList.addressbook[b].addressbookAddress.addressee;
                                                cust2.deliveryAdd = cust.addressbookList.addressbook[b].addressbookAddress.addr1;
                                                cust2.deliveryAdd2 = cust.addressbookList.addressbook[b].addressbookAddress.addr2;
                                                //cust2.deliveryAdd3 = cust.addressbookList.addressbook[b].addr3;
                                                cust2.postCode = cust.addressbookList.addressbook[b].addressbookAddress.zip;
                                                cust2.contactPerson = cust.addressbookList.addressbook[b].addressbookAddress.attention;
                                                cust2.phone = cust.addressbookList.addressbook[b].addressbookAddress.addrPhone;

                                                //Change the Address3 - WY-17.SEPT.2014
                                                city = cust.addressbookList.addressbook[b].addressbookAddress.city;
                                                state = cust.addressbookList.addressbook[b].addressbookAddress.state;
                                                postCode = cust.addressbookList.addressbook[b].addressbookAddress.zip;
                                                country = checkIsNull(cust.addressbookList.addressbook[b].addressbookAddress.country.ToString()).Replace("_", string.Empty).ToUpper();
                                                //deliveryAdd3 = city + " " + state + " " + postCode + " " + country;
                                                deliveryAdd3 = "";
                                                if (!String.IsNullOrEmpty(city))
                                                {
                                                    deliveryAdd3 = city;
                                                }

                                                if (!String.IsNullOrEmpty(state))
                                                {
                                                    if (!String.IsNullOrEmpty(deliveryAdd3))
                                                    {
                                                        deliveryAdd3 = deliveryAdd3.TrimEnd() + " " + state;
                                                    }
                                                    else
                                                    {
                                                        deliveryAdd3 = state;
                                                    }
                                                }

                                                if (!String.IsNullOrEmpty(postCode))
                                                {
                                                    if (!String.IsNullOrEmpty(deliveryAdd3))
                                                    {
                                                        deliveryAdd3 = deliveryAdd3.TrimEnd() + " " + postCode;
                                                    }
                                                    else
                                                    {
                                                        deliveryAdd3 = postCode;
                                                    }
                                                }

                                                if (!String.IsNullOrEmpty(country))
                                                {
                                                    if (!String.IsNullOrEmpty(deliveryAdd3))
                                                    {
                                                        deliveryAdd3 = deliveryAdd3.TrimEnd() + " " + country;
                                                    }
                                                    else
                                                    {
                                                        deliveryAdd3 = country;
                                                    }
                                                }
                                                deliveryAdd3 = checkIsNull(deliveryAdd3);
                                                cust2.deliveryAdd3 = deliveryAdd3;
                                                //break;
                                            }

                                            //Added Billing Address - WY-25.SEPT.2014
                                            isDefaultBillAdd = cust.addressbookList.addressbook[b].defaultBilling;
                                            if (isDefaultBillAdd == true)
                                            {
                                                cust2.billingAddressee = cust.addressbookList.addressbook[b].addressbookAddress.addressee;
                                                cust2.billingAdd = cust.addressbookList.addressbook[b].addressbookAddress.addr1;
                                                cust2.billingAdd2 = cust.addressbookList.addressbook[b].addressbookAddress.addr2;
                                                cust2.billingPostcode = cust.addressbookList.addressbook[b].addressbookAddress.zip;
                                                cust2.billingContactPerson = cust.addressbookList.addressbook[b].addressbookAddress.attention;
                                                cust2.billingPhone = cust.addressbookList.addressbook[b].addressbookAddress.addrPhone;

                                                billingCity = cust.addressbookList.addressbook[b].addressbookAddress.city;
                                                billingState = cust.addressbookList.addressbook[b].addressbookAddress.state;
                                                billingPostcode = cust.addressbookList.addressbook[b].addressbookAddress.zip;
                                                billingCountry = checkIsNull(cust.addressbookList.addressbook[b].addressbookAddress.country.ToString()).Replace("_", string.Empty).ToUpper();
                                                //billingAdd3 = billingCity + " " + billingState + " " + billingPostcode + " " + billingCountry;

                                                billingAdd3 = "";
                                                if (!String.IsNullOrEmpty(billingCity))
                                                {
                                                    billingAdd3 = billingCity;
                                                }

                                                if (!String.IsNullOrEmpty(billingState))
                                                {
                                                    if (!String.IsNullOrEmpty(billingAdd3))
                                                    {
                                                        billingAdd3 = billingAdd3.TrimEnd() + " " + billingState;
                                                    }
                                                    else
                                                    {
                                                        billingAdd3 = billingState;
                                                    }
                                                }

                                                if (!String.IsNullOrEmpty(billingPostcode))
                                                {
                                                    if (!String.IsNullOrEmpty(billingAdd3))
                                                    {
                                                        billingAdd3 = billingAdd3.TrimEnd() + " " + billingPostcode;
                                                    }
                                                    else
                                                    {
                                                        billingAdd3 = billingPostcode;
                                                    }
                                                }

                                                if (!String.IsNullOrEmpty(billingCountry))
                                                {
                                                    if (!String.IsNullOrEmpty(billingAdd3))
                                                    {
                                                        billingAdd3 = billingAdd3.TrimEnd() + " " + billingCountry;
                                                    }
                                                    else
                                                    {
                                                        billingAdd3 = billingCountry;
                                                    }
                                                }
                                                billingAdd3 = checkIsNull(billingAdd3);
                                                cust2.billingAdd3 = billingAdd3;
                                            }
                                        }
                                        cust2.country = salesTer;
                                    }
                                    listCust.Add(cust2);
                                }
                            }
                            else
                            {
                                cls_customer cust2 = new cls_customer();
                                cust2.custID = customerInternalID;
                                cust2.customerID = string.Empty;
                                cust2.addressee = string.Empty;
                                cust2.deliveryAdd = string.Empty;
                                cust2.deliveryAdd2 = string.Empty;
                                cust2.deliveryAdd3 = string.Empty;
                                cust2.postCode = string.Empty;
                                cust2.contactPerson = string.Empty;
                                cust2.phone = string.Empty;
                                cust2.billingAddressee = string.Empty;
                                cust2.billingAdd = string.Empty;
                                cust2.billingAdd2 = string.Empty;
                                cust2.billingPostcode = string.Empty;
                                cust2.billingContactPerson = string.Empty;
                                cust2.billingPhone = string.Empty;
                                cust2.billingAdd3 = string.Empty;
                                listCust.Add(cust2);
                            }
                        }
                    }
                    #endregion
                }
                catch (Exception ex)
                {
                    if (ex.Message.Contains("a session at a time") || ex.Message.Contains("Your connection has timed out"))
                    {
                        this.DataFromNetsuiteLog.Debug("LatestSalesOrders_SPLIT Logout Exception: " + ex.ToString());
                    }
                    else
                    {
                        this.DataFromNetsuiteLog.Error("LatestSalesOrders_SPLIT Logout Exception: " + ex.ToString());
                    }
                    isValidCust = false;
                }
            }
            else
            {
                this.DataFromNetsuiteLog.Fatal("LatestSalesOrders_SPLIT: Login Netsuite failed.");
                isValidCust = false;
            }

            if (isValidCust == true)
            {
                //Extend the transaction timeout - WY-02.SEPT.2014
                var option = new TransactionOptions
                {
                    IsolationLevel = IsolationLevel.RepeatableRead,
                    Timeout = TimeSpan.FromSeconds(2400)
                };

                //using (TransactionScope scope1 = new TransactionScope()) 
                using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    if ((pffRecord != null) && (pffRecord.Count() > 0) && (startRec >= 0))
                    {
                        this.DataFromNetsuiteLog.Info("LatestSalesOrders_SPLIT: " + pffRecord.Count() + " records is retrieved.");
                        try
                        {
                            String rangeTo = convertDateToString(Convert.ToDateTime(r.rn_rangeTo));
                            String createdDate = convertDateToString(DateTime.Now);

                            for (int i = startRec; i < endRec; i++)
                            {
                                SalesOrder so = (SalesOrder)pffRecord[i];

                                var deleteSO1 = "delete from netsuite_newso_test where nt1_moNo_internalID = '" + so.internalId + "' ";
                                this.DataFromNetsuiteLog.Debug("LatestSalesOrders_SPLIT: " + deleteSO1);
                                entities.Database.ExecuteSqlCommand(deleteSO1);

                                String moNo = so.tranId;
                                String moNoInternalID = so.internalId;
                                String memo = so.memo;
                                String ponumber = so.otherRefNum;
                                String discItemInternalID = string.Empty;
                                if (so.discountItem != null)
                                {
                                    discItemInternalID = so.discountItem.internalId;
                                }
                                #region Custom List Information - WY-05.FEB.2015
                                String customer = checkIsNull(listCust[i].customerID).Replace("'", "''");
                                String customerInternalID = so.entity.internalId;
                                String SEISmoNo = "";
                                String SEISmoNoInternalID = "";
                                String syncToWMS = "";
                                String subsidiary = so.subsidiary.name;
                                if (so.subsidiary.name.ToUpper().Equals("SCHOLASTIC EDUCATION INTERNATIONAL (SINGAPORE) PTE LTD"))
                                {
                                    subsidiary = "SEIS";
                                }
                                String term = checkRecordRefIsNull(so.terms);
                                this.DataFromNetsuiteLog.Debug("LatestSalesOrders_SPLIT: " + term + "SO NO : " + so.tranId);
                                if (!String.IsNullOrEmpty(term))
                                {
                                    term = SplitSalesOrderTerm(term);
                                }
                                String poDate = "0001-01-01";
                                String forwTo = string.Empty;
                                String forwLabel = string.Empty;
                                String forwAddressee = string.Empty;
                                String forwAttention = string.Empty;
                                String forwAdd1 = string.Empty;
                                String forwAdd2 = string.Empty;
                                String forwAdd3 = string.Empty;
                                String forwState = string.Empty;
                                String forwPostcode = string.Empty;
                                String forwCountry = string.Empty;
                                String forwCity = string.Empty;
                                String forwPhone = string.Empty;
                                String forwInternalID = string.Empty;

                                for (int custAtt = 0; custAtt < so.customFieldList.Count(); custAtt++)
                                {
                                    String customFieldStr = so.customFieldList[custAtt].ToString();
                                    switch (customFieldStr)
                                    {
                                        case "sde.comNetsuiteServices.StringCustomFieldRef":
                                            StringCustomFieldRef custom1 = (StringCustomFieldRef)so.customFieldList[custAtt];
                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SEISSALESORDERNUMBER_SCRIPTID))
                                            {
                                                SEISmoNo = custom1.value;
                                                SEISmoNoInternalID = custom1.internalId;
                                            }
                                            else
                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_LABEL_SCRIPTID))
                                                {
                                                    forwLabel = custom1.value;
                                                }
                                                else
                                                    if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ATTENTION_SCRIPTID))
                                                    {
                                                        forwAttention = custom1.value;
                                                    }
                                                    else
                                                        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ADDRESSEE_SCRIPTID))
                                                        {
                                                            forwAddressee = custom1.value;
                                                        }
                                                        else
                                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_PHONE_SCRIPTID))
                                                            {
                                                                forwPhone = custom1.value;
                                                            }
                                                            else
                                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ADDR1_SCRIPTID))
                                                                {
                                                                    forwAdd1 = custom1.value;
                                                                }
                                                                else
                                                                    if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ADDR2_SCRIPTID))
                                                                    {
                                                                        forwAdd2 = custom1.value;
                                                                    }
                                                                    else
                                                                        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ADDR3_SCRIPTID))
                                                                        {
                                                                            forwAdd3 = custom1.value;
                                                                        }
                                                                        else
                                                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_CITY_SCRIPTID))
                                                                            {
                                                                                forwCity = custom1.value;
                                                                            }
                                                                            else
                                                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_STATE_SCRIPTID))
                                                                                {
                                                                                    forwState = custom1.value;
                                                                                }
                                                                                else
                                                                                    if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_COUNTRY_SCRIPTID))
                                                                                    {
                                                                                        forwCountry = custom1.value;
                                                                                    }
                                            break;

                                        case "sde.comNetsuiteServices.SelectCustomFieldRef":
                                            SelectCustomFieldRef customSelect = (SelectCustomFieldRef)so.customFieldList[custAtt];
                                            if (customSelect.scriptId.Equals(@Resource.CUSTOMFIELD_SYNCTOWMS_SCRIPTID))
                                            {
                                                syncToWMS = customSelect.value.internalId;
                                            }
                                            else
                                                if (customSelect.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDERTO_SCRIPTID))
                                                {
                                                    forwTo = customSelect.value.name;
                                                    forwInternalID = customSelect.value.internalId;
                                                }
                                            break;
                                        case "sde.comNetsuiteServices.DateCustomFieldRef":
                                            DateCustomFieldRef customDate = (DateCustomFieldRef)so.customFieldList[custAtt];
                                            if (customDate.scriptId.Equals(@Resource.CUSTOMFIELD_PODATE_SCRIPTID))
                                            {
                                                poDate = convertDateToString(customDate.value);
                                            }
                                            break;
                                        case "sde.comNetsuiteServices.LongCustomFieldRef":
                                            LongCustomFieldRef customLong = (LongCustomFieldRef)so.customFieldList[custAtt];
                                            if (customLong.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_POSTCODE_SCRIPTID))
                                            {
                                                forwPostcode = Convert.ToString(customLong.value);
                                            }
                                            break;
                                    }
                                }
                                #endregion

                                for (int j = 0; j < so.itemList.item.Count(); j++)
                                {
                                    String moNoStatus = so.status.ToUpper();
                                    String itemTitle = SplitItemByISBN(so.itemList.item[j].item.name);
                                    Int32 itemLine = Convert.ToInt32(so.itemList.item[j].line);
                                    String itemInternalID = so.itemList.item[j].item.internalId;
                                    Double committedQty = so.itemList.item[j].quantityCommitted;
                                    Double fulfilledQty = so.itemList.item[j].quantityFulfilled;
                                    Double ordQty = so.itemList.item[j].quantity;
                                    Double tax = so.itemList.item[j].taxRate1;
                                    Double rate = 0;
                                    Double nt_discount = 0; //Get the Discount Total - WY-08.SEPT.2014
                                    String strDiscPercentage = string.Empty;//Get the Discount Total - WY-08.SEPT.2014
                                    if (so.itemList.item[j].rate == null)
                                    {
                                        rate = 0;
                                    }
                                    else
                                    {
                                        rate = Convert.ToDouble(so.itemList.item[j].rate.Replace("%", ""));
                                    }
                                    Double grossAmount = so.itemList.item[j].grossAmt; //Get the Discount Total - WY-08.SEPT.2014
                                    //Double amount = so.itemList.item[j].amount;  //Get the Discount Total - WY-08.SEPT.2014
                                    Double amount = 0;
                                    //String customer = checkIsNull(listCust[i].customerID).Replace("'", "''");//To get Customer ID - WY-22.SEPT.2014
                                    //String customerInternalID = so.entity.internalId;
                                    //String SEISmoNo = "";
                                    //String SEISmoNoInternalID = "";
                                    //String syncToWMS = "";
                                    //String subsidiary = so.subsidiary.name;
                                    //if (so.subsidiary.name.ToUpper().Equals("SCHOLASTIC EDUCATION INTERNATIONAL (SINGAPORE) PTE LTD"))
                                    //{
                                    //    subsidiary = "SEIS";
                                    //}
                                    //Add BasedPrice & RRP - WY-29.SEPT.2014
                                    Double basedPrice = 0;
                                    String priceLevel = so.itemList.item[j].price.name;
                                    String priceLevelInternalID = so.itemList.item[j].price.internalId;

                                    //for (int k = 0; k < so.customFieldList.Count(); k++)
                                    //{
                                    //    if (customerInternalID == @Resource.SEIS_CUSTOMER_MY_INTERNALID)//Only DropShip Customer will checking
                                    //    {
                                    //        if (so.customFieldList[k].ToString().Equals("sde.comNetsuiteServices.StringCustomFieldRef"))
                                    //        {
                                    //            StringCustomFieldRef custom1 = (StringCustomFieldRef)so.customFieldList[k];
                                    //            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SEISSALESORDERNUMBER_SCRIPTID))
                                    //            {
                                    //                SEISmoNo = custom1.value;
                                    //                SEISmoNoInternalID = custom1.internalId;
                                    //            }
                                    //        }
                                    //    }
                                    //    /*  Change filter when insert into netsuite_syncso - WY-25.AUG.2014     */ 
                                    //    if (so.customFieldList[k].ToString().Equals("sde.comNetsuiteServices.SelectCustomFieldRef"))
                                    //    {
                                    //        SelectCustomFieldRef custom1 = (SelectCustomFieldRef)so.customFieldList[k];
                                    //        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SYNCTOWMS_SCRIPTID))
                                    //        {
                                    //            syncToWMS = custom1.value.internalId;
                                    //        }
                                    //    }
                                    //}

                                    /*  Get the Discount Total - WY-08.SEPT.2014     */
                                    for (int discTol = 0; discTol < so.itemList.item[j].customFieldList.Count(); discTol++)
                                    {
                                        //Added #1028 -begin
                                        if (so.itemList.item[j].customFieldList[discTol].internalId.ToString().Equals(@Resource.CUSTOMFIELD_TRANS_ISBN_INTERNALID))
                                        {
                                            SelectCustomFieldRef multiRef = (SelectCustomFieldRef)so.itemList.item[j].customFieldList[discTol];
                                            if (!String.IsNullOrEmpty(multiRef.value.name))
                                            {
                                                itemTitle = multiRef.value.name;
                                            }
                                        }
                                        //Added #1028 -end

                                        if (so.itemList.item[j].customFieldList[discTol].ToString().Equals("sde.comNetsuiteServices.DoubleCustomFieldRef"))
                                        {
                                            DoubleCustomFieldRef custom1 = (DoubleCustomFieldRef)so.itemList.item[j].customFieldList[discTol];
                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_DISCTOTAL_SCRIPTID))
                                            {
                                                amount = custom1.value;
                                            }
                                            //Add BasedPrice & RRP - WY-29.SEPT.2014
                                            else
                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_BASEDPRICE_SCRIPTID))
                                                {
                                                    basedPrice = custom1.value;
                                                }
                                        }
                                        else
                                            if (so.itemList.item[j].customFieldList[discTol].ToString().Equals("sde.comNetsuiteServices.StringCustomFieldRef"))
                                            {
                                                StringCustomFieldRef custom1 = (StringCustomFieldRef)so.itemList.item[j].customFieldList[discTol];
                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_DISCPERCENTAGE_SCRIPTID))
                                                {
                                                    strDiscPercentage = checkIsNull(custom1.value);
                                                    if ((strDiscPercentage == "") || (strDiscPercentage == "%"))
                                                    {
                                                        nt_discount = 0;
                                                    }
                                                    else
                                                    {
                                                        strDiscPercentage = strDiscPercentage.Replace('%', ' ');
                                                        strDiscPercentage = strDiscPercentage.Replace('-', ' ');
                                                        nt_discount = Convert.ToDouble(strDiscPercentage);
                                                    }
                                                }
                                            }
                                    }

                                    ////nt_discount = grossAmount - amount; //Get the Discount Total - WY-08.SEPT.2014 

                                    //String term = checkRecordRefIsNull(so.terms);
                                    //this.DataFromNetsuiteLog.Debug("LatestSalesOrders: " + term + "SO NO : " + so.tranId);
                                    //if (!String.IsNullOrEmpty(term))
                                    //{
                                    //    term = SplitSalesOrderTerm(term);
                                    //}

                                    var qItemIsbn = (from mi in entities.map_item
                                                     where mi.mi_item_internalID == itemInternalID
                                                     select mi.mi_item_isbn).FirstOrDefault();
                                    if (!String.IsNullOrEmpty(qItemIsbn))
                                    {
                                        itemTitle = qItemIsbn;
                                    }

                                    var insertSO1 = "insert into netsuite_newso_test (nt1_moNo,nt1_moNo_internalID,nt1_status,nt1_itemID,nt1_item_internalID,nt1_ordQty,nt1_committedQty,nt1_fulfilledQty,nt1_tax," +
                                        "nt1_rate,nt1_amount,nt1_customer,nt1_customer_internalID,nt1_SEIS_moNo,nt1_SEIS_moNo_internalID,nt1_subsidiary,nt1_createdDate,nt1_rangeTo,nt1_synctowms,nt1_discount," +
                                        "nt1_custID,nt1_addressee,nt1_deliveryAdd,nt1_deliveryAdd2,nt1_deliveryAdd3,nt1_postCode,nt1_contactPerson,nt1_phone,nt1_country, " +
                                        "nt1_billingAddressee,nt1_billingAdd,nt1_billingAdd2,nt1_billingAdd3,nt1_billingPostcode,nt1_billingContactPerson,nt1_billingPhone, " +
                                        "nt1_shipMethod,nt1_creditTerm,nt1_basedprice,nt1_pricelevel,nt1_memo,nt1_ponumber,nt1_itemLine,nt1_discountItem_internalID,nt1_podate,nt1_forwarderTo,nt1_forwarderLabel,nt1_forwarderAddressee," +
                                        "nt1_forwarderAdd1,nt1_forwarderAdd2,nt1_forwarderAdd3,nt1_forwarderAttention,nt1_forwarderState,nt1_forwarderPostcode,nt1_forwarderCity,nt1_forwarderCountry,nt1_forwarderPhone," +
                                        "nt1_forwarderInternalID,nt1_pricelevel_InternalID) values (" +
                                        "'" + moNo + "','" + moNoInternalID + "','" + moNoStatus + "','" + itemTitle + "','" + itemInternalID + "','" + ordQty + "','" + committedQty + "','" + fulfilledQty + "','" + tax + "'," +
                                        "'" + rate + "','" + amount + "','" + customer + "','" + customerInternalID + "','" + SEISmoNo + "','" + SEISmoNoInternalID + "','" + subsidiary.ToUpper() + "'," +
                                        "'" + createdDate + "','" + rangeTo + "','" + syncToWMS + "','" + nt_discount + "','" + listCust[i].custID + "','" + checkIsNull(listCust[i].addressee).Replace("'", "''") + "'," +
                                        "'" + checkIsNull(listCust[i].deliveryAdd).Replace("'", "''") + "','" + checkIsNull(listCust[i].deliveryAdd2).Replace("'", "''") + "'," +
                                        "'" + checkIsNull(listCust[i].deliveryAdd3).Replace("'", "''") + "','" + checkIsNull(listCust[i].postCode).Replace("'", "''").Replace(" ", "") + "','" + checkIsNull(listCust[i].contactPerson).Replace("'", "''") + "'," +
                                        "'" + checkIsNull(listCust[i].phone).Replace("'", "''") + "','" + checkIsNull(listCust[i].country).Replace("'", "''") + "'," +
                                        "'" + checkIsNull(listCust[i].billingAddressee).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingAdd).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingAdd2).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingAdd3).Replace("'", "''") + "', " +
                                        "'" + checkIsNull(listCust[i].billingPostcode).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingContactPerson).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingPhone).Replace("'", "''") + "', " +
                                        "'" + checkRecordRefIsNull(so.shipMethod) + "','" + term + "','" + basedPrice + "','" + priceLevel + "','" + checkIsNull(memo).Replace("'", "''") + "','" + checkIsNull(ponumber).Replace("'", "''") + "', " +
                                        "'" + itemLine + "','" + discItemInternalID + "','" + checkIsNull(poDate).Replace("'", "''") + "','" + checkIsNull(forwTo).Replace("'", "''") + "','" + checkIsNull(forwLabel).Replace("'", "''") + "' " +
                                        ",'" + checkIsNull(forwAddressee).Replace("'", "''") + "','" + checkIsNull(forwAdd1).Replace("'", "''") + "','" + checkIsNull(forwAdd2).Replace("'", "''") + "' " +
                                        ",'" + checkIsNull(forwAdd3).Replace("'", "''") + "','" + checkIsNull(forwAttention).Replace("'", "''") + "','" + checkIsNull(forwState).Replace("'", "''") + "' " +
                                        ",'" + checkIsNull(forwPostcode).Replace("'", "''") + "','" + checkIsNull(forwCity).Replace("'", "''") + "','" + checkIsNull(forwCountry).Replace("'", "''") + "' " +
                                        ",'" + checkIsNull(forwPhone).Replace("'", "''") + "','" + checkIsNull(forwInternalID).Replace("'", "''") + "','" + checkIsNull(priceLevelInternalID).Replace("'", "''") + "')";
                                    this.DataFromNetsuiteLog.Debug("LatestSalesOrders_SPLIT: " + insertSO1);
                                    entities.Database.ExecuteSqlCommand(insertSO1);
                                }

                                Int32 rowCount = i + 1;
                                String _refno = "NETSUITE.LATEST-SO.SELECT." + r.rn_rangeFrom + "-" + r.rn_rangeTo;
                                var insertTask = "insert into requestnetsuite_task (rnt_task, rnt_description, rnt_refNO, rnt_jobID, rnt_status, rnt_createdDate, " +
                                "rnt_seqNO, rnt_createdFromInternalID, rnt_nsInternalId, rnt_updatedDate) values ('SELECT', '" + r.rn_sche_transactionType + "', '" + _refno + "', '" + r.rn_jobID + "'," +
                                "'TRUE', '" + convertDateToString(DateTime.Now) + "', '" + rowCount + "','', '" + moNoInternalID + "', '" + convertDateToString(DateTime.Now) + "')";
                                this.DataFromNetsuiteLog.Debug("LatestSalesOrders_SPLIT: " + insertTask);
                                entities.Database.ExecuteSqlCommand(insertTask);
                            }

                            var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                                "where rn_jobID = '" + r.rn_jobID + "'";
                            this.DataFromNetsuiteLog.Debug("LatestSalesOrders_SPLIT: " + updateRequestNetsuite);
                            entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                            scope1.Complete();
                            status = true;
                        }
                        catch (Exception ex)
                        {
                            this.DataFromNetsuiteLog.Error("LatestSalesOrders_SPLIT Exception: " + ex.ToString());
                            status = false;
                        }
                    }
                    else
                    {
                        var updateRequestNetsuite = "update requestnetsuite set rn_status='NO-DATA', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                            "where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("LatestSalesOrders_SPLIT: " + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                        scope1.Complete();

                    }
                    ////scope1.Complete();
                }
            }
            return status;
        }
        //NS-LATEST SALES ORDER 2 - To handle back order case with no update last modified date - WY-30.SEPT.2014
        private Boolean LatestSalesOrders2(sdeEntities entities, RequestNetsuiteEntity r)
        {
            this.DataFromNetsuiteLog.Info("LatestSalesOrders2: Pulling sales orders ********");
            //TBA
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            DataCenterAwareNetSuiteService netsuiteService = new DataCenterAwareNetSuiteService(account);

            List<cls_customer> listCust = new List<cls_customer>();
            List<cls_soitems> listSoItems = new List<cls_soitems>();
            Record[] customerRecord = null;
            Boolean isValidCust = true;

            Record[] pffRecord = null;
            Boolean status = false;

            /*
            Status netsuiteStatus = new Status();
            service.Timeout = 1000000000;
            service.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();
            appinfo.applicationId = @Resource.NETSUITE_LOGIN_APPLICATIONID;
            service.applicationInfo = appinfo;

            Passport passport = new Passport();
            passport.account = @Resource.NETSUITE_LOGIN_ACCOUNT;
            passport.email = @Resource.NETSUITE_LOGIN_EMAIL_PULL;

            RecordRef role = new RecordRef();
            role.internalId = @Resource.NETSUITE_LOGIN_ROLE_INTERNALID;

            passport.role = role;
            //kang get netsuite password from DB
            //passport.password = @Resource.NETSUITE_LOGIN_PASSWORD;
            passport.password = getNetsuitePassword(@Resource.NETSUITE_LOGIN_EMAIL_PULL);

            netsuiteStatus = service.login(passport).status;
            Boolean loginStatus = netsuiteStatus.isSuccess;*/
            //TBA
            ItemSearchBasic basic = new ItemSearchBasic()
            {
                internalId = new SearchMultiSelectField()
                {
                    @operator = SearchMultiSelectFieldOperator.anyOf,
                    operatorSpecified = true,
                    searchValue = new RecordRef[] {
                    new RecordRef() {
                    internalId = "14943"
                         }
                    }
                }
            };
            netsuiteService.Timeout = 1000000000;
            netsuiteService.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();

            //  appinfo.applicationId = appID;
            netsuiteService.applicationInfo = appinfo;
            string loginEmail = "";
            loginEmail = @Resource.NETSUITE_LOGIN_EMAIL_PULL;
            tokenId = @Resource.ASIA_WEBSERVICE_4_TOKEN_ID;
            tokenSecret = @Resource.ASIA_WEBSERVICE_4_TOKEN_SECRET;


            Boolean loginStatus = false;
            try
            {
                Console.WriteLine("Success");
                netsuiteService.tokenPassport = createTokenPassport();
                SearchResult status1 = netsuiteService.search(basic);
                if (status1.status.isSuccess == true)
                {
                    loginStatus = true;
                }
                else
                {
                    loginStatus = false;
                }
            }
            catch (Exception ex)
            {
                loginStatus = false;
                this.DataFromNetsuiteLog.Fatal("SOFulfillmentUpdate: Login Netsuite failed. Exception : " + ex.ToString());

            }
            //
            if (loginStatus == true)
            {
                this.DataFromNetsuiteLog.Debug("LatestSalesOrders2: Login Netsuite success.");
                this.DataFromNetsuiteLog.Info("LatestSalesOrders2: Retrieving sales order every 2 hours from Netsuite.");

                //TBA
                netsuiteService.tokenPassport = createTokenPassport();
                AsyncResult pffResponse = netsuiteService.getAsyncResult(r.rn_jobID, 1);

                AsyncSearchResult salesOrderSearchResult = (AsyncSearchResult)pffResponse;
                pffRecord = salesOrderSearchResult.searchResult.recordList;

                try
                {
                    //netsuiteStatus = (service.logout()).status;
                    //if (netsuiteStatus.isSuccess == true)
                    //{
                    //    this.DataFromNetsuiteLog.Debug("LatestSalesOrders2: Logout Netsuite success.");
                    //}
                    //else
                    //{
                    //    this.DataFromNetsuiteLog.Error("LatestSalesOrders2: Logout Netsuite failed.");
                    //}

                    #region Customer Info
                    if (pffRecord != null && pffRecord.Count() > 0)
                    {
                        for (int g = 0; g < pffRecord.Count(); g++)
                        {
                            cls_soitems soitems = new cls_soitems();
                            SalesOrder so = (SalesOrder)pffRecord[g];
                            String customerInternalID = so.entity.internalId;
                            String dropShipMYCustID = string.Empty; //If dropshipment will based on MY Sales Order Customer Info 
                            Double committedQty = 0;
                            String SEISSONumber = null;
                            #region Custom Fields Looping
                            for (int i = 0; i < so.customFieldList.Count(); i++)
                            {
                                if (so.customFieldList[i].ToString().Equals("sde.comNetsuiteServices.StringCustomFieldRef"))
                                {
                                    StringCustomFieldRef custom1 = (StringCustomFieldRef)so.customFieldList[i];
                                    if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SEISSALESORDERNUMBER_SCRIPTID))
                                    {
                                        SEISSONumber = custom1.value;
                                        if (!String.IsNullOrEmpty(SEISSONumber))
                                        {
                                            var SEISInfo = (from q1 in entities.netsuite_newso
                                                            where q1.nt1_moNo == SEISSONumber
                                                            select new { q1.nt1_customer_internalID, q1.nt1_country, q1.nt1_businessChannel_internalID }).FirstOrDefault();

                                            if (!String.IsNullOrEmpty(SEISInfo.nt1_customer_internalID))
                                            {
                                                customerInternalID = SEISInfo.nt1_customer_internalID;

                                                //If dropshipment will based on MY Sales Order Customer Info - WY-22.SEPT.2014 
                                                switch (SEISInfo.nt1_country)
                                                {
                                                    case "SG":
                                                        dropShipMYCustID = @Resource.SEIS_CUSTOMER_MY; //P00892
                                                        break;
                                                    //TH DROPSHIP
                                                    case "TH":
                                                        dropShipMYCustID = @Resource.DROPSHIP_CUSTOMER_TH; //P01042
                                                        break;
                                                    default:
                                                        dropShipMYCustID = "";
                                                        break;
                                                }
                                                if (SEISInfo.nt1_country == "SG" && SEISInfo.nt1_businessChannel_internalID == @Resource.LOB_EDUCATIONGENERAL_INTERNALID)
                                                {
                                                    dropShipMYCustID = @Resource.SEIS_CUSTOMER_MY_EDUGENERAL;
                                                }
                                                //Added by Brash Developer on 21-Apr-2021 Start
                                                else if (SEISInfo.nt1_country == "SG" && SEISInfo.nt1_businessChannel_internalID == @Resource.LOB_ONLINESTORE_INTERNALID)
                                                {
                                                    dropShipMYCustID = @Resource.SEIS_CUSTOMER_MY_ONLINESTORE;
                                                }
                                                else if (SEISInfo.nt1_country == "TH" && SEISInfo.nt1_businessChannel_internalID == @Resource.LOB_ONLINESTORE_INTERNALID)
                                                {
                                                    dropShipMYCustID = @Resource.DROPSHIP_CUSTOMER_TH_ONLINESTORE;
                                                }

                                                //End
                                            }
                                            else
                                            {
                                                customerInternalID = "";
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion

                            for (int j = 0; j < so.itemList.item.Count(); j++)
                            {
                                committedQty = committedQty + so.itemList.item[j].quantityCommitted;
                            }
                            soitems.soInternalID = so.internalId;
                            soitems.tolCommittedQty = committedQty;
                            listSoItems.Add(soitems);

                            if ((committedQty > 0) && (!String.IsNullOrEmpty(customerInternalID)))
                            {
                                SearchPreferences sp = new SearchPreferences();
                                sp.bodyFieldsOnly = false;
                                netsuiteService.searchPreferences = sp;
                                CustomerSearchAdvanced csa = new CustomerSearchAdvanced();
                                CustomerSearch cs = new CustomerSearch();
                                CustomerSearchBasic csb = new CustomerSearchBasic();

                                RecordRef[] refInternalID = new RecordRef[1];
                                RecordRef refEntity = new RecordRef();
                                refEntity.internalId = customerInternalID;
                                refInternalID[0] = refEntity;

                                SearchMultiSelectField csInternalID = new SearchMultiSelectField();
                                csInternalID.@operator = SearchMultiSelectFieldOperator.anyOf;
                                csInternalID.operatorSpecified = true;
                                csInternalID.searchValue = refInternalID;
                                csb.internalId = csInternalID;

                                cs.basic = csb;
                                csa.criteria = cs;
                                //login(@Resource.NETSUITE_LOGIN_EMAIL_PULL);
                                //TBA
                                netsuiteService.tokenPassport = createTokenPassport();
                                SearchResult sr = netsuiteService.search(csa);
                                //logout();
                                customerRecord = sr.recordList;

                                for (int i = 0; i < customerRecord.Count(); i++)
                                {
                                    Customer cust = (Customer)customerRecord[i];
                                    cls_customer cust2 = new cls_customer();
                                    String salesTer = null;

                                    for (int a = 0; a < cust.customFieldList.Count(); a++)
                                    {
                                        if (cust.customFieldList[a].ToString().Equals("sde.comNetsuiteServices.SelectCustomFieldRef"))
                                        {
                                            SelectCustomFieldRef custom1 = (SelectCustomFieldRef)cust.customFieldList[a];
                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SALESTERRITORY_SCRIPTID))
                                            {
                                                switch (custom1.value.internalId)
                                                {
                                                    case "1":
                                                        salesTer = "TH";
                                                        break;
                                                    case "16":
                                                        salesTer = "TH";
                                                        break;
                                                    case "8":
                                                        salesTer = "ID";
                                                        break;
                                                    case "14":
                                                        salesTer = "SG";
                                                        break;
                                                    case "10":
                                                        salesTer = "MY";
                                                        break;
                                                    default:
                                                        salesTer = "NA";
                                                        break;
                                                }
                                            }
                                        }
                                    }

                                    if (cust.addressbookList != null)
                                    {
                                        cust2.custID = customerInternalID;
                                        Int32 addBookCount = cust.addressbookList.addressbook.Count();

                                        //To get Customer ID  
                                        if (!String.IsNullOrEmpty(dropShipMYCustID))
                                        {
                                            cust2.customerID = dropShipMYCustID;
                                        }
                                        else
                                        {
                                            cust2.customerID = cust.entityId;
                                        }

                                        for (int b = 0; b < addBookCount; b++)
                                        {
                                            Boolean isDefaultShipAdd = false;
                                            Boolean isDefaultBillAdd = false;
                                            String deliveryAdd3, billingAdd3 = string.Empty;
                                            String city, billingCity = string.Empty;
                                            String state, billingState = string.Empty;
                                            String postCode, billingPostcode = string.Empty;
                                            String country, billingCountry = string.Empty;

                                            isDefaultShipAdd = cust.addressbookList.addressbook[b].defaultShipping;
                                            if (isDefaultShipAdd == true)
                                            {
                                                cust2.addressee = cust.addressbookList.addressbook[b].addressbookAddress.addressee;
                                                cust2.deliveryAdd = cust.addressbookList.addressbook[b].addressbookAddress.addr1;
                                                cust2.deliveryAdd2 = cust.addressbookList.addressbook[b].addressbookAddress.addr2;
                                                cust2.postCode = cust.addressbookList.addressbook[b].addressbookAddress.zip;
                                                cust2.contactPerson = cust.addressbookList.addressbook[b].addressbookAddress.attention;
                                                cust2.phone = cust.addressbookList.addressbook[b].addressbookAddress.addrPhone;

                                                city = cust.addressbookList.addressbook[b].addressbookAddress.city;
                                                state = cust.addressbookList.addressbook[b].addressbookAddress.state;
                                                postCode = cust.addressbookList.addressbook[b].addressbookAddress.zip;
                                                country = checkIsNull(cust.addressbookList.addressbook[b].addressbookAddress.country.ToString()).Replace("_", string.Empty).ToUpper();
                                                //deliveryAdd3 = city + " " + state + " " + postCode + " " + country;
                                                deliveryAdd3 = "";
                                                if (!String.IsNullOrEmpty(city))
                                                {
                                                    deliveryAdd3 = city;
                                                }

                                                if (!String.IsNullOrEmpty(state))
                                                {
                                                    if (!String.IsNullOrEmpty(deliveryAdd3))
                                                    {
                                                        deliveryAdd3 = deliveryAdd3.TrimEnd() + " " + state;
                                                    }
                                                    else
                                                    {
                                                        deliveryAdd3 = state;
                                                    }
                                                }

                                                if (!String.IsNullOrEmpty(postCode))
                                                {
                                                    if (!String.IsNullOrEmpty(deliveryAdd3))
                                                    {
                                                        deliveryAdd3 = deliveryAdd3.TrimEnd() + " " + postCode;
                                                    }
                                                    else
                                                    {
                                                        deliveryAdd3 = postCode;
                                                    }
                                                }

                                                if (!String.IsNullOrEmpty(country))
                                                {
                                                    if (!String.IsNullOrEmpty(deliveryAdd3))
                                                    {
                                                        deliveryAdd3 = deliveryAdd3.TrimEnd() + " " + country;
                                                    }
                                                    else
                                                    {
                                                        deliveryAdd3 = country;
                                                    }
                                                }
                                                deliveryAdd3 = checkIsNull(deliveryAdd3);
                                                cust2.deliveryAdd3 = deliveryAdd3;
                                            }

                                            isDefaultBillAdd = cust.addressbookList.addressbook[b].defaultBilling;
                                            if (isDefaultBillAdd == true)
                                            {
                                                cust2.billingAddressee = cust.addressbookList.addressbook[b].addressbookAddress.addressee;
                                                cust2.billingAdd = cust.addressbookList.addressbook[b].addressbookAddress.addr1;
                                                cust2.billingAdd2 = cust.addressbookList.addressbook[b].addressbookAddress.addr2;
                                                cust2.billingPostcode = cust.addressbookList.addressbook[b].addressbookAddress.zip;
                                                cust2.billingContactPerson = cust.addressbookList.addressbook[b].addressbookAddress.attention;
                                                cust2.billingPhone = cust.addressbookList.addressbook[b].addressbookAddress.addrPhone;

                                                billingCity = cust.addressbookList.addressbook[b].addressbookAddress.city;
                                                billingState = cust.addressbookList.addressbook[b].addressbookAddress.state;
                                                billingPostcode = cust.addressbookList.addressbook[b].addressbookAddress.zip;
                                                billingCountry = checkIsNull(cust.addressbookList.addressbook[b].addressbookAddress.country.ToString()).Replace("_", string.Empty).ToUpper();
                                                //billingAdd3 = billingCity + " " + billingState + " " + billingPostcode + " " + billingCountry;
                                                billingAdd3 = "";
                                                if (!String.IsNullOrEmpty(billingCity))
                                                {
                                                    billingAdd3 = billingCity;
                                                }

                                                if (!String.IsNullOrEmpty(billingState))
                                                {
                                                    if (!String.IsNullOrEmpty(billingAdd3))
                                                    {
                                                        billingAdd3 = billingAdd3.TrimEnd() + " " + billingState;
                                                    }
                                                    else
                                                    {
                                                        billingAdd3 = billingState;
                                                    }
                                                }

                                                if (!String.IsNullOrEmpty(billingPostcode))
                                                {
                                                    if (!String.IsNullOrEmpty(billingAdd3))
                                                    {
                                                        billingAdd3 = billingAdd3.TrimEnd() + " " + billingPostcode;
                                                    }
                                                    else
                                                    {
                                                        billingAdd3 = billingPostcode;
                                                    }
                                                }

                                                if (!String.IsNullOrEmpty(billingCountry))
                                                {
                                                    if (!String.IsNullOrEmpty(billingAdd3))
                                                    {
                                                        billingAdd3 = billingAdd3.TrimEnd() + " " + billingCountry;
                                                    }
                                                    else
                                                    {
                                                        billingAdd3 = billingCountry;
                                                    }
                                                }
                                                billingAdd3 = checkIsNull(billingAdd3);
                                                cust2.billingAdd3 = billingAdd3;
                                            }
                                        }
                                        cust2.country = salesTer;
                                    }
                                    listCust.Add(cust2);
                                }
                            }
                            else
                            {
                                cls_customer cust2 = new cls_customer();
                                cust2.custID = customerInternalID;
                                cust2.addressee = "";
                                cust2.deliveryAdd = "";
                                cust2.deliveryAdd2 = "";
                                cust2.postCode = "";
                                cust2.contactPerson = "";
                                cust2.phone = "";
                                cust2.deliveryAdd3 = "";
                                cust2.country = "";
                                cust2.billingAddressee = "";
                                cust2.billingAdd = "";
                                cust2.billingAdd2 = "";
                                cust2.billingPostcode = "";
                                cust2.billingContactPerson = "";
                                cust2.billingPhone = "";
                                cust2.billingAdd3 = "";
                                listCust.Add(cust2);
                            }
                        }
                    }
                    #endregion
                }
                catch (Exception ex)
                {
                    if (ex.Message.Contains("a session at a time") || ex.Message.Contains("Your connection has timed out"))
                    {
                        this.DataFromNetsuiteLog.Debug("LatestSalesOrders2 Logout Exception: " + ex.ToString());
                    }
                    else
                    {
                        this.DataFromNetsuiteLog.Error("LatestSalesOrders2 Logout Exception: " + ex.ToString());
                    }
                    isValidCust = false;
                }
            }
            else
            {
                this.DataFromNetsuiteLog.Fatal("LatestSalesOrders2: Login Netsuite failed.");
                isValidCust = false;
            }

            if (isValidCust == true)
            {
                var option = new TransactionOptions
                {
                    IsolationLevel = IsolationLevel.RepeatableRead,
                    Timeout = TimeSpan.FromSeconds(2400)
                };

                using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    if (pffRecord != null && pffRecord.Count() > 0)
                    {
                        this.DataFromNetsuiteLog.Info("LatestSalesOrders2: " + pffRecord.Count() + " records is retrieved.");
                        try
                        {
                            String rangeTo = convertDateToString(Convert.ToDateTime(r.rn_rangeTo));
                            String createdDate = convertDateToString(DateTime.Now);

                            for (int i = 0; i < pffRecord.Length; i++)
                            {
                                SalesOrder so = (SalesOrder)pffRecord[i];
                                String moNo = so.tranId;
                                String moNoInternalID = so.internalId;
                                Double tolCommittedQty = 0;
                                String memo = so.memo;
                                String ponumber = so.otherRefNum;
                                String discItemInternalID = string.Empty;
                                if (so.discountItem != null)
                                {
                                    discItemInternalID = so.discountItem.internalId;
                                }
                                String soDate = "0001-01-01";
                                if (so.tranDate != null)
                                {
                                    soDate = convertDateToString(so.tranDate);
                                }
                                String LOB = so.@class.internalId;

                                if (moNoInternalID == listSoItems[i].soInternalID)
                                {
                                    tolCommittedQty = listSoItems[i].tolCommittedQty;
                                }
                                if (tolCommittedQty > 0)
                                {
                                    var deleteSO1 = "delete from netsuite_newso where nt1_moNo_internalID = '" + so.internalId + "' ";
                                    this.DataFromNetsuiteLog.Debug("LatestSalesOrders2: " + deleteSO1);
                                    entities.Database.ExecuteSqlCommand(deleteSO1);

                                    #region Custom List Information - WY-05.FEB.2015
                                    String customer = checkIsNull(listCust[i].customerID).Replace("'", "''");
                                    String customerInternalID = so.entity.internalId;
                                    String SEISmoNo = "";
                                    String SEISmoNoInternalID = "";
                                    String syncToWMS = "";
                                    String subsidiary = so.subsidiary.name;
                                    if (so.subsidiary.name.ToUpper().Equals("SCHOLASTIC EDUCATION INTERNATIONAL (SINGAPORE) PTE LTD"))
                                    {
                                        subsidiary = "SEIS";
                                    }
                                    String term = checkRecordRefIsNull(so.terms);
                                    this.DataFromNetsuiteLog.Debug("LatestSalesOrders: " + term + "SO NO : " + so.tranId);
                                    if (!String.IsNullOrEmpty(term))
                                    {
                                        term = SplitSalesOrderTerm(term);
                                    }
                                    String poDate = "0001-01-01";
                                    String forwTo = string.Empty;
                                    String forwLabel = string.Empty;
                                    String forwAddressee = string.Empty;
                                    String forwAttention = string.Empty;
                                    String forwAdd1 = string.Empty;
                                    String forwAdd2 = string.Empty;
                                    String forwAdd3 = string.Empty;
                                    String forwState = string.Empty;
                                    String forwPostcode = string.Empty;
                                    String forwCountry = string.Empty;
                                    String forwCity = string.Empty;
                                    String forwPhone = string.Empty;
                                    String forwInternalID = string.Empty;
                                    String custBooking = "N";
                                    //FAS order 09/10/2018 - Mohan
                                    string fasOrder = "N";
                                    //FAS order 09/10/2018 - Mohan end

                                    //ANET-37 - Sales Order - Auto stop back order
                                    //No Back Order - Brash Developer 28-Apr-2021 Start
                                    string noBackOrder = "N";
                                    //End

                                    int creditHold = 0;

                                    for (int custAtt = 0; custAtt < so.customFieldList.Count(); custAtt++)
                                    {
                                        String customFieldStr = so.customFieldList[custAtt].ToString();
                                        switch (customFieldStr)
                                        {
                                            case "sde.comNetsuiteServices.StringCustomFieldRef":
                                                StringCustomFieldRef custom1 = (StringCustomFieldRef)so.customFieldList[custAtt];
                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SEISSALESORDERNUMBER_SCRIPTID))
                                                {
                                                    SEISmoNo = custom1.value;
                                                    SEISmoNoInternalID = custom1.internalId;
                                                }
                                                else
                                                    if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_LABEL_SCRIPTID))
                                                    {
                                                        forwLabel = custom1.value;
                                                    }
                                                    else
                                                        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ATTENTION_SCRIPTID))
                                                        {
                                                            forwAttention = custom1.value;
                                                        }
                                                        else
                                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ADDRESSEE_SCRIPTID))
                                                            {
                                                                forwAddressee = custom1.value;
                                                            }
                                                            else
                                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_PHONE_SCRIPTID))
                                                                {
                                                                    forwPhone = custom1.value;
                                                                }
                                                                else
                                                                    if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ADDR1_SCRIPTID))
                                                                    {
                                                                        forwAdd1 = custom1.value;
                                                                    }
                                                                    else
                                                                        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ADDR2_SCRIPTID))
                                                                        {
                                                                            forwAdd2 = custom1.value;
                                                                        }
                                                                        else
                                                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ADDR3_SCRIPTID))
                                                                            {
                                                                                forwAdd3 = custom1.value;
                                                                            }
                                                                            else
                                                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_CITY_SCRIPTID))
                                                                                {
                                                                                    forwCity = custom1.value;
                                                                                }
                                                                                else
                                                                                    if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_STATE_SCRIPTID))
                                                                                    {
                                                                                        forwState = custom1.value;
                                                                                    }
                                                                                    else
                                                                                        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_COUNTRY_SCRIPTID))
                                                                                        {
                                                                                            forwCountry = custom1.value;
                                                                                        }
                                                break;

                                            case "sde.comNetsuiteServices.SelectCustomFieldRef":
                                                SelectCustomFieldRef customSelect = (SelectCustomFieldRef)so.customFieldList[custAtt];
                                                if (customSelect.scriptId.Equals(@Resource.CUSTOMFIELD_SYNCTOWMS_SCRIPTID))
                                                {
                                                    syncToWMS = customSelect.value.internalId;
                                                }
                                                else
                                                    if (customSelect.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDERTO_SCRIPTID))
                                                    {
                                                        forwTo = customSelect.value.name;
                                                        forwInternalID = customSelect.value.internalId;
                                                    }
                                                break;
                                            case "sde.comNetsuiteServices.DateCustomFieldRef":
                                                DateCustomFieldRef customDate = (DateCustomFieldRef)so.customFieldList[custAtt];
                                                if (customDate.scriptId.Equals(@Resource.CUSTOMFIELD_PODATE_SCRIPTID))
                                                {
                                                    poDate = convertDateToString(customDate.value);
                                                }
                                                break;
                                            case "sde.comNetsuiteServices.LongCustomFieldRef":
                                                LongCustomFieldRef customLong = (LongCustomFieldRef)so.customFieldList[custAtt];
                                                if (customLong.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_POSTCODE_SCRIPTID))
                                                {
                                                    forwPostcode = Convert.ToString(customLong.value);
                                                }
                                                break;
                                            case "sde.comNetsuiteServices.BooleanCustomFieldRef":
                                                BooleanCustomFieldRef customBool = (BooleanCustomFieldRef)so.customFieldList[custAtt];
                                                if (customBool.scriptId.Equals(@Resource.CUSTOMFIELD_CUST_BOOKING_SCRIPTID))
                                                {
                                                    if (customBool.value)
                                                    {
                                                        custBooking = "Y";
                                                    }
                                                }
                                                //FAS order 09/10/2018 - Mohan
                                                else
                                                    if (customBool.scriptId.Equals(@Resource.CUSTOMFIELD_FAS_ORDER_INTERNAL_SCRIPTID))
                                                    {
                                                        if (customBool.value)
                                                        {
                                                            fasOrder = "Y";
                                                        }
                                                        else
                                                        {
                                                            fasOrder = "N";
                                                        }
                                                    }
                                                    //FAS order 09/10/2018 - Mohan end

                                                 //Credit Hold 02052019 - MOHAN
                                                    else if (customBool.scriptId.Equals(@Resource.SALES_ORDER_CREDIT_HOLD_FIELDID))
                                                    {
                                                        if (customBool.value)
                                                        {
                                                            creditHold = 1;
                                                        }
                                                    }
                                                    //Credit Hold 02052019 - MOHAN
                                                    //ANET-37 - Sales Order - Auto stop back order
                                                    //No Back Order - Brash Developer 28-Apr-2021 Start
                                                    else if (customBool.scriptId.Equals(@Resource.CUSTOMFIELD_NO_BACK_ORDER_INTERNAL_SCRIPTID))
                                                    {
                                                        if (customBool.value)
                                                        {
                                                            noBackOrder = "Y";
                                                        }
                                                    }
                                                //End

                                                break;

                                        }
                                    }
                                    #endregion

                                    for (int j = 0; j < so.itemList.item.Count(); j++)
                                    {
                                        String moNoStatus = so.status.ToUpper();
                                        String itemTitle = SplitItemByISBN(so.itemList.item[j].item.name);
                                        Int32 itemLine = Convert.ToInt32(so.itemList.item[j].line);
                                        String itemInternalID = so.itemList.item[j].item.internalId;
                                        Double committedQty = so.itemList.item[j].quantityCommitted;
                                        Double fulfilledQty = so.itemList.item[j].quantityFulfilled;
                                        Double ordQty = so.itemList.item[j].quantity;
                                        Double tax = so.itemList.item[j].taxRate1;
                                        Double rate = 0;
                                        Double nt_discount = 0;
                                        String strDiscPercentage = string.Empty;

                                        if (so.itemList.item[j].rate == null)
                                        {
                                            rate = 0;
                                        }
                                        else
                                        {
                                            rate = Convert.ToDouble(so.itemList.item[j].rate.Replace("%", ""));
                                        }
                                        String isClosed = "N";
                                        if (so.itemList.item[j].isClosed)
                                        {
                                            isClosed = "Y";
                                        }
                                        Double grossAmount = so.itemList.item[j].grossAmt;
                                        Double amount = 0;
                                        //String customer = checkIsNull(listCust[i].customerID).Replace("'", "''");
                                        //String customerInternalID = so.entity.internalId;
                                        //String SEISmoNo = "";
                                        //String SEISmoNoInternalID = "";
                                        //String syncToWMS = "";
                                        //String subsidiary = so.subsidiary.name;
                                        //if (so.subsidiary.name.ToUpper().Equals("SCHOLASTIC EDUCATION INTERNATIONAL (SINGAPORE) PTE LTD"))
                                        //{
                                        //    subsidiary = "SEIS";
                                        //}
                                        Double basedPrice = 0;
                                        String priceLevel = so.itemList.item[j].price.name;
                                        String priceLevelInternalID = so.itemList.item[j].price.internalId;

                                        //for (int k = 0; k < so.customFieldList.Count(); k++)
                                        //{
                                        //    if (so.customFieldList[k].ToString().Equals("sde.comNetsuiteServices.StringCustomFieldRef"))
                                        //    {
                                        //        StringCustomFieldRef custom1 = (StringCustomFieldRef)so.customFieldList[k];
                                        //        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SEISSALESORDERNUMBER_SCRIPTID))
                                        //        {
                                        //            SEISmoNo = custom1.value;
                                        //            SEISmoNoInternalID = custom1.internalId;
                                        //        }
                                        //    }
                                        //    else
                                        //        if (so.customFieldList[k].ToString().Equals("sde.comNetsuiteServices.SelectCustomFieldRef"))
                                        //        {
                                        //            SelectCustomFieldRef custom1 = (SelectCustomFieldRef)so.customFieldList[k];
                                        //            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SYNCTOWMS_SCRIPTID))
                                        //            {
                                        //                syncToWMS = custom1.value.internalId;
                                        //            }
                                        //        }
                                        //}

                                        for (int discTol = 0; discTol < so.itemList.item[j].customFieldList.Count(); discTol++)
                                        {
                                            //Added #1028 -begin
                                            if (so.itemList.item[j].customFieldList[discTol].internalId.ToString().Equals(@Resource.CUSTOMFIELD_TRANS_ISBN_INTERNALID))
                                            {
                                                SelectCustomFieldRef multiRef = (SelectCustomFieldRef)so.itemList.item[j].customFieldList[discTol];
                                                if (!String.IsNullOrEmpty(multiRef.value.name))
                                                {
                                                    itemTitle = multiRef.value.name;
                                                }
                                            }
                                            //Added #1028 -end

                                            if (so.itemList.item[j].customFieldList[discTol].ToString().Equals("sde.comNetsuiteServices.DoubleCustomFieldRef"))
                                            {
                                                DoubleCustomFieldRef custom1 = (DoubleCustomFieldRef)so.itemList.item[j].customFieldList[discTol];
                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_DISCTOTAL_SCRIPTID))
                                                {
                                                    amount = custom1.value;
                                                }
                                                else
                                                    if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_BASEDPRICE_SCRIPTID))
                                                    {
                                                        basedPrice = custom1.value;
                                                    }
                                            }
                                            else
                                                if (so.itemList.item[j].customFieldList[discTol].ToString().Equals("sde.comNetsuiteServices.StringCustomFieldRef"))
                                                {
                                                    StringCustomFieldRef custom1 = (StringCustomFieldRef)so.itemList.item[j].customFieldList[discTol];
                                                    if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_DISCPERCENTAGE_SCRIPTID))
                                                    {
                                                        strDiscPercentage = checkIsNull(custom1.value);
                                                        if ((strDiscPercentage == "") || (strDiscPercentage == "%"))
                                                        {
                                                            nt_discount = 0;
                                                        }
                                                        else
                                                        {
                                                            strDiscPercentage = strDiscPercentage.Replace('%', ' ');
                                                            strDiscPercentage = strDiscPercentage.Replace('-', ' ');
                                                            nt_discount = Convert.ToDouble(strDiscPercentage);
                                                        }
                                                    }
                                                }//FAS order 09/10/2018 - Mohan  - MARK OFF by kang
                                            //else
                                            //    if (so.itemList.item[j].customFieldList[discTol].ToString().Equals("sde.comNetsuiteServices.BooleanCustomFieldRef"))
                                            //    {
                                            //        BooleanCustomFieldRef customBool = (BooleanCustomFieldRef)so.customFieldList[discTol];
                                            //        if (customBool.scriptId.Equals(@Resource.CUSTOMFIELD_FAS_ORDER_INTERNAL_SCRIPTID))
                                            //        {
                                            //            if (customBool.value)
                                            //            {
                                            //                fasOrder = "Y";
                                            //            }
                                            //            else
                                            //            {
                                            //                fasOrder = "N";
                                            //            }
                                            //        }
                                            //    } //FAS order 09/10/2018 - Mohan end
                                        }
                                        //String term = checkRecordRefIsNull(so.terms);
                                        //this.DataFromNetsuiteLog.Debug("LatestSalesOrders2: " + term + "SO NO : " + so.tranId);
                                        //if (!String.IsNullOrEmpty(term))
                                        //{
                                        //    term = SplitSalesOrderTerm(term);
                                        //}
                                        var qItemIsbn = (from mi in entities.map_item
                                                         where mi.mi_item_internalID == itemInternalID
                                                         select mi.mi_item_isbn).FirstOrDefault();
                                        if (!String.IsNullOrEmpty(qItemIsbn))
                                        {
                                            itemTitle = qItemIsbn;
                                        }


                                        if (fasOrder.Equals("N"))
                                        {
                                            //ANET-37 - Sales Order - Auto stop back order -> No Back Order "nt1_nobackorder" - Brash Developer 28-Apr-2021 Start
                                            var insertSO1 = "insert into netsuite_newso (nt1_moNo,nt1_moNo_internalID,nt1_status,nt1_itemID,nt1_item_internalID,nt1_ordQty,nt1_committedQty,nt1_fulfilledQty,nt1_tax," +
                                                "nt1_rate,nt1_amount,nt1_customer,nt1_customer_internalID,nt1_SEIS_moNo,nt1_SEIS_moNo_internalID,nt1_subsidiary,nt1_createdDate,nt1_rangeTo,nt1_synctowms,nt1_discount," +
                                                "nt1_custID,nt1_addressee,nt1_deliveryAdd,nt1_deliveryAdd2,nt1_deliveryAdd3,nt1_postCode,nt1_contactPerson,nt1_phone,nt1_country, " +
                                                "nt1_billingAddressee,nt1_billingAdd,nt1_billingAdd2,nt1_billingAdd3,nt1_billingPostcode,nt1_billingContactPerson,nt1_billingPhone, " +
                                                "nt1_shipMethod,nt1_creditTerm,nt1_basedprice,nt1_pricelevel,nt1_memo,nt1_ponumber,nt1_itemLine,nt1_discountItem_internalID,nt1_podate,nt1_forwarderTo,nt1_forwarderLabel,nt1_forwarderAddressee," +
                                                "nt1_forwarderAdd1,nt1_forwarderAdd2,nt1_forwarderAdd3,nt1_forwarderAttention,nt1_forwarderState,nt1_forwarderPostcode,nt1_forwarderCity,nt1_forwarderCountry,nt1_forwarderPhone," +
                                                "nt1_forwarderInternalID,nt1_pricelevel_InternalID,nt1_sodate,nt1_closed,nt1_businessChannel_internalID,nt1_customer_booked, nt1_credit_hold, nt1_nobackorder ) values (" +
                                                "'" + moNo + "','" + moNoInternalID + "','" + moNoStatus + "','" + itemTitle + "','" + itemInternalID + "','" + ordQty + "','" + committedQty + "','" + fulfilledQty + "','" + tax + "'," +
                                                "'" + rate + "','" + amount + "','" + customer + "','" + customerInternalID + "','" + SEISmoNo + "','" + SEISmoNoInternalID + "','" + subsidiary.ToUpper() + "'," +
                                                "'" + createdDate + "','" + rangeTo + "','" + syncToWMS + "','" + nt_discount + "','" + listCust[i].custID + "','" + checkIsNull(listCust[i].addressee).Replace("'", "''") + "'," +
                                                "'" + checkIsNull(listCust[i].deliveryAdd).Replace("'", "''") + "','" + checkIsNull(listCust[i].deliveryAdd2).Replace("'", "''") + "'," +
                                                "'" + checkIsNull(listCust[i].deliveryAdd3).Replace("'", "''") + "','" + checkIsNull(listCust[i].postCode).Replace("'", "''").Replace(" ", "") + "','" + checkIsNull(listCust[i].contactPerson).Replace("'", "''") + "'," +
                                                "'" + checkIsNull(listCust[i].phone).Replace("'", "''") + "','" + checkIsNull(listCust[i].country).Replace("'", "''") + "'," +
                                                "'" + checkIsNull(listCust[i].billingAddressee).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingAdd).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingAdd2).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingAdd3).Replace("'", "''") + "', " +
                                                "'" + checkIsNull(listCust[i].billingPostcode).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingContactPerson).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingPhone).Replace("'", "''") + "', " +
                                                "'" + checkRecordRefIsNull(so.shipMethod) + "','" + term + "','" + basedPrice + "','" + priceLevel + "','" + checkIsNull(memo).Replace("'", "''") + "','" + checkIsNull(ponumber).Replace("'", "''") + "', " +
                                                "'" + itemLine + "','" + discItemInternalID + "','" + checkIsNull(poDate).Replace("'", "''") + "','" + checkIsNull(forwTo).Replace("'", "''") + "','" + checkIsNull(forwLabel).Replace("'", "''") + "' " +
                                                ",'" + checkIsNull(forwAddressee).Replace("'", "''") + "','" + checkIsNull(forwAdd1).Replace("'", "''") + "','" + checkIsNull(forwAdd2).Replace("'", "''") + "' " +
                                                ",'" + checkIsNull(forwAdd3).Replace("'", "''") + "','" + checkIsNull(forwAttention).Replace("'", "''") + "','" + checkIsNull(forwState).Replace("'", "''") + "' " +
                                                ",'" + checkIsNull(forwPostcode).Replace("'", "''") + "','" + checkIsNull(forwCity).Replace("'", "''") + "','" + checkIsNull(forwCountry).Replace("'", "''") + "' " +
                                                ",'" + checkIsNull(forwPhone).Replace("'", "''") + "','" + checkIsNull(forwInternalID).Replace("'", "''") + "','" + checkIsNull(priceLevelInternalID).Replace("'", "''") + "','" + checkIsNull(soDate).Replace("'", "''") + "','" + isClosed + "','" + checkIsNull(LOB).Replace("'", "''") +
                                                "','" + custBooking + "','" + creditHold + "','" + checkIsNull(noBackOrder).Replace("'", "''") + "')";
                                            this.DataFromNetsuiteLog.Debug("LatestSalesOrders2: " + insertSO1);
                                            entities.Database.ExecuteSqlCommand(insertSO1);
                                        }

                                    }

                                    Int32 rowCount = i + 1;
                                    String _refno = "NETSUITE.LATEST-SO.SELECT." + r.rn_rangeFrom + "-" + r.rn_rangeTo;
                                    var insertTask = "insert into requestnetsuite_task (rnt_task, rnt_description, rnt_refNO, rnt_jobID, rnt_status, rnt_createdDate, " +
                                    "rnt_seqNO, rnt_createdFromInternalID, rnt_nsInternalId, rnt_updatedDate) values ('SELECT', '" + r.rn_sche_transactionType + "', '" + _refno + "', '" + r.rn_jobID + "'," +
                                    "'TRUE', '" + convertDateToString(DateTime.Now) + "', '" + rowCount + "','', '" + moNoInternalID + "', '" + convertDateToString(DateTime.Now) + "')";
                                    this.DataFromNetsuiteLog.Debug("LatestSalesOrders2: " + insertTask);
                                    entities.Database.ExecuteSqlCommand(insertTask);
                                }
                            }

                            var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                                "where rn_jobID = '" + r.rn_jobID + "'";
                            this.DataFromNetsuiteLog.Debug("LatestSalesOrders2: " + updateRequestNetsuite);
                            entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                            scope1.Complete();
                            status = true;
                        }
                        catch (Exception ex)
                        {
                            this.DataFromNetsuiteLog.Error("LatestSalesOrders2 Exception: " + ex.ToString());
                            status = false;
                        }
                    }
                    else
                    {
                        var updateRequestNetsuite = "update requestnetsuite set rn_status='NO-DATA', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                            "where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("LatestSalesOrders2: " + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                        scope1.Complete();
                    }
                }
            }
            return status;
        }
        //NS-LATEST SALES ORDER 3 - //To handle auto-back order extraction - WY-03.NOV.2014
        private Boolean LatestSalesOrders3(sdeEntities entities, RequestNetsuiteEntity r)
        {
            this.DataFromNetsuiteLog.Info("LatestSalesOrders3: Pulling sales orders ********");
            //TBA
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            DataCenterAwareNetSuiteService netsuiteService = new DataCenterAwareNetSuiteService(account);

            List<cls_customer> listCust = new List<cls_customer>();
            Record[] customerRecord = null;
            Boolean isValidCust = true;

            Record[] pffRecord = null;
            Boolean status = false;

            //Status netsuiteStatus = new Status();
            //service.Timeout = 1000000000;
            //service.CookieContainer = new CookieContainer();
            //ApplicationInfo appinfo = new ApplicationInfo();
            //appinfo.applicationId = @Resource.NETSUITE_LOGIN_APPLICATIONID;
            //service.applicationInfo = appinfo;

            //Passport passport = new Passport();
            //passport.account = @Resource.NETSUITE_LOGIN_ACCOUNT;
            //passport.email = @Resource.NETSUITE_LOGIN_EMAIL_PULL;

            //RecordRef role = new RecordRef();
            //role.internalId = @Resource.NETSUITE_LOGIN_ROLE_INTERNALID;

            //passport.role = role;
            ////kang get netsuite password from DB
            ////passport.password = @Resource.NETSUITE_LOGIN_PASSWORD;
            //passport.password = getNetsuitePassword(@Resource.NETSUITE_LOGIN_EMAIL_PULL);

            //netsuiteStatus = service.login(passport).status;

            //TBA
            ItemSearchBasic basic = new ItemSearchBasic()
            {
                internalId = new SearchMultiSelectField()
                {
                    @operator = SearchMultiSelectFieldOperator.anyOf,
                    operatorSpecified = true,
                    searchValue = new RecordRef[] {
                    new RecordRef() {
                    internalId = "14943"
                         }
                    }
                }
            };


            netsuiteService.Timeout = 1000000000;
            netsuiteService.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();

            //  appinfo.applicationId = appID;
            netsuiteService.applicationInfo = appinfo;
            string loginEmail = "";
            loginEmail = @Resource.NETSUITE_LOGIN_EMAIL_PULL;
            tokenId = @Resource.ASIA_WEBSERVICE_4_TOKEN_ID;
            tokenSecret = @Resource.ASIA_WEBSERVICE_4_TOKEN_SECRET;


            Boolean loginStatus = false;
            try
            {
                Console.WriteLine("Success");
                netsuiteService.tokenPassport = createTokenPassport();
                SearchResult status1 = netsuiteService.search(basic);
                if (status1.status.isSuccess == true)
                {
                    loginStatus = true;
                }
                else
                {
                    loginStatus = false;
                }
            }
            catch (Exception ex)
            {
                loginStatus = false;
                this.DataFromNetsuiteLog.Fatal("SOFulfillmentUpdate: Login Netsuite failed. Exception : " + ex.ToString());

            }
            //

            if (loginStatus == true)
            {
                this.DataFromNetsuiteLog.Debug("LatestSalesOrders3: Login Netsuite success.");
                this.DataFromNetsuiteLog.Info("LatestSalesOrders3: Retrieving sales order every 2 hours from Netsuite.");

                //TBA
                netsuiteService.tokenPassport = createTokenPassport();
                AsyncResult pffResponse = netsuiteService.getAsyncResult(r.rn_jobID, 1);
                AsyncSearchResult salesOrderSearchResult = (AsyncSearchResult)pffResponse;
                pffRecord = salesOrderSearchResult.searchResult.recordList;

                try
                {
                    //netsuiteStatus = (service.logout()).status;
                    //if (netsuiteStatus.isSuccess == true)
                    //{
                    //    this.DataFromNetsuiteLog.Debug("LatestSalesOrders3: Logout Netsuite success.");
                    //}
                    //else
                    //{
                    //    this.DataFromNetsuiteLog.Error("LatestSalesOrders3: Logout Netsuite failed.");
                    //}

                    #region Customer Info
                    if (pffRecord != null && pffRecord.Count() > 0)
                    {
                        for (int g = 0; g < pffRecord.Count(); g++)
                        {
                            SalesOrder so = (SalesOrder)pffRecord[g];
                            String customerInternalID = so.entity.internalId;
                            String dropShipMYCustID = string.Empty; //If dropshipment will based on MY Sales Order Customer Info 

                            String SEISSONumber = null;
                            #region Custom Fields Looping
                            for (int i = 0; i < so.customFieldList.Count(); i++)
                            {
                                if (so.customFieldList[i].ToString().Equals("sde.comNetsuiteServices.StringCustomFieldRef"))
                                {
                                    StringCustomFieldRef custom1 = (StringCustomFieldRef)so.customFieldList[i];
                                    if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SEISSALESORDERNUMBER_SCRIPTID))
                                    {
                                        SEISSONumber = custom1.value;
                                        if (!String.IsNullOrEmpty(SEISSONumber))
                                        {
                                            var SEISInfo = (from q1 in entities.netsuite_newso
                                                            where q1.nt1_moNo == SEISSONumber
                                                            select new { q1.nt1_customer_internalID, q1.nt1_country, q1.nt1_businessChannel_internalID }).FirstOrDefault();

                                            if (!String.IsNullOrEmpty(SEISInfo.nt1_customer_internalID))
                                            {
                                                customerInternalID = SEISInfo.nt1_customer_internalID;

                                                //If dropshipment will based on MY Sales Order Customer Info - WY-22.SEPT.2014 
                                                switch (SEISInfo.nt1_country)
                                                {
                                                    case "SG":
                                                        dropShipMYCustID = @Resource.SEIS_CUSTOMER_MY; //P00892
                                                        break;
                                                    //TH DROPSHIP
                                                    case "TH":
                                                        dropShipMYCustID = @Resource.DROPSHIP_CUSTOMER_TH; //P01042
                                                        break;
                                                    default:
                                                        dropShipMYCustID = "";
                                                        break;
                                                }
                                                if (SEISInfo.nt1_country == "SG" && SEISInfo.nt1_businessChannel_internalID == @Resource.LOB_EDUCATIONGENERAL_INTERNALID)
                                                {
                                                    dropShipMYCustID = @Resource.SEIS_CUSTOMER_MY_EDUGENERAL;
                                                }
                                                //Added by Brash Developer on 21-Apr-2021 Start
                                                else if (SEISInfo.nt1_country == "SG" && SEISInfo.nt1_businessChannel_internalID == @Resource.LOB_ONLINESTORE_INTERNALID)
                                                {
                                                    dropShipMYCustID = @Resource.SEIS_CUSTOMER_MY_ONLINESTORE;
                                                }
                                                else if (SEISInfo.nt1_country == "TH" && SEISInfo.nt1_businessChannel_internalID == @Resource.LOB_ONLINESTORE_INTERNALID)
                                                {
                                                    dropShipMYCustID = @Resource.DROPSHIP_CUSTOMER_TH_ONLINESTORE;
                                                }
                                                //End
                                            }
                                            else
                                            {
                                                customerInternalID = "";
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion


                            //Add checking for customerInternalId if empty then skip 
                            if (!String.IsNullOrEmpty(customerInternalID))
                            {
                                SearchPreferences sp = new SearchPreferences();
                                sp.bodyFieldsOnly = false;
                                netsuiteService.searchPreferences = sp;
                                CustomerSearchAdvanced csa = new CustomerSearchAdvanced();
                                CustomerSearch cs = new CustomerSearch();
                                CustomerSearchBasic csb = new CustomerSearchBasic();

                                RecordRef[] refInternalID = new RecordRef[1];
                                RecordRef refEntity = new RecordRef();
                                refEntity.internalId = customerInternalID;
                                refInternalID[0] = refEntity;

                                SearchMultiSelectField csInternalID = new SearchMultiSelectField();
                                csInternalID.@operator = SearchMultiSelectFieldOperator.anyOf;
                                csInternalID.operatorSpecified = true;
                                csInternalID.searchValue = refInternalID;
                                csb.internalId = csInternalID;

                                cs.basic = csb;
                                csa.criteria = cs;
                                //login(@Resource.NETSUITE_LOGIN_EMAIL_PULL);
                                //TBA
                                netsuiteService.tokenPassport = createTokenPassport();
                                SearchResult sr = netsuiteService.search(csa);
                                // logout();
                                customerRecord = sr.recordList;

                                for (int i = 0; i < customerRecord.Count(); i++)
                                {
                                    Customer cust = (Customer)customerRecord[i];
                                    cls_customer cust2 = new cls_customer();
                                    String salesTer = null;

                                    for (int a = 0; a < cust.customFieldList.Count(); a++)
                                    {
                                        if (cust.customFieldList[a].ToString().Equals("sde.comNetsuiteServices.SelectCustomFieldRef"))
                                        {
                                            SelectCustomFieldRef custom1 = (SelectCustomFieldRef)cust.customFieldList[a];
                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SALESTERRITORY_SCRIPTID))
                                            {
                                                switch (custom1.value.internalId)
                                                {
                                                    case "1":
                                                        salesTer = "TH";
                                                        break;
                                                    case "16":
                                                        salesTer = "TH";
                                                        break;
                                                    case "8":
                                                        salesTer = "ID";
                                                        break;
                                                    case "14":
                                                        salesTer = "SG";
                                                        break;
                                                    case "10":
                                                        salesTer = "MY";
                                                        break;
                                                    default:
                                                        salesTer = "NA";
                                                        break;
                                                }
                                            }

                                        }
                                    }

                                    if (cust.addressbookList != null)
                                    {
                                        cust2.custID = customerInternalID;
                                        Int32 addBookCount = cust.addressbookList.addressbook.Count();

                                        //To get Customer ID 
                                        if (!String.IsNullOrEmpty(dropShipMYCustID))
                                        {
                                            cust2.customerID = dropShipMYCustID;
                                        }
                                        else
                                        {
                                            cust2.customerID = cust.entityId;
                                        }

                                        for (int b = 0; b < addBookCount; b++)
                                        {
                                            Boolean isDefaultShipAdd = false;
                                            Boolean isDefaultBillAdd = false;
                                            String deliveryAdd3, billingAdd3 = string.Empty;
                                            String city, billingCity = string.Empty;
                                            String state, billingState = string.Empty;
                                            String postCode, billingPostcode = string.Empty;
                                            String country, billingCountry = string.Empty;

                                            isDefaultShipAdd = cust.addressbookList.addressbook[b].defaultShipping;
                                            if (isDefaultShipAdd == true)
                                            {
                                                cust2.addressee = cust.addressbookList.addressbook[b].addressbookAddress.addressee;
                                                cust2.deliveryAdd = cust.addressbookList.addressbook[b].addressbookAddress.addr1;
                                                cust2.deliveryAdd2 = cust.addressbookList.addressbook[b].addressbookAddress.addr2;
                                                cust2.postCode = cust.addressbookList.addressbook[b].addressbookAddress.zip;
                                                cust2.contactPerson = cust.addressbookList.addressbook[b].addressbookAddress.attention;
                                                cust2.phone = cust.addressbookList.addressbook[b].addressbookAddress.addrPhone;

                                                city = cust.addressbookList.addressbook[b].addressbookAddress.city;
                                                state = cust.addressbookList.addressbook[b].addressbookAddress.state;
                                                postCode = cust.addressbookList.addressbook[b].addressbookAddress.zip;
                                                country = checkIsNull(cust.addressbookList.addressbook[b].addressbookAddress.country.ToString()).Replace("_", string.Empty).ToUpper();
                                                deliveryAdd3 = "";
                                                if (!String.IsNullOrEmpty(city))
                                                {
                                                    deliveryAdd3 = city;
                                                }

                                                if (!String.IsNullOrEmpty(state))
                                                {
                                                    if (!String.IsNullOrEmpty(deliveryAdd3))
                                                    {
                                                        deliveryAdd3 = deliveryAdd3.TrimEnd() + " " + state;
                                                    }
                                                    else
                                                    {
                                                        deliveryAdd3 = state;
                                                    }
                                                }

                                                if (!String.IsNullOrEmpty(postCode))
                                                {
                                                    if (!String.IsNullOrEmpty(deliveryAdd3))
                                                    {
                                                        deliveryAdd3 = deliveryAdd3.TrimEnd() + " " + postCode;
                                                    }
                                                    else
                                                    {
                                                        deliveryAdd3 = postCode;
                                                    }
                                                }

                                                if (!String.IsNullOrEmpty(country))
                                                {
                                                    if (!String.IsNullOrEmpty(deliveryAdd3))
                                                    {
                                                        deliveryAdd3 = deliveryAdd3.TrimEnd() + " " + country;
                                                    }
                                                    else
                                                    {
                                                        deliveryAdd3 = country;
                                                    }
                                                }
                                                deliveryAdd3 = checkIsNull(deliveryAdd3);
                                                cust2.deliveryAdd3 = deliveryAdd3;
                                            }

                                            isDefaultBillAdd = cust.addressbookList.addressbook[b].defaultBilling;
                                            if (isDefaultBillAdd == true)
                                            {
                                                cust2.billingAddressee = cust.addressbookList.addressbook[b].addressbookAddress.addressee;
                                                cust2.billingAdd = cust.addressbookList.addressbook[b].addressbookAddress.addr1;
                                                cust2.billingAdd2 = cust.addressbookList.addressbook[b].addressbookAddress.addr2;
                                                cust2.billingPostcode = cust.addressbookList.addressbook[b].addressbookAddress.zip;
                                                cust2.billingContactPerson = cust.addressbookList.addressbook[b].addressbookAddress.attention;
                                                cust2.billingPhone = cust.addressbookList.addressbook[b].addressbookAddress.addrPhone;

                                                billingCity = cust.addressbookList.addressbook[b].addressbookAddress.city;
                                                billingState = cust.addressbookList.addressbook[b].addressbookAddress.state;
                                                billingPostcode = cust.addressbookList.addressbook[b].addressbookAddress.zip;
                                                billingCountry = checkIsNull(cust.addressbookList.addressbook[b].addressbookAddress.country.ToString()).Replace("_", string.Empty).ToUpper();

                                                billingAdd3 = "";
                                                if (!String.IsNullOrEmpty(billingCity))
                                                {
                                                    billingAdd3 = billingCity;
                                                }

                                                if (!String.IsNullOrEmpty(billingState))
                                                {
                                                    if (!String.IsNullOrEmpty(billingAdd3))
                                                    {
                                                        billingAdd3 = billingAdd3.TrimEnd() + " " + billingState;
                                                    }
                                                    else
                                                    {
                                                        billingAdd3 = billingState;
                                                    }
                                                }

                                                if (!String.IsNullOrEmpty(billingPostcode))
                                                {
                                                    if (!String.IsNullOrEmpty(billingAdd3))
                                                    {
                                                        billingAdd3 = billingAdd3.TrimEnd() + " " + billingPostcode;
                                                    }
                                                    else
                                                    {
                                                        billingAdd3 = billingPostcode;
                                                    }
                                                }

                                                if (!String.IsNullOrEmpty(billingCountry))
                                                {
                                                    if (!String.IsNullOrEmpty(billingAdd3))
                                                    {
                                                        billingAdd3 = billingAdd3.TrimEnd() + " " + billingCountry;
                                                    }
                                                    else
                                                    {
                                                        billingAdd3 = billingCountry;
                                                    }
                                                }
                                                billingAdd3 = checkIsNull(billingAdd3);
                                                cust2.billingAdd3 = billingAdd3;
                                            }
                                        }
                                        cust2.country = salesTer;
                                    }
                                    listCust.Add(cust2);
                                }
                            }
                            else
                            {
                                cls_customer cust2 = new cls_customer();
                                cust2.custID = customerInternalID;
                                cust2.customerID = string.Empty;
                                cust2.addressee = string.Empty;
                                cust2.deliveryAdd = string.Empty;
                                cust2.deliveryAdd2 = string.Empty;
                                cust2.deliveryAdd3 = string.Empty;
                                cust2.postCode = string.Empty;
                                cust2.contactPerson = string.Empty;
                                cust2.phone = string.Empty;
                                cust2.billingAddressee = string.Empty;
                                cust2.billingAdd = string.Empty;
                                cust2.billingAdd2 = string.Empty;
                                cust2.billingPostcode = string.Empty;
                                cust2.billingContactPerson = string.Empty;
                                cust2.billingPhone = string.Empty;
                                cust2.billingAdd3 = string.Empty;
                                listCust.Add(cust2);
                            }
                        }
                    }
                    #endregion
                }
                catch (Exception ex)
                {
                    if (ex.Message.Contains("a session at a time") || ex.Message.Contains("Your connection has timed out"))
                    {
                        this.DataFromNetsuiteLog.Debug("LatestSalesOrders3 Logout Exception: " + ex.ToString());
                    }
                    else
                    {
                        this.DataFromNetsuiteLog.Error("LatestSalesOrders3 Logout Exception: " + ex.ToString());
                    }
                    isValidCust = false;
                }
            }
            else
            {
                this.DataFromNetsuiteLog.Fatal("LatestSalesOrders3: Login Netsuite failed.");
                isValidCust = false;
            }

            if (isValidCust == true)
            {
                var option = new TransactionOptions
                {
                    IsolationLevel = IsolationLevel.RepeatableRead,
                    Timeout = TimeSpan.FromSeconds(2400)
                };

                using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    if (pffRecord != null && pffRecord.Count() > 0)
                    {
                        this.DataFromNetsuiteLog.Info("LatestSalesOrders3: " + pffRecord.Count() + " records is retrieved.");
                        try
                        {
                            String rangeTo = convertDateToString(Convert.ToDateTime(r.rn_rangeTo));
                            String createdDate = convertDateToString(DateTime.Now);

                            for (int i = 0; i < pffRecord.Length; i++)
                            {
                                SalesOrder so = (SalesOrder)pffRecord[i];

                                var deleteSO1 = "delete from netsuite_newso where nt1_moNo_internalID = '" + so.internalId + "' ";
                                this.DataFromNetsuiteLog.Debug("LatestSalesOrders3: " + deleteSO1);
                                entities.Database.ExecuteSqlCommand(deleteSO1);

                                String moNo = so.tranId;
                                String moNoInternalID = so.internalId;
                                String memo = so.memo;
                                String ponumber = so.otherRefNum;
                                String discItemInternalID = string.Empty;
                                if (so.discountItem != null)
                                {
                                    discItemInternalID = so.discountItem.internalId;
                                }
                                String soDate = "0001-01-01";
                                if (so.tranDate != null)
                                {
                                    soDate = convertDateToString(so.tranDate);
                                }
                                String LOB = so.@class.internalId;
                                #region Custom List Information - WY-05.FEB.2015
                                String customer = checkIsNull(listCust[i].customerID).Replace("'", "''");
                                String customerInternalID = so.entity.internalId;
                                String SEISmoNo = "";
                                String SEISmoNoInternalID = "";
                                String syncToWMS = "";
                                String subsidiary = so.subsidiary.name;
                                if (so.subsidiary.name.ToUpper().Equals("SCHOLASTIC EDUCATION INTERNATIONAL (SINGAPORE) PTE LTD"))
                                {
                                    subsidiary = "SEIS";
                                }
                                String term = checkRecordRefIsNull(so.terms);
                                this.DataFromNetsuiteLog.Debug("LatestSalesOrders: " + term + "SO NO : " + so.tranId);
                                if (!String.IsNullOrEmpty(term))
                                {
                                    term = SplitSalesOrderTerm(term);
                                }
                                String poDate = "0001-01-01";
                                String forwTo = string.Empty;
                                String forwLabel = string.Empty;
                                String forwAddressee = string.Empty;
                                String forwAttention = string.Empty;
                                String forwAdd1 = string.Empty;
                                String forwAdd2 = string.Empty;
                                String forwAdd3 = string.Empty;
                                String forwState = string.Empty;
                                String forwPostcode = string.Empty;
                                String forwCountry = string.Empty;
                                String forwCity = string.Empty;
                                String forwPhone = string.Empty;
                                String forwInternalID = string.Empty;
                                String custBooking = "N";
                                int creditHold = 0;

                                //ANET-37 - Sales Order - Auto stop back order
                                //No Back Order - Brash Developer 28-Apr-2021 Start
                                string noBackOrder = "N";
                                //End

                                for (int custAtt = 0; custAtt < so.customFieldList.Count(); custAtt++)
                                {
                                    String customFieldStr = so.customFieldList[custAtt].ToString();
                                    switch (customFieldStr)
                                    {
                                        case "sde.comNetsuiteServices.StringCustomFieldRef":
                                            StringCustomFieldRef custom1 = (StringCustomFieldRef)so.customFieldList[custAtt];
                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SEISSALESORDERNUMBER_SCRIPTID))
                                            {
                                                SEISmoNo = custom1.value;
                                                SEISmoNoInternalID = custom1.internalId;
                                            }
                                            else
                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_LABEL_SCRIPTID))
                                                {
                                                    forwLabel = custom1.value;
                                                }
                                                else
                                                    if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ATTENTION_SCRIPTID))
                                                    {
                                                        forwAttention = custom1.value;
                                                    }
                                                    else
                                                        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ADDRESSEE_SCRIPTID))
                                                        {
                                                            forwAddressee = custom1.value;
                                                        }
                                                        else
                                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_PHONE_SCRIPTID))
                                                            {
                                                                forwPhone = custom1.value;
                                                            }
                                                            else
                                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ADDR1_SCRIPTID))
                                                                {
                                                                    forwAdd1 = custom1.value;
                                                                }
                                                                else
                                                                    if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ADDR2_SCRIPTID))
                                                                    {
                                                                        forwAdd2 = custom1.value;
                                                                    }
                                                                    else
                                                                        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ADDR3_SCRIPTID))
                                                                        {
                                                                            forwAdd3 = custom1.value;
                                                                        }
                                                                        else
                                                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_CITY_SCRIPTID))
                                                                            {
                                                                                forwCity = custom1.value;
                                                                            }
                                                                            else
                                                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_STATE_SCRIPTID))
                                                                                {
                                                                                    forwState = custom1.value;
                                                                                }
                                                                                else
                                                                                    if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_COUNTRY_SCRIPTID))
                                                                                    {
                                                                                        forwCountry = custom1.value;
                                                                                    }
                                            break;

                                        case "sde.comNetsuiteServices.SelectCustomFieldRef":
                                            SelectCustomFieldRef customSelect = (SelectCustomFieldRef)so.customFieldList[custAtt];
                                            if (customSelect.scriptId.Equals(@Resource.CUSTOMFIELD_SYNCTOWMS_SCRIPTID))
                                            {
                                                syncToWMS = customSelect.value.internalId;
                                            }
                                            else
                                                if (customSelect.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDERTO_SCRIPTID))
                                                {
                                                    forwTo = customSelect.value.name;
                                                    forwInternalID = customSelect.value.internalId;
                                                }
                                            break;
                                        case "sde.comNetsuiteServices.DateCustomFieldRef":
                                            DateCustomFieldRef customDate = (DateCustomFieldRef)so.customFieldList[custAtt];
                                            if (customDate.scriptId.Equals(@Resource.CUSTOMFIELD_PODATE_SCRIPTID))
                                            {
                                                poDate = convertDateToString(customDate.value);
                                            }
                                            break;
                                        case "sde.comNetsuiteServices.LongCustomFieldRef":
                                            LongCustomFieldRef customLong = (LongCustomFieldRef)so.customFieldList[custAtt];
                                            if (customLong.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_POSTCODE_SCRIPTID))
                                            {
                                                forwPostcode = Convert.ToString(customLong.value);
                                            }
                                            break;
                                        case "sde.comNetsuiteServices.BooleanCustomFieldRef":
                                            BooleanCustomFieldRef customBool = (BooleanCustomFieldRef)so.customFieldList[custAtt];
                                            if (customBool.scriptId.Equals(@Resource.CUSTOMFIELD_CUST_BOOKING_SCRIPTID))
                                            {
                                                if (customBool.value)
                                                {
                                                    custBooking = "Y";
                                                }
                                            }

                                             //Credit Hold 02052019 - MOHAN
                                            else if (customBool.scriptId.Equals(@Resource.SALES_ORDER_CREDIT_HOLD_FIELDID))
                                            {
                                                if (customBool.value)
                                                {
                                                    creditHold = 1;
                                                }
                                            }
                                            //Credit Hold 02052019 - MOHAN
                                            //ANET-37 - Sales Order - Auto stop back order
                                            //No Back Order - Brash Developer 28-Apr-2021 Start
                                            else if (customBool.scriptId.Equals(@Resource.CUSTOMFIELD_NO_BACK_ORDER_INTERNAL_SCRIPTID))
                                            {
                                                if (customBool.value)
                                                {
                                                    noBackOrder = "Y";
                                                }
                                            }
                                            //End
                                            break;
                                    }
                                }
                                #endregion

                                for (int j = 0; j < so.itemList.item.Count(); j++)
                                {
                                    String moNoStatus = so.status.ToUpper();
                                    String itemTitle = SplitItemByISBN(so.itemList.item[j].item.name);
                                    Int32 itemLine = Convert.ToInt32(so.itemList.item[j].line);
                                    String itemInternalID = so.itemList.item[j].item.internalId;
                                    Double committedQty = so.itemList.item[j].quantityCommitted;
                                    Double fulfilledQty = so.itemList.item[j].quantityFulfilled;
                                    Double ordQty = so.itemList.item[j].quantity;
                                    Double tax = so.itemList.item[j].taxRate1;
                                    Double rate = 0;
                                    Double nt_discount = 0; //Get the Discount Total
                                    String strDiscPercentage = string.Empty;//Get the Discount Total
                                    if (so.itemList.item[j].rate == null)
                                    {
                                        rate = 0;
                                    }
                                    else
                                    {
                                        rate = Convert.ToDouble(so.itemList.item[j].rate.Replace("%", ""));
                                    }
                                    String isClosed = "N";
                                    if (so.itemList.item[j].isClosed)
                                    {
                                        isClosed = "Y";
                                    }
                                    Double grossAmount = so.itemList.item[j].grossAmt; //Get the Discount Total
                                    Double amount = 0;
                                    //String customer = checkIsNull(listCust[i].customerID).Replace("'", "''");//To get Customer ID
                                    //String customerInternalID = so.entity.internalId;
                                    //String SEISmoNo = "";
                                    //String SEISmoNoInternalID = "";
                                    //String syncToWMS = "";
                                    //String subsidiary = so.subsidiary.name;
                                    //if (so.subsidiary.name.ToUpper().Equals("SCHOLASTIC EDUCATION INTERNATIONAL (SINGAPORE) PTE LTD"))
                                    //{
                                    //    subsidiary = "SEIS";
                                    //}
                                    //Add BasedPrice & RRP 
                                    Double basedPrice = 0;
                                    String priceLevel = so.itemList.item[j].price.name;
                                    String priceLevelInternalID = so.itemList.item[j].price.internalId;

                                    //for (int k = 0; k < so.customFieldList.Count(); k++)
                                    //{
                                    //    if (so.customFieldList[k].ToString().Equals("sde.comNetsuiteServices.StringCustomFieldRef"))
                                    //    {
                                    //        StringCustomFieldRef custom1 = (StringCustomFieldRef)so.customFieldList[k];
                                    //        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SEISSALESORDERNUMBER_SCRIPTID))
                                    //        {
                                    //            SEISmoNo = custom1.value;
                                    //            SEISmoNoInternalID = custom1.internalId;
                                    //        }
                                    //    }
                                    //    else
                                    //    if (so.customFieldList[k].ToString().Equals("sde.comNetsuiteServices.SelectCustomFieldRef"))
                                    //    {
                                    //        SelectCustomFieldRef custom1 = (SelectCustomFieldRef)so.customFieldList[k];
                                    //        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SYNCTOWMS_SCRIPTID))
                                    //        {
                                    //            syncToWMS = custom1.value.internalId;
                                    //        }
                                    //    }
                                    //}

                                    for (int discTol = 0; discTol < so.itemList.item[j].customFieldList.Count(); discTol++)
                                    {
                                        //Added #1028 -begin
                                        if (so.itemList.item[j].customFieldList[discTol].internalId.ToString().Equals(@Resource.CUSTOMFIELD_TRANS_ISBN_INTERNALID))
                                        {
                                            SelectCustomFieldRef multiRef = (SelectCustomFieldRef)so.itemList.item[j].customFieldList[discTol];
                                            if (!String.IsNullOrEmpty(multiRef.value.name))
                                            {
                                                itemTitle = multiRef.value.name;
                                            }
                                        }
                                        //Added #1028 -end

                                        if (so.itemList.item[j].customFieldList[discTol].ToString().Equals("sde.comNetsuiteServices.DoubleCustomFieldRef"))
                                        {
                                            DoubleCustomFieldRef custom1 = (DoubleCustomFieldRef)so.itemList.item[j].customFieldList[discTol];
                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_DISCTOTAL_SCRIPTID))
                                            {
                                                amount = custom1.value;
                                            }
                                            else
                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_BASEDPRICE_SCRIPTID))
                                                {
                                                    basedPrice = custom1.value;
                                                }
                                        }
                                        else
                                            if (so.itemList.item[j].customFieldList[discTol].ToString().Equals("sde.comNetsuiteServices.StringCustomFieldRef"))
                                            {
                                                StringCustomFieldRef custom1 = (StringCustomFieldRef)so.itemList.item[j].customFieldList[discTol];
                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_DISCPERCENTAGE_SCRIPTID))
                                                {
                                                    strDiscPercentage = checkIsNull(custom1.value);
                                                    if ((strDiscPercentage == "") || (strDiscPercentage == "%"))
                                                    {
                                                        nt_discount = 0;
                                                    }
                                                    else
                                                    {
                                                        strDiscPercentage = strDiscPercentage.Replace('%', ' ');
                                                        strDiscPercentage = strDiscPercentage.Replace('-', ' ');
                                                        nt_discount = Convert.ToDouble(strDiscPercentage);
                                                    }
                                                }
                                            }
                                    }
                                    //String term = checkRecordRefIsNull(so.terms);
                                    //this.DataFromNetsuiteLog.Debug("LatestSalesOrders3: " + term + "SO NO : " + so.tranId);
                                    //if (!String.IsNullOrEmpty(term))
                                    //{
                                    //    term = SplitSalesOrderTerm(term);
                                    //}

                                    var qItemIsbn = (from mi in entities.map_item
                                                     where mi.mi_item_internalID == itemInternalID
                                                     select mi.mi_item_isbn).FirstOrDefault();
                                    if (!String.IsNullOrEmpty(qItemIsbn))
                                    {
                                        itemTitle = qItemIsbn;
                                    }

                                    //ANET-37 - Sales Order - Auto stop back order -> No Back Order "nt1_nobackorder" - Brash Developer 28-Apr-2021 Start
                                    var insertSO1 = "insert into netsuite_newso (nt1_moNo,nt1_moNo_internalID,nt1_status,nt1_itemID,nt1_item_internalID,nt1_ordQty,nt1_committedQty,nt1_fulfilledQty,nt1_tax," +
                                        "nt1_rate,nt1_amount,nt1_customer,nt1_customer_internalID,nt1_SEIS_moNo,nt1_SEIS_moNo_internalID,nt1_subsidiary,nt1_createdDate,nt1_rangeTo,nt1_synctowms,nt1_discount," +
                                        "nt1_custID,nt1_addressee,nt1_deliveryAdd,nt1_deliveryAdd2,nt1_deliveryAdd3,nt1_postCode,nt1_contactPerson,nt1_phone,nt1_country, " +
                                        "nt1_billingAddressee,nt1_billingAdd,nt1_billingAdd2,nt1_billingAdd3,nt1_billingPostcode,nt1_billingContactPerson,nt1_billingPhone, " +
                                        "nt1_shipMethod,nt1_creditTerm,nt1_basedprice,nt1_pricelevel,nt1_memo,nt1_ponumber,nt1_itemLine,nt1_discountItem_internalID,nt1_podate,nt1_forwarderTo,nt1_forwarderLabel,nt1_forwarderAddressee," +
                                        "nt1_forwarderAdd1,nt1_forwarderAdd2,nt1_forwarderAdd3,nt1_forwarderAttention,nt1_forwarderState,nt1_forwarderPostcode,nt1_forwarderCity,nt1_forwarderCountry,nt1_forwarderPhone," +
                                        "nt1_forwarderInternalID,nt1_pricelevel_InternalID,nt1_sodate,nt1_closed,nt1_businessChannel_internalID, nt1_customer_booked , nt1_credit_hold, nt1_nobackorder ) values (" +
                                        "'" + moNo + "','" + moNoInternalID + "','" + moNoStatus + "','" + itemTitle + "','" + itemInternalID + "','" + ordQty + "','" + committedQty + "','" + fulfilledQty + "','" + tax + "'," +
                                        "'" + rate + "','" + amount + "','" + customer + "','" + customerInternalID + "','" + SEISmoNo + "','" + SEISmoNoInternalID + "','" + subsidiary.ToUpper() + "'," +
                                        "'" + createdDate + "','" + rangeTo + "','" + syncToWMS + "','" + nt_discount + "','" + listCust[i].custID + "','" + checkIsNull(listCust[i].addressee).Replace("'", "''") + "'," +
                                        "'" + checkIsNull(listCust[i].deliveryAdd).Replace("'", "''") + "','" + checkIsNull(listCust[i].deliveryAdd2).Replace("'", "''") + "'," +
                                        "'" + checkIsNull(listCust[i].deliveryAdd3).Replace("'", "''") + "','" + checkIsNull(listCust[i].postCode).Replace("'", "''").Replace(" ", "") + "','" + checkIsNull(listCust[i].contactPerson).Replace("'", "''") + "'," +
                                        "'" + checkIsNull(listCust[i].phone).Replace("'", "''") + "','" + checkIsNull(listCust[i].country).Replace("'", "''") + "'," +
                                        "'" + checkIsNull(listCust[i].billingAddressee).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingAdd).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingAdd2).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingAdd3).Replace("'", "''") + "', " +
                                        "'" + checkIsNull(listCust[i].billingPostcode).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingContactPerson).Replace("'", "''") + "','" + checkIsNull(listCust[i].billingPhone).Replace("'", "''") + "', " +
                                        "'" + checkRecordRefIsNull(so.shipMethod) + "','" + term + "','" + basedPrice + "','" + priceLevel + "','" + checkIsNull(memo).Replace("'", "''") + "','" + checkIsNull(ponumber).Replace("'", "''") + "', " +
                                        "'" + itemLine + "','" + discItemInternalID + "','" + checkIsNull(poDate).Replace("'", "''") + "','" + checkIsNull(forwTo).Replace("'", "''") + "','" + checkIsNull(forwLabel).Replace("'", "''") + "' " +
                                        ",'" + checkIsNull(forwAddressee).Replace("'", "''") + "','" + checkIsNull(forwAdd1).Replace("'", "''") + "','" + checkIsNull(forwAdd2).Replace("'", "''") + "' " +
                                        ",'" + checkIsNull(forwAdd3).Replace("'", "''") + "','" + checkIsNull(forwAttention).Replace("'", "''") + "','" + checkIsNull(forwState).Replace("'", "''") + "' " +
                                        ",'" + checkIsNull(forwPostcode).Replace("'", "''") + "','" + checkIsNull(forwCity).Replace("'", "''") + "','" + checkIsNull(forwCountry).Replace("'", "''") + "' " +
                                        ",'" + checkIsNull(forwPhone).Replace("'", "''") + "','" + checkIsNull(forwInternalID).Replace("'", "''") + "','" + checkIsNull(priceLevelInternalID).Replace("'", "''") + "','" + checkIsNull(soDate).Replace("'", "''") + "','" + isClosed + "','" + checkIsNull(LOB).Replace("'", "''") +
                                        "','" + custBooking + "','" + creditHold + "','" + checkIsNull(noBackOrder).Replace("'", "''") + "')";
                                    this.DataFromNetsuiteLog.Debug("LatestSalesOrders3: " + insertSO1);
                                    entities.Database.ExecuteSqlCommand(insertSO1);
                                }

                                Int32 rowCount = i + 1;
                                String _refno = "NETSUITE.LATEST-SO.SELECT." + r.rn_rangeFrom + "-" + r.rn_rangeTo;
                                var insertTask = "insert into requestnetsuite_task (rnt_task, rnt_description, rnt_refNO, rnt_jobID, rnt_status, rnt_createdDate, " +
                                "rnt_seqNO, rnt_createdFromInternalID, rnt_nsInternalId, rnt_updatedDate) values ('SELECT', '" + r.rn_sche_transactionType + "', '" + _refno + "', '" + r.rn_jobID + "'," +
                                "'TRUE', '" + convertDateToString(DateTime.Now) + "', '" + rowCount + "','', '" + moNoInternalID + "', '" + convertDateToString(DateTime.Now) + "')";
                                this.DataFromNetsuiteLog.Debug("LatestSalesOrders3: " + insertTask);
                                entities.Database.ExecuteSqlCommand(insertTask);
                            }

                            var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                                "where rn_jobID = '" + r.rn_jobID + "'";
                            this.DataFromNetsuiteLog.Debug("LatestSalesOrders3: " + updateRequestNetsuite);
                            entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                            scope1.Complete();
                            status = true;
                        }
                        catch (Exception ex)
                        {
                            this.DataFromNetsuiteLog.Error("LatestSalesOrders3 Exception: " + ex.ToString());
                            status = false;
                        }
                    }
                    else
                    {
                        var updateRequestNetsuite = "update requestnetsuite set rn_status='NO-DATA', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                            "where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("LatestSalesOrders3: " + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                        scope1.Complete();
                    }
                }
            }
            return status;
        }
        //To update committed qty in newso - WY--20.JAN.20145
        private Boolean UpdSalesOrderCommittedQty(sdeEntities entities, RequestNetsuiteEntity r)
        {
            this.DataFromNetsuiteLog.Info("UpdSalesOrderCommittedQty: Pulling sales orders ********");

            //TBA
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            DataCenterAwareNetSuiteService netsuiteService = new DataCenterAwareNetSuiteService(account);

            List<cls_customer> listCust = new List<cls_customer>();
            Boolean isValidCust = true;

            SearchRow[] pffRecord = null;
            Boolean status = false;

            //Status netsuiteStatus = new Status();
            //service.Timeout = 1000000000;
            //service.CookieContainer = new CookieContainer();
            //ApplicationInfo appinfo = new ApplicationInfo();
            //appinfo.applicationId = @Resource.NETSUITE_LOGIN_APPLICATIONID;
            //service.applicationInfo = appinfo;

            //Passport passport = new Passport();
            //passport.account = @Resource.NETSUITE_LOGIN_ACCOUNT;
            //passport.email = @Resource.NETSUITE_LOGIN_EMAIL;

            //RecordRef role = new RecordRef();
            //role.internalId = @Resource.NETSUITE_LOGIN_ROLE_INTERNALID;

            //passport.role = role;
            ////kang get netsuite password from DB
            ////passport.password = @Resource.NETSUITE_LOGIN_PASSWORD;
            //passport.password = getNetsuitePassword(@Resource.NETSUITE_LOGIN_EMAIL);

            //netsuiteStatus = service.login(passport).status;
            //Boolean loginStatus = netsuiteStatus.isSuccess;
            //TBA
            ItemSearchBasic basic = new ItemSearchBasic()
            {
                internalId = new SearchMultiSelectField()
                {
                    @operator = SearchMultiSelectFieldOperator.anyOf,
                    operatorSpecified = true,
                    searchValue = new RecordRef[] {
                    new RecordRef() {
                    internalId = "14943"
                         }
                    }
                }
            };

            netsuiteService.Timeout = 1000000000;
            netsuiteService.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();

            //  appinfo.applicationId = appID;
            netsuiteService.applicationInfo = appinfo;
            string loginEmail = "";
            loginEmail = @Resource.NETSUITE_LOGIN_EMAIL;
            tokenId = @Resource.ASIA_WEBSERVICE_TOKEN_ID;
            tokenSecret = @Resource.ASIA_WEBSERVICE_TOKEN_SECRET;

            Boolean loginStatus = false;
            try
            {
                Console.WriteLine("Success");
                netsuiteService.tokenPassport = createTokenPassport();
                SearchResult status1 = netsuiteService.search(basic);
                if (status1.status.isSuccess == true)
                {
                    loginStatus = true;
                }
                else
                {
                    loginStatus = false;
                }
            }
            catch (Exception ex)
            {
                loginStatus = false;
                this.DataFromNetsuiteLog.Fatal("SOFulfillmentUpdate: Login Netsuite failed. Exception : " + ex.ToString());

            }
            //


            if (loginStatus == true)
            {
                this.DataFromNetsuiteLog.Debug("UpdSalesOrderCommittedQty: Login Netsuite success.");
                this.DataFromNetsuiteLog.Info("UpdSalesOrderCommittedQty: Retrieving sales order every 2 hours from Netsuite.");

                //TBA
                netsuiteService.tokenPassport = createTokenPassport();
                AsyncResult pffResponse = netsuiteService.getAsyncResult(r.rn_jobID, 1);

                AsyncSearchResult salesOrderSearchResult = (AsyncSearchResult)pffResponse;
                pffRecord = salesOrderSearchResult.searchResult.searchRowList;

                try
                {
                    //netsuiteStatus = (service.logout()).status;
                    //if (netsuiteStatus.isSuccess == true)
                    //{
                    //    this.DataFromNetsuiteLog.Debug("UpdSalesOrderCommittedQty: Logout Netsuite success.");
                    //}
                    //else
                    //{
                    //    this.DataFromNetsuiteLog.Error("UpdSalesOrderCommittedQty: Logout Netsuite failed.");
                    //}
                }
                catch (Exception ex)
                {
                    if (ex.Message.Contains("a session at a time"))
                    {
                        this.DataFromNetsuiteLog.Debug("UpdSalesOrderCommittedQty Logout Exception: " + ex.ToString());
                    }
                    else
                    {
                        this.DataFromNetsuiteLog.Error("UpdSalesOrderCommittedQty Logout Exception: " + ex.ToString());
                    }
                    isValidCust = false;
                }
            }
            else
            {
                this.DataFromNetsuiteLog.Fatal("UpdSalesOrderCommittedQty: Login Netsuite failed.");
                isValidCust = false;
            }

            if (isValidCust == true)
            {
                var option = new TransactionOptions
                {
                    IsolationLevel = IsolationLevel.RepeatableRead,
                    Timeout = TimeSpan.FromSeconds(2400)
                };

                using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    if (pffRecord != null && pffRecord.Count() > 0)
                    {
                        this.DataFromNetsuiteLog.Info("UpdSalesOrderCommittedQty: " + pffRecord.Count() + " records is retrieved.");
                        try
                        {
                            String rangeTo = convertDateToString(Convert.ToDateTime(r.rn_rangeTo));
                            String createdDate = convertDateToString(DateTime.Now);
                            for (int i = 0; i < pffRecord.Length; i++)
                            {

                                TransactionSearchRow so = (TransactionSearchRow)pffRecord[i];
                                String moNo = so.basic.tranId[0].searchValue;
                                String moNoInternalID = so.basic.internalId[0].searchValue.internalId;
                                Int32 itemLine = Convert.ToInt32(so.basic.line[0].searchValue);

                                if (itemLine > 0)
                                {
                                    if (so.basic.item != null && so.basic.quantity != null && so.basic.closed != null)
                                    {
                                        String itemInternalID = so.basic.item[0].searchValue.internalId;
                                        Double committedQty = so.basic.quantity[0].searchValue;
                                        string isClosed = "N";
                                        string fasOrder = "N";  //FAS order 09/10/2018 - Mohan

                                        if (so.basic.closed[0].searchValue)
                                        {
                                            isClosed = "Y";
                                        }
                                        String custBooking = "N";
                                        for (int custAtt = 0; custAtt < so.basic.customFieldList.Count(); custAtt++)
                                        {
                                            String customFieldStr = so.basic.customFieldList[custAtt].ToString();
                                            switch (customFieldStr)
                                            {
                                                case "sde.comNetsuiteServices.SearchColumnBooleanCustomField":
                                                    SearchColumnBooleanCustomField customBool = (SearchColumnBooleanCustomField)so.basic.customFieldList[custAtt];
                                                    if (customBool.scriptId.Equals(@Resource.CUSTOMFIELD_CUST_BOOKING_SCRIPTID))
                                                    {
                                                        if (customBool.searchValue)
                                                        {
                                                            custBooking = "Y";
                                                        }
                                                    } //FAS order 09/10/2018 - Mohan

                                                    else if (customBool.scriptId.Equals(@Resource.CUSTOMFIELD_FAS_ORDER_INTERNAL_SCRIPTID))
                                                    {
                                                        if (customBool.searchValue)
                                                        {
                                                            fasOrder = "Y";
                                                        }
                                                    }
                                                    //FAS order 09/10/2018 - Mohan end
                                                    break;
                                            }
                                        }
                                        //if (fasOrder.Equals("N"))
                                        //{
                                        var updateSO = "update netsuite_newso set nt1_ordQty = '" + committedQty + "', nt1_closed = '" + isClosed + "', nt1_customer_booked = '" + custBooking + "' " +
                                                " where nt1_moNo_internalID = '" + moNoInternalID + "' and nt1_itemLine = '" + itemLine + "' " +
                                                " and nt1_item_internalID = '" + itemInternalID + "'";
                                        this.DataFromNetsuiteLog.Debug("UpdSalesOrderCommittedQty: " + updateSO);
                                        entities.Database.ExecuteSqlCommand(updateSO);
                                        //}
                                    }
                                }
                                else
                                {
                                    Int32 rowCount = i + 1;
                                    String _refno = "NETSUITE.LATEST-SO.SELECT." + r.rn_rangeFrom + "-" + r.rn_rangeTo;
                                    var insertTask = "insert into requestnetsuite_task (rnt_task, rnt_description, rnt_refNO, rnt_jobID, rnt_status, rnt_createdDate, " +
                                    "rnt_seqNO, rnt_createdFromInternalID, rnt_nsInternalId, rnt_updatedDate) values ('SELECT', '" + r.rn_sche_transactionType + "', '" + _refno + "', '" + r.rn_jobID + "'," +
                                    "'TRUE', '" + convertDateToString(DateTime.Now) + "', '" + rowCount + "','', '" + moNoInternalID + "', '" + convertDateToString(DateTime.Now) + "')";
                                    this.DataFromNetsuiteLog.Debug("UpdSalesOrderCommittedQty: " + insertTask);
                                    entities.Database.ExecuteSqlCommand(insertTask);
                                }

                            }




                            var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                                "where rn_jobID = '" + r.rn_jobID + "'";
                            this.DataFromNetsuiteLog.Debug("UpdSalesOrderCommittedQty: " + updateRequestNetsuite);
                            entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                            //Change the insert for syncso after update committed quantity
                            var insertRequestNetsuite = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status,rn_updatedDate,rn_rangeFrom,rn_rangeTo) values " +
                                "('UPD-STATUS.NS-LATEST SALES ORDER','" + convertDateToString(DateTime.Now) + "','START','" + convertDateToString(DateTime.Now) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeFrom)) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                            //"('UPD-STATUS.NS-LATEST SALES ORDER','" + convertDateToString(DateTime.Now) + "','DEBUG','" + convertDateToString(DateTime.Now) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeFrom)) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                            this.DataFromNetsuiteLog.Debug("UpdSalesOrderCommittedQty: " + insertRequestNetsuite);
                            entities.Database.ExecuteSqlCommand(insertRequestNetsuite);

                            scope1.Complete();
                            status = true;
                        }
                        catch (Exception ex)
                        {
                            this.DataFromNetsuiteLog.Error("UpdSalesOrderCommittedQty Exception: " + ex.ToString());
                            status = false;
                        }
                    }
                    else
                    {
                        var updateRequestNetsuite = "update requestnetsuite set rn_status='NO-DATA', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                            "where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("UpdSalesOrderCommittedQty: " + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                        scope1.Complete();
                    }
                }
            }
            return status;
        }
        #region old UpdSalesOrderCommittedQty
        /* private Boolean UpdSalesOrderCommittedQty(sdeEntities entities, RequestNetsuiteEntity r)
        {
            this.DataFromNetsuiteLog.Info("UpdSalesOrderCommittedQty: Pulling sales orders ********");
             
            List<cls_customer> listCust = new List<cls_customer>(); 
            Boolean isValidCust = true;

            Record[] pffRecord = null;
            Boolean status = false;

            Status netsuiteStatus = new Status();
            service.Timeout = 1000000000;
            service.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();
            appinfo.applicationId = @Resource.NETSUITE_LOGIN_APPLICATIONID;
            service.applicationInfo = appinfo;

            Passport passport = new Passport();
            passport.account = @Resource.NETSUITE_LOGIN_ACCOUNT;
            passport.email = @Resource.NETSUITE_LOGIN_EMAIL;

            RecordRef role = new RecordRef();
            role.internalId = @Resource.NETSUITE_LOGIN_ROLE_INTERNALID;

            passport.role = role;
            //kang get netsuite password from DB
            //passport.password = @Resource.NETSUITE_LOGIN_PASSWORD;
            passport.password = getNetsuitePassword(@Resource.NETSUITE_LOGIN_EMAIL);

            netsuiteStatus = service.login(passport).status;
            Boolean loginStatus = netsuiteStatus.isSuccess;
            if (loginStatus == true)
            {
                this.DataFromNetsuiteLog.Debug("UpdSalesOrderCommittedQty: Login Netsuite success.");
                this.DataFromNetsuiteLog.Info("UpdSalesOrderCommittedQty: Retrieving sales order every 2 hours from Netsuite.");

                AsyncResult pffResponse = service.getAsyncResult(r.rn_jobID, 1);
                AsyncSearchResult salesOrderSearchResult = (AsyncSearchResult)pffResponse;
                pffRecord = salesOrderSearchResult.searchResult.recordList;

                try
                {
                    netsuiteStatus = (service.logout()).status;
                    if (netsuiteStatus.isSuccess == true)
                    {
                        this.DataFromNetsuiteLog.Debug("UpdSalesOrderCommittedQty: Logout Netsuite success.");
                    }
                    else
                    {
                        this.DataFromNetsuiteLog.Error("UpdSalesOrderCommittedQty: Logout Netsuite failed.");
                    } 
                }
                catch (Exception ex)
                {
                    if (ex.Message.Contains("a session at a time"))
                    {
                        this.DataFromNetsuiteLog.Debug("UpdSalesOrderCommittedQty Logout Exception: " + ex.ToString());
                    }
                    else
                    {
                        this.DataFromNetsuiteLog.Error("UpdSalesOrderCommittedQty Logout Exception: " + ex.ToString());
                    }
                    isValidCust = false;
                }
            }
            else
            {
                this.DataFromNetsuiteLog.Fatal("UpdSalesOrderCommittedQty: Login Netsuite failed.");
                isValidCust = false;
            }

            if (isValidCust == true)
            { 
                var option = new TransactionOptions
                {
                    IsolationLevel = IsolationLevel.RepeatableRead,
                    Timeout = TimeSpan.FromSeconds(2400)
                };
                 
                using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    if (pffRecord != null && pffRecord.Count() > 0)
                    {
                        this.DataFromNetsuiteLog.Info("UpdSalesOrderCommittedQty: " + pffRecord.Count() + " records is retrieved.");
                        try
                        {
                            String rangeTo = convertDateToString(Convert.ToDateTime(r.rn_rangeTo));
                            String createdDate = convertDateToString(DateTime.Now);

                            for (int i = 0; i < pffRecord.Length; i++)
                            {
                                SalesOrder so = (SalesOrder)pffRecord[i];
                                String moNo = so.tranId;
                                String moNoInternalID = so.internalId; 

                                for (int j = 0; j < so.itemList.item.Count(); j++)
                                { 
                                    Int32 itemLine = Convert.ToInt32(so.itemList.item[j].line);  
                                    String itemInternalID = so.itemList.item[j].item.internalId;
                                    Double committedQty = so.itemList.item[j].quantity;

                                    var updateSO = "update netsuite_newso set nt1_ordQty = '" + committedQty + "' where nt1_moNo_internalID = '" + moNoInternalID + "' and nt1_itemLine = '" + itemLine + "' " +
                                                   " and nt1_item_internalID = '" + itemInternalID + "'";
                                    this.DataFromNetsuiteLog.Debug("UpdSalesOrderCommittedQty: " + updateSO);
                                    entities.Database.ExecuteSqlCommand(updateSO);
                                }

                                Int32 rowCount = i + 1;
                                String _refno = "NETSUITE.LATEST-SO.SELECT." + r.rn_rangeFrom + "-" + r.rn_rangeTo;
                                var insertTask = "insert into requestnetsuite_task (rnt_task, rnt_description, rnt_refNO, rnt_jobID, rnt_status, rnt_createdDate, " +
                                "rnt_seqNO, rnt_createdFromInternalID, rnt_nsInternalId, rnt_updatedDate) values ('SELECT', '" + r.rn_sche_transactionType + "', '" + _refno + "', '" + r.rn_jobID + "'," +
                                "'TRUE', '" + convertDateToString(DateTime.Now) + "', '" + rowCount + "','', '" + moNoInternalID + "', '" + convertDateToString(DateTime.Now) + "')";
                                this.DataFromNetsuiteLog.Debug("UpdSalesOrderCommittedQty: " + insertTask);
                                entities.Database.ExecuteSqlCommand(insertTask);
                            }

                            var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                                "where rn_jobID = '" + r.rn_jobID + "'";
                            this.DataFromNetsuiteLog.Debug("UpdSalesOrderCommittedQty: " + updateRequestNetsuite);
                            entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
 
                            //Change the insert for syncso after update committed quantity
                            var insertRequestNetsuite = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status,rn_updatedDate,rn_rangeFrom,rn_rangeTo) values " +
                                "('UPD-STATUS.NS-LATEST SALES ORDER','" + convertDateToString(DateTime.Now) + "','START','" + convertDateToString(DateTime.Now) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeFrom)) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                //"('UPD-STATUS.NS-LATEST SALES ORDER','" + convertDateToString(DateTime.Now) + "','DEBUG','" + convertDateToString(DateTime.Now) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeFrom)) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                            this.DataFromNetsuiteLog.Debug("UpdSalesOrderCommittedQty: " + insertRequestNetsuite);
                            entities.Database.ExecuteSqlCommand(insertRequestNetsuite);

                            scope1.Complete();
                            status = true;
                        }
                        catch (Exception ex)
                        {
                            this.DataFromNetsuiteLog.Error("UpdSalesOrderCommittedQty Exception: " + ex.ToString());
                            status = false;
                        }
                    }
                    else
                    {
                        var updateRequestNetsuite = "update requestnetsuite set rn_status='NO-DATA', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                            "where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("UpdSalesOrderCommittedQty: " + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite); 
                        scope1.Complete(); 
                    } 
                }
            }
            return status;
        } */
        #endregion

        //UPD-STATUS.NS-LATEST SALES ORDER
        private Boolean SalesOrdersNewJob(sdeEntities entities, Int32 requestNetsuiteID, DateTime rangeFrom, DateTime rangeTo)
        {
            //Execute once a day. Copy latest/modified TRADE sales order data from netsuite_newso to netsuite_syncso
            this.DataFromNetsuiteLog.Info("SalesOrdersNewJob: Validate sales orders ********");

            Boolean status = false;
            String createdDate = convertDateToString(DateTime.Now);
            String convertRangeFrom = convertDateToString(rangeFrom);
            String convertRangeTo = convertDateToString(rangeTo);


            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(2400)
            };

            var query7 = "update requestnetsuite set rn_status = 'PULLING' where rn_sche_transactiontype  = 'UPD-STATUS.NS-LATEST SALES ORDER' and rn_status = 'START' ";
            this.DataFromNetsuiteLog.Debug("SalesOrdersNewJob: " + query7);
            entities.Database.ExecuteSqlCommand(query7);


            //using (TransactionScope scope1 = new TransactionScope()) 

            try
            {
                //MySqlConnection mysqlCon = new MySqlConnection("SERVER=54.251.36.231;DATABASE=sde;UID=root;PASSWORD=root;");
                string connStr = ConfigurationManager.ConnectionStrings["mysql2"].ConnectionString;
                MySqlConnection mysqlCon = new MySqlConnection(connStr);
                this.DataFromNetsuiteLog.Debug("SalesOrdersNewJob: initiate DB connection");
                mysqlCon.Open();

                #region delete SO which has more than 2 decimal places for nt1_rate(price)
                var query4 = "SELECT nt1_moNo_internalID,nt1_mono FROM netsuite_newso WHERE nt1_status IN ('PENDING FULFILLMENT','PENDING BILLING/PARTIALLY FULFILLED','PARTIALLY FULFILLED') " +
                             " AND LENGTH(SUBSTRING(CAST(nt1_rate AS CHAR),INSTR(CAST(nt1_rate AS CHAR),'.'),4)) > 3 GROUP BY nt1_moNo_internalID, nt1_mono ";
                MySqlCommand cmd4 = new MySqlCommand(query4, mysqlCon);
                MySqlDataReader dtr4 = cmd4.ExecuteReader();


                this.DataFromNetsuiteLog.Debug("SalesOrdersNewJob: DELETE SO which has more than 2 decimal places for nt1_rate(price) ");
                List<DuplicateItemInSO> duplicateList = new List<DuplicateItemInSO>();
                while (dtr4.Read())
                {
                    DuplicateItemInSO duplicate = new DuplicateItemInSO();
                    duplicate.moNoInternalID = (dtr4.GetValue(0) == DBNull.Value) ? String.Empty : dtr4.GetString(0);
                    duplicate.moNo = (dtr4.GetValue(1) == DBNull.Value) ? String.Empty : dtr4.GetString(1);
                    duplicateList.Add(duplicate);

                    this.DataFromNetsuiteLog.Debug("SalesOrdersNewJob: DuplicateItemInSO ");
                }
                cmd4.Dispose();
                dtr4.Close();
                mysqlCon.Close();

                for (int i = 0; i < duplicateList.Count(); i++)
                {
                    var query5 = "delete from netsuite_newso where nt1_moNo='" + duplicateList[i].moNo + "'";
                    this.DataFromNetsuiteLog.Debug(query5);
                    this.DataFromNetsuiteLog.Fatal("This Sales Order:" + duplicateList[i].moNo + " " + duplicateList[i].moNoInternalID + " having order rate more than 2 decimal places.");
                    entities.Database.ExecuteSqlCommand(query5);

                    this.DataFromNetsuiteLog.Debug("SalesOrdersNewJob: delete DuplicateItemInSO ");
                }
                #endregion

                String strRangeTo = convertDateToString(Convert.ToDateTime(rangeTo));

                this.DataFromNetsuiteLog.Debug("SalesOrdersNewJob: get bin transfer list from DB ");

                var query1 = "SELECT so1.nt1_seqID, so1.nt1_moNo,so1.nt1_moNo_internalID, so1.nt1_status,so1.nt1_itemID," +//4
"so1.nt1_item_internalID, sum(so1.nt1_committedQty) as nt1_committedQty,sum(so1.nt1_fulfilledQty) as nt1_fulfilledQty, " +//7
"so1.nt1_rangeTo, " +//8
"if(so2.nt2_qtyForWMS is null,0,so2.nt2_qtyForWMS) as nt2_qtyForWMS, " +//9
"if(so2.nt2_fulfilledQty is null,0,so2.nt2_fulfilledQty) as nt2_fulfilledQty, " +//10
"(SUM(so1.nt1_ordQty) - if(so2.nt2_qtyForWMS is null,0,so2.nt2_qtyForWMS)) as calc_qtyForWMS, " +//11
"(SUM(so1.nt1_ordQty) - SUM(so1.nt1_fulfilledQty)) as calc_difference, " +//12
"so1.nt1_ordQty, so1.nt1_tax, so1.nt1_discount, so1.nt1_rate, so1.nt1_amount, " +//17
"so1.nt1_customer, so1.nt1_customer_internalID, so1.nt1_SEIS_moNo,so1.nt1_SEIS_moNo_internalID, so1.nt1_subsidiary, " +//22
"so1.nt1_custID,so1.nt1_addressee,so1.nt1_deliveryAdd,so1.nt1_deliveryAdd2,so1.nt1_deliveryAdd3,so1.nt1_postCode,so1.nt1_contactPerson,so1.nt1_phone,so1.nt1_country, " + //31
"so1.nt1_billingAddressee,so1.nt1_billingAdd,so1.nt1_billingAdd2,so1.nt1_billingAdd3,so1.nt1_billingPostcode,so1.nt1_billingContactPerson,so1.nt1_billingPhone, " + //38
"so1.nt1_shipMethod,so1.nt1_creditTerm,so1.nt1_basedprice,so1.nt1_pricelevel, " + //42
"nt1_sodate,nt1_businessChannel_internalID,nt1_customer_booked, so1.nt1_is_fas, so1.nt1_teacher_name, so1.nt1_class_name, so1.nt1_credit_hold " + //45
"FROM view_newso so1 " +
"left join " +
"(SELECT nt2_seqID, nt2_moNo_internalID, nt2_item_internalID  " +
",sum(nt2_qtyForWMS) as nt2_qtyForWMS, " +
"sum(nt2_unfulfilledQty) as nt2_unfulfilledQty, " +
"sum(nt2_fulfilledQty) as nt2_fulfilledQty " +
"FROM netsuite_syncso " +
"group by nt2_moNo_internalID,nt2_item_internalID) so2 " +
"on so1.nt1_moNo_internalID = so2.nt2_moNo_internalID " +
"and so1.nt1_item_internalID = so2.nt2_item_internalID " +
"where so1.nt1_status in ('PENDING FULFILLMENT','PENDING BILLING/PARTIALLY FULFILLED','PARTIALLY FULFILLED') " +
                    //"where so1.nt1_status in ('PENDING FULFILLMENT') " +
"and so1.nt1_subsidiary = '" + @Resource.SUBSIDIARY_NAME_MY + "' and so1.nt1_credit_hold =  0 " +
"and so1.nt1_synctowms = '1' " + //Change filter when insert into netsuite_syncso - WY-25.AUG.2014
"and so1.nt1_rangeTo <= '" + strRangeTo + "' " + //Filtered by rangeTo - WY-28.AUG.2014
                    //"and so1.nt1_moNo IN ('SO-MY0030727','SO-MY0030728','SO-MY0030729','SO-MY0030730','SO-MY0030731','SO-MY0030732','SO-MY0030734','SO-MY0030733','SO-MY0030735','SO-MY0030736','SO-MY0030738','SO-MY0030739','SO-MY0030740','SO-MY0030741','SO-MY0030742','SO-MY0030743','SO-MY0030744','SO-MY0030745','SO-MY0030746','SO-MY0030747','SO-MY0030748','SO-MY0030749','SO-MY0030750') " +//Temp
"group by so1.nt1_moNo_internalID, so1.nt1_item_internalID " +
"having (calc_qtyForWMS > 0 ) and nt1_ordQty > 0 and calc_difference>0";

                #region no use
                /*
                    var query1 = "SELECT so1.nt1_seqID, so1.nt1_moNo,so1.nt1_moNo_internalID, so1.nt1_status,so1.nt1_itemID," +//4
                    "so1.nt1_item_internalID, sum(so1.nt1_committedQty) as nt1_committedQty,sum(so1.nt1_fulfilledQty) as nt1_fulfilledQty, " +//7
                    "so1.nt1_rangeTo, " +//8
                    "if(so2.nt2_qtyForWMS is null,0,so2.nt2_qtyForWMS) as nt2_qtyForWMS, " +//9
                    "if(so2.nt2_fulfilledQty is null,0,so2.nt2_fulfilledQty) as nt2_fulfilledQty, " +//10
                    "(so1.nt1_committedQty) - (if(so2.nt2_qtyForWMS is null,0,so2.nt2_qtyForWMS) + if(so2.nt2_unfulfilledQty is null,0,so2.nt2_unfulfilledQty) - (so1.nt1_fulfilledQty)) as calc_qtyForWMS, " +//11
                    "((so1.nt1_committedQty + so1.nt1_fulfilledQty) - (if(so2.nt2_qtyForWMS is null,0,so2.nt2_qtyForWMS) + if(so2.nt2_unfulfilledQty is null,0,so2.nt2_unfulfilledQty) + if(so2.nt2_fulfilledQty is null,0,so2.nt2_fulfilledQty))) as calc_difference, " +//12
                    "so1.nt1_ordQty, so1.nt1_tax, so1.nt1_discount, so1.nt1_rate, so1.nt1_amount, " +//17
                    "so1.nt1_customer, so1.nt1_customer_internalID, so1.nt1_SEIS_moNo,so1.nt1_SEIS_moNo_internalID, so1.nt1_subsidiary, " +//22
                    "so1.nt1_custID,so1.nt1_addressee,so1.nt1_deliveryAdd,so1.nt1_deliveryAdd2,so1.nt1_deliveryAdd3,so1.nt1_postCode,so1.nt1_contactPerson,so1.nt1_phone,so1.nt1_country, " + //31
                    "so1.nt1_billingAddressee,so1.nt1_billingAdd,so1.nt1_billingAdd2,so1.nt1_billingAdd3,so1.nt1_billingPostcode,so1.nt1_billingContactPerson,so1.nt1_billingPhone, " + //38
                    "so1.nt1_shipMethod,so1.nt1_creditTerm,so1.nt1_basedprice,so1.nt1_pricelevel " + //42
                    "FROM view_newso so1 " +
                    "left join " +
                    "(SELECT nt2_seqID, nt2_moNo_internalID, nt2_item_internalID  " +
                    ",sum(nt2_qtyForWMS) as nt2_qtyForWMS, " +
                    "sum(nt2_unfulfilledQty) as nt2_unfulfilledQty, " +
                    "sum(nt2_fulfilledQty) as nt2_fulfilledQty " +
                    "FROM netsuite_syncso " +
                    "group by nt2_moNo_internalID,nt2_item_internalID) so2 " +
                    "on so1.nt1_moNo_internalID = so2.nt2_moNo_internalID " +
                    "and so1.nt1_item_internalID = so2.nt2_item_internalID " +
                    "where so1.nt1_status in ('PENDING FULFILLMENT','PENDING BILLING/PARTIALLY FULFILLED','PARTIALLY FULFILLED') " +
                    //"where so1.nt1_status in ('PENDING FULFILLMENT') " +
                    "and so1.nt1_subsidiary = '"+ @Resource.SUBSIDIARY_NAME_MY +"' " +
                    "and so1.nt1_synctowms = '1' " + //Change filter when insert into netsuite_syncso - WY-25.AUG.2014
                    "and so1.nt1_rangeTo <= '" + strRangeTo + "' " + //Filtered by rangeTo - WY-28.AUG.2014
                    //"and so1.nt1_moNo IN ('SO-MY00127','SO-MY00128','SO-MY00129','SO-MY00130')" +//Temp
                    "group by so1.nt1_moNo_internalID, so1.nt1_item_internalID " +
                    "having (calc_qtyForWMS > 0  or calc_difference > 0) and nt1_committedQty > 0";
                     */
                #endregion
                string connStrGetList = ConfigurationManager.ConnectionStrings["mysql2"].ConnectionString;
                MySqlConnection mysqlConGetList = new MySqlConnection(connStrGetList);
                this.DataFromNetsuiteLog.Debug("SalesOrdersNewJob: initiate DB connection");
                mysqlConGetList.Open();



                MySqlCommand cmdGetList = new MySqlCommand(query1, mysqlConGetList);
                //extend timeout to 60 seconds
                cmdGetList.CommandTimeout = 60;
                MySqlDataReader dtr = cmdGetList.ExecuteReader();

                this.DataFromNetsuiteLog.Debug("SalesOrdersNewJob:  DB  ");




                List<TempSO2> so2List = new List<TempSO2>();

                while (dtr.Read())
                {

                    this.DataFromNetsuiteLog.Debug("SalesOrdersNewJob:  go thru list   ");

                    TempSO2 so2 = new TempSO2();

                    so2.seqID = dtr.GetInt32(0);
                    so2.moNo = (dtr.GetValue(1) == DBNull.Value) ? String.Empty : dtr.GetString(1);
                    this.DataFromNetsuiteLog.Debug("SalesOrdersNewJob:  go thru list   ==> " + so2.moNo);
                    so2.moNoInternalID = (dtr.GetValue(2) == DBNull.Value) ? String.Empty : dtr.GetString(2);
                    so2.status = (dtr.GetValue(3) == DBNull.Value) ? String.Empty : dtr.GetString(3);
                    so2.itemID = (dtr.GetValue(4) == DBNull.Value) ? String.Empty : dtr.GetString(4);
                    so2.itemInternalID = (dtr.GetValue(5) == DBNull.Value) ? String.Empty : dtr.GetString(5);
                    so2.qtyForWMS = dtr.GetInt32(11);//dtr.GetInt32(11);
                    so2.fulFilledQty = dtr.GetInt32(12);
                    so2.ordQty = dtr.GetInt32(13);
                    so2.tax = dtr.GetDouble(14);
                    so2.discount = dtr.GetDouble(15);
                    so2.rate = dtr.GetDouble(16);
                    so2.amount = dtr.GetDouble(17);
                    so2.customer = (dtr.GetValue(18) == DBNull.Value) ? String.Empty : dtr.GetString(18);
                    so2.customerInternalID = (dtr.GetValue(19) == DBNull.Value) ? String.Empty : dtr.GetString(19);
                    so2.SEISmoNo = (dtr.GetValue(20) == DBNull.Value) ? String.Empty : dtr.GetString(20);
                    so2.SEISmoNoInternalID = (dtr.GetValue(21) == DBNull.Value) ? String.Empty : dtr.GetString(21);
                    so2.subsidiary = (dtr.GetValue(22) == DBNull.Value) ? String.Empty : dtr.GetString(22);

                    //Move Code from SalesOrders - WY-11.SEPT.2014
                    so2.custID = (dtr.GetValue(23) == DBNull.Value) ? String.Empty : dtr.GetString(23);
                    so2.addressee = (dtr.GetValue(24) == DBNull.Value) ? String.Empty : dtr.GetString(24);
                    so2.deliveryAdd = (dtr.GetValue(25) == DBNull.Value) ? String.Empty : dtr.GetString(25);
                    so2.deliveryAdd2 = (dtr.GetValue(26) == DBNull.Value) ? String.Empty : dtr.GetString(26);
                    so2.deliveryAdd3 = (dtr.GetValue(27) == DBNull.Value) ? String.Empty : dtr.GetString(27);
                    so2.postCode = (dtr.GetValue(28) == DBNull.Value) ? String.Empty : dtr.GetString(28);
                    so2.contactPerson = (dtr.GetValue(29) == DBNull.Value) ? String.Empty : dtr.GetString(29);
                    so2.phone = (dtr.GetValue(30) == DBNull.Value) ? String.Empty : dtr.GetString(30);
                    so2.country = (dtr.GetValue(31) == DBNull.Value) ? String.Empty : dtr.GetString(31);

                    //Added Billing Address - WY-25.SEPT.2014
                    so2.billingAddressee = (dtr.GetValue(32) == DBNull.Value) ? String.Empty : dtr.GetString(32);
                    so2.billingAdd = (dtr.GetValue(33) == DBNull.Value) ? String.Empty : dtr.GetString(33);
                    so2.billingAdd2 = (dtr.GetValue(34) == DBNull.Value) ? String.Empty : dtr.GetString(34);
                    so2.billingAdd3 = (dtr.GetValue(35) == DBNull.Value) ? String.Empty : dtr.GetString(35);
                    so2.billingPostcode = (dtr.GetValue(36) == DBNull.Value) ? String.Empty : dtr.GetString(36);
                    so2.billingContactPerson = (dtr.GetValue(37) == DBNull.Value) ? String.Empty : dtr.GetString(37);
                    so2.billingPhone = (dtr.GetValue(38) == DBNull.Value) ? String.Empty : dtr.GetString(38);
                    so2.shipMethod = (dtr.GetValue(39) == DBNull.Value) ? String.Empty : dtr.GetString(39);
                    so2.creditTerm = (dtr.GetValue(40) == DBNull.Value) ? String.Empty : dtr.GetString(40);

                    //Get RRP and Based Price - WY-29.SEPT.2014
                    so2.basedPrice = dtr.GetDouble(41);
                    so2.pricelevel = (dtr.GetValue(42) == DBNull.Value) ? String.Empty : dtr.GetString(42);
                    so2.soDate = (dtr.GetValue(43) == DBNull.Value) ? String.Empty : dtr.GetString(43);
                    so2.businessChannel = (dtr.GetValue(44) == DBNull.Value) ? String.Empty : dtr.GetString(44);
                    so2.customerBooked = (dtr.GetValue(45) == DBNull.Value) ? String.Empty : dtr.GetString(45);
                    so2.isFas = (dtr.GetValue(46) == DBNull.Value) ? String.Empty : dtr.GetString(46);
                    so2.teacherName = (dtr.GetValue(47) == DBNull.Value) ? String.Empty : dtr.GetString(47);
                    so2.className = (dtr.GetValue(48) == DBNull.Value) ? String.Empty : dtr.GetString(48);
                    so2List.Add(so2);
                }
                dtr.Close();
                cmdGetList.Dispose();
                mysqlConGetList.Close();
                mysqlConGetList.Dispose();
                //mysqlCon.Open();



                //using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
                //{

                //cpng start
                //Status netsuiteStatus = new Status();
                //service.Timeout = 1000000000;
                //service.CookieContainer = new CookieContainer();
                //ApplicationInfo appinfo = new ApplicationInfo();
                //appinfo.applicationId = @Resource.NETSUITE_LOGIN_APPLICATIONID;
                //service.applicationInfo = appinfo;

                //Passport passport = new Passport();
                //passport.account = @Resource.NETSUITE_LOGIN_ACCOUNT;
                //passport.email = @Resource.NETSUITE_LOGIN_EMAIL_PULL;

                //RecordRef role = new RecordRef();
                //role.internalId = @Resource.NETSUITE_LOGIN_ROLE_INTERNALID;

                //passport.role = role;
                ////kang get netsuite password from DB
                ////passport.password = @Resource.NETSUITE_LOGIN_PASSWORD;
                //passport.password = getNetsuitePassword(@Resource.NETSUITE_LOGIN_EMAIL_PULL);

                //netsuiteStatus = service.login(passport).status;
                //TBA
                System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                DataCenterAwareNetSuiteService netsuiteService = new DataCenterAwareNetSuiteService(account);


                //TBA
                netsuiteService.Timeout = 1000000000;
                netsuiteService.CookieContainer = new CookieContainer();
                ApplicationInfo appinfo = new ApplicationInfo();
                //  appinfo.applicationId = appID;
                netsuiteService.applicationInfo = appinfo;

                string loginEmail = "";
                loginEmail = @Resource.NETSUITE_LOGIN_EMAIL_PULL;
                tokenId = @Resource.ASIA_WEBSERVICE_4_TOKEN_ID;
                tokenSecret = @Resource.ASIA_WEBSERVICE_4_TOKEN_SECRET;

                ItemSearchBasic basic = new ItemSearchBasic()
                {
                    internalId = new SearchMultiSelectField()
                    {
                        @operator = SearchMultiSelectFieldOperator.anyOf,
                        operatorSpecified = true,
                        searchValue = new RecordRef[] {
                    new RecordRef() {
                    internalId = "14943"
                         }
                    }
                    }
                };
                Boolean loginStatus = false;

                try
                {
                    Console.WriteLine("Success");
                    netsuiteService.tokenPassport = createTokenPassport();
                    SearchResult status1 = netsuiteService.search(basic);
                    if (status1.status.isSuccess == true)
                    {
                        this.DataFromNetsuiteLog.Debug("SalesOrdersNewJob: Login Netsuite success.");
                        loginStatus = true;
                    }
                    else
                    {
                        loginStatus = false;
                    }
                }
                catch (Exception ex)
                {
                    loginStatus = false;
                    this.DataFromNetsuiteLog.Fatal("SalesOrdersNewJob: Login Netsuite failed. Exception : " + ex.ToString());

                }
                //

                //Boolean loginStatus = netsuiteStatus.isSuccess;
                if (loginStatus == true)
                {
                    var soGroup = from soList in so2List
                                  orderby soList.soDate
                                  group soList by soList.moNoInternalID into so
                                  select so.ToList();

                    foreach (var soItem in soGroup)
                    {
                        RecordRef[] rref = new RecordRef[soItem.Count];
                        SearchPreferences sp = new SearchPreferences();
                        sp.bodyFieldsOnly = false;
                        netsuiteService.searchPreferences = sp;

                        ItemSearchAdvanced sotsa = new ItemSearchAdvanced();
                        ItemSearch sots = new ItemSearch();
                        ItemSearchBasic sotsb = new ItemSearchBasic();

                        SearchMultiSelectField searchItem = new SearchMultiSelectField();
                        searchItem.@operator = SearchMultiSelectFieldOperator.anyOf;
                        searchItem.operatorSpecified = true;
                        string LOB = string.Empty;
                        string custBooking = "N";
                        string is_fas = "N"; //FAS order 09/10/2018 - Mohan
                        for (int i = 0; i < soItem.Count(); i++)
                        {
                            if (soItem[i].qtyForWMS > 0)
                            {
                                RecordRef refDummy = new RecordRef();
                                refDummy.internalId = soItem[i].itemInternalID;
                                rref[i] = refDummy;
                                LOB = soItem[i].businessChannel;
                                custBooking = soItem[i].customerBooked;
                                is_fas = soItem[i].isFas;//FAS order 09/10/2018 - Mohan
                            }

                        }

                        searchItem.searchValue = rref;

                        //Use Bin Search
                        SearchBooleanField searchUseBin = new SearchBooleanField();
                        searchUseBin.searchValue = true;
                        searchUseBin.searchValueSpecified = true;

                        sotsb.internalId = searchItem;
                        sotsb.useBins = searchUseBin;
                        sots.basic = sotsb;

                        //Search Inventory Location
                        LocationSearchBasic lsb = new LocationSearchBasic();
                        SearchMultiSelectField searchLoc = new SearchMultiSelectField();
                        searchLoc.@operator = SearchMultiSelectFieldOperator.anyOf;
                        searchLoc.operatorSpecified = true;

                        RecordRef[] locationRefA = new RecordRef[1];
                        RecordRef locationRef = new RecordRef();
                        locationRef.internalId = @Resource.TRADE_DEFAULT_LOCATION;
                        locationRefA[0] = locationRef;
                        searchLoc.searchValue = locationRefA;
                        lsb.internalId = searchLoc;
                        sots.inventoryLocationJoin = lsb;

                        //Search Bin Number
                        ItemBinNumberSearchBasic ibsb = new ItemBinNumberSearchBasic();
                        SearchMultiSelectField searchBin = new SearchMultiSelectField();
                        searchBin.@operator = SearchMultiSelectFieldOperator.anyOf;
                        searchBin.operatorSpecified = true;

                        RecordRef[] binRefA = new RecordRef[1];
                        RecordRef binRef = new RecordRef();
                        //FAS order 09/10/2018 - Mohan
                        if (custBooking == "Y")
                        {
                            if (is_fas == "Y")
                            {
                                binRef.internalId = @Resource.BCAS_DEFAULT_BIN;
                            }
                            else
                            {
                                binRef.internalId = @Resource.TRADE_BOOKED_BIN;
                            }

                        }
                        else
                        {
                            if (is_fas == "Y")
                            {
                                binRef.internalId = @Resource.BCAS_DEFAULT_BIN;
                            }
                            else
                            {
                                binRef.internalId = @Resource.TRADE_DEFAULT_BIN;
                            }
                        }

                        binRefA[0] = binRef;
                        searchBin.searchValue = binRefA;
                        ibsb.binNumber = searchBin;
                        sots.binOnHandJoin = ibsb;

                        //Return Column
                        ItemSearchRow searchRow = new ItemSearchRow();
                        ItemBinNumberSearchRowBasic binSearchRow = new ItemBinNumberSearchRowBasic();
                        SearchColumnDoubleField[] retQtyA = new SearchColumnDoubleField[1];
                        SearchColumnDoubleField retQty = new SearchColumnDoubleField();
                        retQtyA[0] = retQty;
                        binSearchRow.quantityAvailable = retQtyA;

                        ItemSearchRowBasic searchItemRow = new ItemSearchRowBasic();
                        ItemSearchRow itemSearchRow = new ItemSearchRow();
                        SearchColumnSelectField[] retItemA = new SearchColumnSelectField[1];
                        SearchColumnSelectField retItem = new SearchColumnSelectField();
                        retItemA[0] = retItem;
                        searchItemRow.internalId = retItemA;
                        searchRow.binOnHandJoin = binSearchRow;
                        searchRow.basic = searchItemRow;




                        sotsa.criteria = sots;
                        sotsa.columns = searchRow;

                        //TBA
                        netsuiteService.tokenPassport = createTokenPassport();
                        SearchResult sr = netsuiteService.search(sotsa);//get all item bin availability
                        SearchRow[] pffRecord = null;
                        pffRecord = sr.searchRowList;

                        if (pffRecord != null && pffRecord.Count() > 0)
                        {
                            try
                            {
                                double valueToTransfer = 0;
                                string monoToTransfer = "";
                                BinTransfer BT = new BinTransfer();
                                BinTransferInventory[] BTIA = new BinTransferInventory[pffRecord.Length];
                                BinTransferInventoryList BTIL = new BinTransferInventoryList();
                                int binItemCount = 0;
                                for (int i = 0; i < pffRecord.Length; i++)
                                {

                                    ItemSearchRow item = (ItemSearchRow)pffRecord[i];
                                    BinTransferInventory BTI = new BinTransferInventory();
                                    int itemIndex = soItem.FindIndex(s => s.itemInternalID == item.basic.internalId[0].searchValue.internalId);
                                    //Declaration For inventory details
                                    InventoryAssignment[] IAA = new InventoryAssignment[1];
                                    InventoryAssignment IA = new InventoryAssignment();
                                    InventoryAssignmentList IAL = new InventoryAssignmentList();
                                    InventoryDetail ID = new InventoryDetail();

                                    if (item.binOnHandJoin.quantityAvailable != null)
                                    {
                                        var binAvail = Convert.ToDouble(item.binOnHandJoin.quantityAvailable[0].searchValue);
                                        if (binAvail > 0 && itemIndex >= 0)
                                        {
                                            if (soItem[itemIndex].qtyForWMS > binAvail)
                                            {
                                                valueToTransfer = binAvail;

                                            }
                                            else
                                            {
                                                valueToTransfer = soItem[itemIndex].qtyForWMS;
                                            }

                                            //Assign Inventory Details 
                                            IA.quantity = Convert.ToDouble(valueToTransfer);
                                            IA.quantitySpecified = true;
                                            //FAS order 09/10/2018 - Mohan
                                            if (custBooking == "Y")
                                            {
                                                if (is_fas == "Y")
                                                {
                                                    IA.binNumber = new RecordRef { internalId = @Resource.BCAS_DEFAULT_BIN };
                                                }
                                                else
                                                {
                                                    IA.binNumber = new RecordRef { internalId = @Resource.TRADE_BOOKED_BIN };
                                                }

                                            }
                                            else
                                            {
                                                if (is_fas == "Y")
                                                {
                                                    IA.binNumber = new RecordRef { internalId = @Resource.BCAS_DEFAULT_BIN };
                                                }
                                                else
                                                {
                                                    IA.binNumber = new RecordRef { internalId = @Resource.TRADE_DEFAULT_BIN };
                                                }

                                            }

                                            //FAS order 09/10/2018 - Mohan
                                            if (is_fas == "Y")
                                            {
                                                IA.toBinNumber = new RecordRef { internalId = @Resource.BCAS_DEFAULT_BIN_COMMIT };
                                            }
                                            else
                                            {
                                                IA.toBinNumber = new RecordRef { internalId = @Resource.TRADE_DEFAULT_BIN_COMMIT };
                                            }

                                            IA.toBinNumber = new RecordRef { internalId = @Resource.TRADE_DEFAULT_BIN_COMMIT };
                                            IAA[0] = IA;
                                            IAL.inventoryAssignment = IAA;
                                            ID.inventoryAssignmentList = IAL;

                                            //Assign Bin Transfer
                                            BTI.quantity = Convert.ToDouble(valueToTransfer);
                                            BTI.quantitySpecified = true;
                                            BTI.item = new RecordRef { internalId = soItem[itemIndex].itemInternalID };
                                            monoToTransfer = soItem[itemIndex].moNo;
                                            BTI.inventoryDetail = ID;
                                            BTIA[binItemCount] = BTI;
                                            binItemCount++;
                                        }
                                    }

                                }

                                BTIL.replaceAll = false;
                                BTIL.inventory = BTIA;
                                BT.inventoryList = BTIL;
                                BT.location = new RecordRef { internalId = @Resource.TRADE_DEFAULT_LOCATION };// cpng temp
                                if (custBooking == "Y")
                                {
                                    BT.memo = "BOOKED " + monoToTransfer;
                                }
                                else
                                {
                                    BT.memo = "COMMIT " + monoToTransfer;
                                }

                                if (binItemCount > 0)
                                {
                                    //TBA
                                    netsuiteService.tokenPassport = createTokenPassport();
                                    var btResponse = netsuiteService.add(BT);// perform bin transfer for reserve
                                    if (btResponse.status.isSuccess)
                                    {

                                        //RecordRef rec = (RecordRef)btResponse.baseRef;
                                        //String recInternalId = rec.internalId;
                                        var BList = BTIA.Where(i => i != null).ToList();
                                        for (int k = 0; k < soItem.Count(); k++)
                                        {
                                            int BIndex = BList.FindIndex(b => b.item.internalId == soItem[k].itemInternalID);
                                            double diff = 0;
                                            double qtyWMS = 0;
                                            if (BIndex >= 0)
                                            {
                                                diff = soItem[k].qtyForWMS - BList[BIndex].quantity;
                                                qtyWMS = BList[BIndex].quantity;

                                            }
                                            else
                                            {
                                                diff = soItem[k].qtyForWMS;
                                                qtyWMS = 0;

                                            }

                                            if (diff > 0)
                                            {
                                                if (custBooking == "Y")
                                                {
                                                    this.DataFromNetsuiteLog.Fatal("This Customer Booking SO : " + soItem[k].moNo + " with items : " + soItem[k].itemID + " having quantity " + diff + " not in bin for fulfillment.");
                                                }
                                                else
                                                {
                                                    this.DataFromNetsuiteLog.Fatal("This SO : " + soItem[k].moNo + " with items : " + soItem[k].itemID + " having quantity " + diff + " not in bin for fulfillment.");
                                                }

                                            }

                                            if (qtyWMS > 0)
                                            {
                                                this.DataFromNetsuiteLog.Debug("SalesOrdersNewJob qtyWMS: " + qtyWMS);
                                                if (soItem[k].isFas.Equals("Y"))
                                                {
                                                    this.DataFromNetsuiteLog.Debug("SalesOrdersNewJob soItem[k].isFas.Equals fas ");
                                                    string connStr22 = ConfigurationManager.ConnectionStrings["mysql2"].ConnectionString;
                                                    MySqlConnection mysqlCon22 = new MySqlConnection(connStr22);

                                                    mysqlCon22.Open();
                                                    var query22 = "insert into netsuite_syncso (nt2_moNo, nt2_moNo_internalID, nt2_status, nt2_itemID, nt2_item_internalID, nt2_qtyForWMS,nt2_fulfilledQty, " +
                                                               "nt2_ordQty, nt2_tax, nt2_discount, nt2_rate, nt2_amount, nt2_customer, nt2_customer_internalID, nt2_SEIS_moNo, nt2_SEIS_moNo_InternalID, nt2_subsidiary," +
                                                               "nt2_createdDate, nt2_rangeTo,nt2_custID,nt2_addressee,nt2_deliveryAdd,nt2_deliveryAdd2,nt2_deliveryAdd3,nt2_postCode,nt2_contactPerson,nt2_phone,nt2_country, " +
                                                               "nt2_billingAddressee,nt2_billingAdd,nt2_billingAdd2,nt2_billingAdd3,nt2_billingPostcode,nt2_billingContactPerson,nt2_billingPhone,nt2_shipMethod,nt2_creditTerm, " +
                                                               "nt2_basedprice,nt2_pricelevel,nt2_unfulfilledQty,nt2_businessChannel_internalID, nt2_customer_booked,nt2_is_fas,nt2_teacher_name,nt2_class_name   )" +
                                                               " SELECT nt1_mono, nt1_mono_internalID, nt1_status, nt1_itemID, nt1_item_internalID, nt1_ordQty, nt1_fulfilledQty, nt1_ordQty, nt1_tax, nt1_discount, nt1_rate, nt1_amount, nt1_customer, nt1_customer_internalID, nt1_SEIS_mono, nt1_SEIS_mono_InternalID, nt1_subsidiary, " + "'" + createdDate + "','" + convertRangeTo + "'," + " nt1_custID, nt1_addressee, nt1_deliveryAdd, nt1_deliveryAdd2, nt1_deliveryAdd3, nt1_postCode, nt1_contactPerson, nt1_phone,nt1_country, nt1_billingAddressee, nt1_billingAdd, nt1_billingAdd2, nt1_billingAdd3, nt1_billingPostCode, nt1_billingContactPerson, nt1_billingPhone, nt1_shipMethod, nt1_creditTerm, nt1_basedPrice, nt1_pricelevel, 0, nt1_businessChannel_internalID, nt1_customer_booked, nt1_is_fas, nt1_teacher_name, nt1_class_name FROM netsuite_newso WHERE nt1_mono = '" + soItem[k].moNo + "'";


                                                    this.DataFromNetsuiteLog.Debug("SalesOrdersNewJob FAS: " + query22);
                                                    MySqlCommand MyCommand22 = new MySqlCommand(query22, mysqlCon22);
                                                    MySqlDataReader numRowsUpdated = MyCommand22.ExecuteReader();
                                                    mysqlCon22.Close();

                                                    soItem.RemoveAll(s => s.moNo == soItem[k].moNo);
                                                }
                                                else
                                                {
                                                    string connStr2 = ConfigurationManager.ConnectionStrings["mysql2"].ConnectionString;
                                                    MySqlConnection mysqlCon2 = new MySqlConnection(connStr2);

                                                    mysqlCon2.Open();


                                                    var query2 = "insert into netsuite_syncso (nt2_moNo, nt2_moNo_internalID, nt2_status, nt2_itemID, nt2_item_internalID, nt2_qtyForWMS,nt2_fulfilledQty, " +
                                                                "nt2_ordQty, nt2_tax, nt2_discount, nt2_rate, nt2_amount, nt2_customer, nt2_customer_internalID, nt2_SEIS_moNo, nt2_SEIS_moNo_InternalID, nt2_subsidiary," +
                                                                "nt2_createdDate, nt2_rangeTo,nt2_custID,nt2_addressee,nt2_deliveryAdd,nt2_deliveryAdd2,nt2_deliveryAdd3,nt2_postCode,nt2_contactPerson,nt2_phone,nt2_country, " +
                                                                "nt2_billingAddressee,nt2_billingAdd,nt2_billingAdd2,nt2_billingAdd3,nt2_billingPostcode,nt2_billingContactPerson,nt2_billingPhone,nt2_shipMethod,nt2_creditTerm, " +
                                                                "nt2_basedprice,nt2_pricelevel,nt2_unfulfilledQty,nt2_businessChannel_internalID, nt2_customer_booked )" +
                                                                "values ('" + soItem[k].moNo + "','" + soItem[k].moNoInternalID + "','" + soItem[k].status + "','" + soItem[k].itemID + "'," +
                                                                "'" + soItem[k].itemInternalID + "','" + qtyWMS + "','" + soItem[k].fulFilledQty + "','" + soItem[k].ordQty + "','" + soItem[k].tax + "'," +
                                                                "'" + soItem[k].discount + "','" + soItem[k].rate + "','" + soItem[k].amount + "','" + checkIsNull(soItem[k].customer).Replace("'", "''") + "','" + soItem[k].customerInternalID + "'," +
                                                                "'" + soItem[k].SEISmoNo + "','" + soItem[k].SEISmoNoInternalID + "','" + checkIsNull(soItem[k].subsidiary).Replace("'", "''") + "','" + createdDate + "','" + convertRangeTo + "'," +
                                                                "'" + checkIsNull(soItem[k].custID).Replace("'", "''") + "','" + checkIsNull(soItem[k].addressee).Replace("'", "''") + "','" + checkIsNull(soItem[k].deliveryAdd).Replace("'", "''") + "'," +
                                                                "'" + checkIsNull(soItem[k].deliveryAdd2).Replace("'", "''") + "','" + checkIsNull(soItem[k].deliveryAdd3).Replace("'", "''") + "','" + checkIsNull(soItem[k].postCode).Replace("'", "''") + "'," +
                                                                "'" + checkIsNull(soItem[k].contactPerson).Replace("'", "''") + "','" + checkIsNull(soItem[k].phone).Replace("'", "''") + "','" + checkIsNull(soItem[k].country).Replace("'", "''") + "', " +
                                                                "'" + checkIsNull(soItem[k].billingAddressee).Replace("'", "''") + "','" + checkIsNull(soItem[k].billingAdd).Replace("'", "''") + "','" + checkIsNull(soItem[k].billingAdd2).Replace("'", "''") + "', " +
                                                                "'" + checkIsNull(soItem[k].billingAdd3).Replace("'", "''") + "','" + checkIsNull(soItem[k].billingPostcode).Replace("'", "''") + "','" + checkIsNull(soItem[k].billingContactPerson).Replace("'", "''") + "'," +
                                                                "'" + checkIsNull(soItem[k].billingPhone).Replace("'", "''") + "','" + soItem[k].shipMethod + "','" + soItem[k].creditTerm + "','" + soItem[k].basedPrice + "','" + soItem[k].pricelevel + "','" + 0 +
                                                                "','" + LOB + "','" + custBooking + "')";

                                                    this.DataFromNetsuiteLog.Debug("SalesOrdersNewJob : " + query2);
                                                    //entities.Database.ExecuteSqlCommand(query2);


                                                    //string MyConnection2 = ConfigurationManager.ConnectionStrings["mysql2"].ConnectionString;
                                                    //MySqlConnection MyConn2 = new MySqlConnection(MyConnection2);
                                                    //MySqlCommand MyCommand2 = new MySqlCommand(query2, MyConn2);
                                                    //int numRowsUpdated = MyCommand2.ExecuteNonQuery();
                                                    //MyConn2.Close();
                                                    MySqlCommand MyCommand2 = new MySqlCommand(query2, mysqlCon2);
                                                    MySqlDataReader numRowsUpdated = MyCommand2.ExecuteReader();
                                                    mysqlCon2.Close();
                                                    // mysqlCon.Dispose();
                                                }


                                            }


                                        }
                                    }
                                    else
                                    {
                                        this.DataFromNetsuiteLog.Fatal("Trade Bin Transfer Commit Exception: " + soItem[0].moNo + ": " + btResponse.status.statusDetail[0].message.ToString() + " " + DateTime.Now.ToString());
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                this.DataFromNetsuiteLog.Error("Trade Search Item Exception: " + ex.ToString());
                                status = false;
                            }
                        }

                    }//per sales order
                }
                //cpng end

                //for (int i = 0; i < so2List.Count(); i++)
                //{
                //    var query2 = "insert into netsuite_syncso (nt2_seqID, nt2_moNo, nt2_moNo_internalID, nt2_status, nt2_itemID, nt2_item_internalID, nt2_qtyForWMS,nt2_fulfilledQty, " +
                //        "nt2_ordQty, nt2_tax, nt2_discount, nt2_rate, nt2_amount, nt2_customer, nt2_customer_internalID, nt2_SEIS_moNo, nt2_SEIS_moNo_InternalID, nt2_subsidiary," +
                //        "nt2_createdDate, nt2_rangeTo,nt2_custID,nt2_addressee,nt2_deliveryAdd,nt2_deliveryAdd2,nt2_deliveryAdd3,nt2_postCode,nt2_contactPerson,nt2_phone,nt2_country, " +
                //        "nt2_billingAddressee,nt2_billingAdd,nt2_billingAdd2,nt2_billingAdd3,nt2_billingPostcode,nt2_billingContactPerson,nt2_billingPhone,nt2_shipMethod,nt2_creditTerm, " +
                //        "nt2_basedprice,nt2_pricelevel)" +
                //        "values ('" + so2List[i].seqID + "','" + so2List[i].moNo + "','" + so2List[i].moNoInternalID + "','" + so2List[i].status + "','" + so2List[i].itemID + "'," +
                //        "'" + so2List[i].itemInternalID + "','" + so2List[i].qtyForWMS + "','" + so2List[i].fulFilledQty + "','" + so2List[i].ordQty + "','" + so2List[i].tax + "'," +
                //        "'" + so2List[i].discount + "','" + so2List[i].rate + "','" + so2List[i].amount + "','" + checkIsNull(so2List[i].customer).Replace("'","''") + "','" + so2List[i].customerInternalID + "'," +
                //        "'" + so2List[i].SEISmoNo + "','" + so2List[i].SEISmoNoInternalID + "','" + checkIsNull(so2List[i].subsidiary).Replace("'","''") + "','" + createdDate + "','" + convertRangeTo + "'," +
                //        "'" + checkIsNull(so2List[i].custID).Replace("'", "''") + "','" + checkIsNull(so2List[i].addressee).Replace("'", "''") + "','" + checkIsNull(so2List[i].deliveryAdd).Replace("'", "''") + "'," +
                //        "'"+ checkIsNull(so2List[i].deliveryAdd2).Replace("'", "''") +"','"+ checkIsNull(so2List[i].deliveryAdd3).Replace("'", "''") +"','"+ checkIsNull(so2List[i].postCode).Replace("'", "''") +"'," +
                //        "'"+ checkIsNull(so2List[i].contactPerson).Replace("'", "''") +"','"+ checkIsNull(so2List[i].phone).Replace("'", "''") +"','"+ checkIsNull(so2List[i].country).Replace("'", "''") +"', " +
                //        "'" + checkIsNull(so2List[i].billingAddressee).Replace("'", "''") + "','" + checkIsNull(so2List[i].billingAdd).Replace("'", "''") + "','" + checkIsNull(so2List[i].billingAdd2).Replace("'", "''") + "', "+
                //        "'" + checkIsNull(so2List[i].billingAdd3).Replace("'", "''") + "','" + checkIsNull(so2List[i].billingPostcode).Replace("'", "''") + "','" + checkIsNull(so2List[i].billingContactPerson).Replace("'", "''") + "'," +
                //        "'" + checkIsNull(so2List[i].billingPhone).Replace("'", "''") + "','" + so2List[i].shipMethod + "','" + so2List[i].creditTerm + "','"+ so2List[i].basedPrice +"','"+so2List[i].pricelevel+"')";

                //    this.DataFromNetsuiteLog.Debug("SalesOrdersNewJob: " + query2);
                //    entities.Database.ExecuteSqlCommand(query2);
                //}

                if (so2List.Count > 0)
                {
                    string connStr3 = ConfigurationManager.ConnectionStrings["mysql2"].ConnectionString;
                    MySqlConnection mysqlCon3 = new MySqlConnection(connStr3);

                    mysqlCon3.Open();

                    String jobID = "SDE_" + Guid.NewGuid();
                    var query3 = "update requestnetsuite set rn_status = 'UPLOADED', rn_jobID='" + jobID + "', rn_completedAt='" + createdDate + "',rn_updatedDate='" + createdDate + "' where rn_id = '" + requestNetsuiteID + "'";
                    this.DataFromNetsuiteLog.Debug("SalesOrdersNewJob: " + query3);
                    entities.Database.ExecuteSqlCommand(query3);

                    MySqlCommand MyCommand3 = new MySqlCommand(query3, mysqlCon3);
                    MySqlDataReader numRowsUpdated = MyCommand3.ExecuteReader();
                    mysqlCon3.Close();
                }
                else
                {
                    string connStr4 = ConfigurationManager.ConnectionStrings["mysql2"].ConnectionString;
                    MySqlConnection mysqlCon4 = new MySqlConnection(connStr4);

                    mysqlCon4.Open();

                    String jobID = "SDE_" + Guid.NewGuid();
                    var query3 = "update requestnetsuite set rn_status = 'NO-DATA', rn_jobID='" + jobID + "', rn_completedAt='" + createdDate + "',rn_updatedDate='" + createdDate + "' where rn_id = '" + requestNetsuiteID + "'";
                    this.DataFromNetsuiteLog.Debug("SalesOrdersNewJob: " + query3);
                    entities.Database.ExecuteSqlCommand(query3);

                    MySqlCommand MyCommand4 = new MySqlCommand(query3, mysqlCon4);
                    MySqlDataReader numRowsUpdated = MyCommand4.ExecuteReader();
                    mysqlCon4.Close();
                }

                ////Add Sync to Wms = 3 and nt1_committedQty = calc_qtyForWMS - WY-10.SEPT.2014
                //var insertRequestNetsuite = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status,rn_updatedDate,rn_rangeFrom,rn_rangeTo) values " +
                //    "('UPD-STATUS.NS-LATEST SALES ORDER 2','" + convertDateToString(DateTime.Now) + "','START','" + convertDateToString(DateTime.Now) + "','" + convertDateToString(rangeFrom) + "','" + convertDateToString(rangeTo) + "')";
                //    //"('UPD-STATUS.NS-LATEST SALES ORDER 2','" + convertDateToString(DateTime.Now) + "','DEBUG','" + convertDateToString(DateTime.Now) + "','" + convertDateToString(rangeFrom) + "','" + convertDateToString(rangeTo) + "')";
                //this.DataFromNetsuiteLog.Debug("SalesOrdersNewJob: " + insertRequestNetsuite);
                //entities.Database.ExecuteSqlCommand(insertRequestNetsuite);

                //scope1.Complete();
                //status = true;
                // }
            }
            catch (Exception ex)
            {
                this.DataFromNetsuiteLog.Error("SalesOrdersNewJob Exception: " + ex.ToString());
                status = false;
            }

            return status;
        }
        //UPD-STATUS.NS-LATEST SALES ORDER 2 //Add Sync to Wms = 3 and nt1_committedQty = calc_qtyForWMS - WY-10.SEPT.2014
        private Boolean SalesOrdersNewJob2(sdeEntities entities, Int32 requestNetsuiteID, DateTime rangeFrom, DateTime rangeTo)
        {
            //Execute once a day. Copy latest/modified TRADE sales order data from netsuite_newso to netsuite_syncso
            this.DataFromNetsuiteLog.Info("SalesOrdersNewJob2: Validate sales orders ********");

            Boolean status = false;
            String createdDate = convertDateToString(DateTime.Now);
            String convertRangeFrom = convertDateToString(rangeFrom);
            String convertRangeTo = convertDateToString(rangeTo);

            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(2400)
            };

            //using (TransactionScope scope1 = new TransactionScope()) 
            using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
            {
                try
                {
                    string connStr = ConfigurationManager.ConnectionStrings["mysql2"].ConnectionString;
                    MySqlConnection mysqlCon = new MySqlConnection(connStr);
                    mysqlCon.Open();
                    String strRangeTo = convertDateToString(Convert.ToDateTime(rangeTo));

                    #region delete SO which has more than 2 decimal places for nt1_rate(price)
                    var query4 = "SELECT nt1_moNo_internalID,nt1_mono FROM netsuite_newso WHERE nt1_status IN ('PENDING FULFILLMENT','PENDING BILLING/PARTIALLY FULFILLED','PARTIALLY FULFILLED') " +
                                 " AND LENGTH(SUBSTRING(CAST(nt1_rate AS CHAR),INSTR(CAST(nt1_rate AS CHAR),'.'),4)) > 3 GROUP BY nt1_mono ";
                    MySqlCommand cmd4 = new MySqlCommand(query4, mysqlCon);
                    MySqlDataReader dtr4 = cmd4.ExecuteReader();

                    List<DuplicateItemInSO> duplicateList = new List<DuplicateItemInSO>();
                    while (dtr4.Read())
                    {
                        DuplicateItemInSO duplicate = new DuplicateItemInSO();
                        duplicate.moNoInternalID = (dtr4.GetValue(0) == DBNull.Value) ? String.Empty : dtr4.GetString(0);
                        duplicate.moNo = (dtr4.GetValue(1) == DBNull.Value) ? String.Empty : dtr4.GetString(1);
                        duplicateList.Add(duplicate);
                    }
                    cmd4.Dispose();
                    dtr4.Close();
                    mysqlCon.Close();

                    for (int i = 0; i < duplicateList.Count(); i++)
                    {
                        var query5 = "delete from netsuite_newso where nt1_moNo='" + duplicateList[i].moNo + "'";
                        this.DataFromNetsuiteLog.Debug(query5);
                        this.DataFromNetsuiteLog.Fatal("This Sales Order:" + duplicateList[i].moNo + " " + duplicateList[i].moNoInternalID + " having order rate more than 2 decimal places.");
                        entities.Database.ExecuteSqlCommand(query5);
                    }
                    #endregion

                    #region SELECT FROM netsuite_newso
                    var query1 = "SELECT so1.nt1_seqID, so1.nt1_moNo,so1.nt1_moNo_internalID, so1.nt1_status,so1.nt1_itemID," +
"so1.nt1_item_internalID, sum(so1.nt1_committedQty) as nt1_committedQty,sum(so1.nt1_fulfilledQty) as nt1_fulfilledQty, " +
"so1.nt1_rangeTo, " +
"if(so2.nt2_qtyForWMS is null,0,so2.nt2_qtyForWMS) as nt2_qtyForWMS, " +
"if(so2.nt2_fulfilledQty is null,0,so2.nt2_fulfilledQty) as nt2_fulfilledQty, " +
"(so1.nt1_committedQty) - (if(so2.nt2_qtyForWMS is null,0,so2.nt2_qtyForWMS) - (so1.nt1_fulfilledQty)) as calc_qtyForWMS, " +
"((so1.nt1_committedQty + so1.nt1_fulfilledQty) - (if(so2.nt2_qtyForWMS is null,0,so2.nt2_qtyForWMS) + if(so2.nt2_fulfilledQty is null,0,so2.nt2_fulfilledQty))) as calc_difference, " +
"so1.nt1_ordQty, so1.nt1_tax, so1.nt1_discount, so1.nt1_rate, so1.nt1_amount, " +
"so1.nt1_customer, so1.nt1_customer_internalID, so1.nt1_SEIS_moNo,so1.nt1_SEIS_moNo_internalID, so1.nt1_subsidiary, " +
"so1.nt1_custID,so1.nt1_addressee,so1.nt1_deliveryAdd,so1.nt1_deliveryAdd2,so1.nt1_deliveryAdd3,so1.nt1_postCode,so1.nt1_contactPerson,so1.nt1_phone,so1.nt1_country, " +
"so1.nt1_billingAddressee,so1.nt1_billingAdd,so1.nt1_billingAdd2,so1.nt1_billingAdd3,so1.nt1_billingPostcode,so1.nt1_billingContactPerson,so1.nt1_billingPhone, " +
"so1.nt1_shipMethod,so1.nt1_creditTerm,so1.nt1_basedprice,so1.nt1_pricelevel " +
"FROM view_newso so1 " +
"left join " +
"(SELECT nt2_seqID, nt2_moNo_internalID, nt2_item_internalID " +
",sum(nt2_qtyForWMS) as nt2_qtyForWMS, " +
"sum(nt2_fulfilledQty) as nt2_fulfilledQty " +
"FROM netsuite_syncso " +
"group by nt2_moNo_internalID,nt2_item_internalID) so2 " +
"on so1.nt1_moNo_internalID = so2.nt2_moNo_internalID " +
"and so1.nt1_item_internalID = so2.nt2_item_internalID " +
"where so1.nt1_status in ('PENDING FULFILLMENT','PENDING BILLING/PARTIALLY FULFILLED','PARTIALLY FULFILLED') " +
"and so1.nt1_subsidiary = '" + @Resource.SUBSIDIARY_NAME_MY + "' " +
"and so1.nt1_synctowms = '3' " +
"and so1.nt1_rangeTo <= '" + strRangeTo + "' " +
"group by so1.nt1_moNo_internalID, so1.nt1_item_internalID " +
"having (calc_qtyForWMS > 0  or calc_difference > 0) and nt1_committedQty > 0 and nt1_committedQty = calc_qtyForWMS ";
                    #endregion

                    #region no use
                    /*
                    var query1 = "SELECT so1.nt1_seqID, so1.nt1_moNo,so1.nt1_moNo_internalID, so1.nt1_status,so1.nt1_itemID," + 
                    "so1.nt1_item_internalID, sum(so1.nt1_committedQty) as nt1_committedQty,sum(so1.nt1_fulfilledQty) as nt1_fulfilledQty, " +
                    "so1.nt1_rangeTo, " + 
                    "if(so2.nt2_qtyForWMS is null,0,so2.nt2_qtyForWMS) as nt2_qtyForWMS, " + 
                    "if(so2.nt2_fulfilledQty is null,0,so2.nt2_fulfilledQty) as nt2_fulfilledQty, " + 
                    "(so1.nt1_committedQty) - (if(so2.nt2_qtyForWMS is null,0,so2.nt2_qtyForWMS) - (so1.nt1_fulfilledQty)) as calc_qtyForWMS, " +
                    "((so1.nt1_committedQty + so1.nt1_fulfilledQty) - (if(so2.nt2_qtyForWMS is null,0,so2.nt2_qtyForWMS) + if(so2.nt2_fulfilledQty is null,0,so2.nt2_fulfilledQty))) as calc_difference, " +
                    "so1.nt1_ordQty, so1.nt1_tax, so1.nt1_discount, so1.nt1_rate, so1.nt1_amount, " +
                    "so1.nt1_customer, so1.nt1_customer_internalID, so1.nt1_SEIS_moNo,so1.nt1_SEIS_moNo_internalID, so1.nt1_subsidiary, " +
                    "so1.nt1_custID,so1.nt1_addressee,so1.nt1_deliveryAdd,so1.nt1_deliveryAdd2,so1.nt1_deliveryAdd3,so1.nt1_postCode,so1.nt1_contactPerson,so1.nt1_phone,so1.nt1_country, " +
                    "so1.nt1_billingAddressee,so1.nt1_billingAdd,so1.nt1_billingAdd2,so1.nt1_billingAdd3,so1.nt1_billingPostcode,so1.nt1_billingContactPerson,so1.nt1_billingPhone, " +
                    "so1.nt1_shipMethod,so1.nt1_creditTerm,so1.nt1_basedprice,so1.nt1_pricelevel " + 
                    "FROM view_newso so1 " +
                    "left join " +
                    "(SELECT nt2_seqID, nt2_moNo_internalID, nt2_item_internalID " +
                    ",sum(nt2_qtyForWMS) as nt2_qtyForWMS, " +
                    "sum(nt2_fulfilledQty) as nt2_fulfilledQty " +
                    "FROM netsuite_syncso " +
                    "group by nt2_moNo_internalID,nt2_item_internalID) so2 " +
                    "on so1.nt1_moNo_internalID = so2.nt2_moNo_internalID " +
                    "and so1.nt1_item_internalID = so2.nt2_item_internalID " +
                    "where so1.nt1_status in ('PENDING FULFILLMENT','PENDING BILLING/PARTIALLY FULFILLED','PARTIALLY FULFILLED') " + 
                    "and so1.nt1_subsidiary = '"+ @Resource.SUBSIDIARY_NAME_MY +"' " +
                    "and so1.nt1_synctowms = '3' " + 
                    "and so1.nt1_rangeTo <= '" + strRangeTo + "' " +  
                    "group by so1.nt1_moNo_internalID, so1.nt1_item_internalID " +
                    "having (calc_qtyForWMS > 0  or calc_difference > 0) and nt1_committedQty > 0 and nt1_committedQty = calc_qtyForWMS ";
                     */
                    #endregion

                    mysqlCon.Open();
                    MySqlCommand cmd = new MySqlCommand(query1, mysqlCon);
                    MySqlDataReader dtr = cmd.ExecuteReader();

                    List<TempSO2> so2List = new List<TempSO2>();

                    while (dtr.Read())
                    {
                        TempSO2 so2 = new TempSO2();

                        so2.seqID = dtr.GetInt32(0);
                        so2.moNo = (dtr.GetValue(1) == DBNull.Value) ? String.Empty : dtr.GetString(1);
                        so2.moNoInternalID = (dtr.GetValue(2) == DBNull.Value) ? String.Empty : dtr.GetString(2);
                        so2.status = (dtr.GetValue(3) == DBNull.Value) ? String.Empty : dtr.GetString(3);
                        so2.itemID = (dtr.GetValue(4) == DBNull.Value) ? String.Empty : dtr.GetString(4);
                        so2.itemInternalID = (dtr.GetValue(5) == DBNull.Value) ? String.Empty : dtr.GetString(5);
                        so2.qtyForWMS = dtr.GetInt32(11);
                        so2.fulFilledQty = dtr.GetInt32(12);
                        so2.ordQty = dtr.GetInt32(13);
                        so2.tax = dtr.GetDouble(14);
                        so2.discount = dtr.GetDouble(15);
                        so2.rate = dtr.GetDouble(16);
                        so2.amount = dtr.GetDouble(17);
                        so2.customer = (dtr.GetValue(18) == DBNull.Value) ? String.Empty : dtr.GetString(18);
                        so2.customerInternalID = (dtr.GetValue(19) == DBNull.Value) ? String.Empty : dtr.GetString(19);
                        so2.SEISmoNo = (dtr.GetValue(20) == DBNull.Value) ? String.Empty : dtr.GetString(20);
                        so2.SEISmoNoInternalID = (dtr.GetValue(21) == DBNull.Value) ? String.Empty : dtr.GetString(21);
                        so2.subsidiary = (dtr.GetValue(22) == DBNull.Value) ? String.Empty : dtr.GetString(22);

                        //Move Code from SalesOrders - WY-11.SEPT.2014
                        so2.custID = (dtr.GetValue(23) == DBNull.Value) ? String.Empty : dtr.GetString(23);
                        so2.addressee = (dtr.GetValue(24) == DBNull.Value) ? String.Empty : dtr.GetString(24);
                        so2.deliveryAdd = (dtr.GetValue(25) == DBNull.Value) ? String.Empty : dtr.GetString(25);
                        so2.deliveryAdd2 = (dtr.GetValue(26) == DBNull.Value) ? String.Empty : dtr.GetString(26);
                        so2.deliveryAdd3 = (dtr.GetValue(27) == DBNull.Value) ? String.Empty : dtr.GetString(27);
                        so2.postCode = (dtr.GetValue(28) == DBNull.Value) ? String.Empty : dtr.GetString(28);
                        so2.contactPerson = (dtr.GetValue(29) == DBNull.Value) ? String.Empty : dtr.GetString(29);
                        so2.phone = (dtr.GetValue(30) == DBNull.Value) ? String.Empty : dtr.GetString(30);
                        so2.country = (dtr.GetValue(31) == DBNull.Value) ? String.Empty : dtr.GetString(31);

                        //Added Billing Address - WY-25.SEPT.2014
                        so2.billingAddressee = (dtr.GetValue(32) == DBNull.Value) ? String.Empty : dtr.GetString(32);
                        so2.billingAdd = (dtr.GetValue(33) == DBNull.Value) ? String.Empty : dtr.GetString(33);
                        so2.billingAdd2 = (dtr.GetValue(34) == DBNull.Value) ? String.Empty : dtr.GetString(34);
                        so2.billingAdd3 = (dtr.GetValue(35) == DBNull.Value) ? String.Empty : dtr.GetString(35);
                        so2.billingPostcode = (dtr.GetValue(36) == DBNull.Value) ? String.Empty : dtr.GetString(36);
                        so2.billingContactPerson = (dtr.GetValue(37) == DBNull.Value) ? String.Empty : dtr.GetString(37);
                        so2.billingPhone = (dtr.GetValue(38) == DBNull.Value) ? String.Empty : dtr.GetString(38);
                        so2.shipMethod = (dtr.GetValue(39) == DBNull.Value) ? String.Empty : dtr.GetString(39);
                        so2.creditTerm = (dtr.GetValue(40) == DBNull.Value) ? String.Empty : dtr.GetString(40);

                        //Get RRP and Based Price - WY-29.SEPT.2014
                        so2.basedPrice = dtr.GetDouble(41);
                        so2.pricelevel = (dtr.GetValue(42) == DBNull.Value) ? String.Empty : dtr.GetString(42);

                        so2List.Add(so2);
                    }
                    dtr.Close();
                    cmd.Dispose();
                    mysqlCon.Close();
                    mysqlCon.Dispose();

                    for (int i = 0; i < so2List.Count(); i++)
                    {
                        var query2 = "insert into netsuite_syncso (nt2_seqID, nt2_moNo, nt2_moNo_internalID, nt2_status, nt2_itemID, nt2_item_internalID, nt2_qtyForWMS,nt2_fulfilledQty, " +
                           "nt2_ordQty, nt2_tax, nt2_discount, nt2_rate, nt2_amount, nt2_customer, nt2_customer_internalID, nt2_SEIS_moNo, nt2_SEIS_moNo_InternalID, nt2_subsidiary," +
                           "nt2_createdDate, nt2_rangeTo,nt2_custID,nt2_addressee,nt2_deliveryAdd,nt2_deliveryAdd2,nt2_deliveryAdd3,nt2_postCode,nt2_contactPerson,nt2_phone,nt2_country, " +
                           "nt2_billingAddressee,nt2_billingAdd,nt2_billingAdd2,nt2_billingAdd3,nt2_billingPostcode,nt2_billingContactPerson,nt2_billingPhone,nt2_shipMethod,nt2_creditTerm, " +
                           "nt2_basedprice,nt2_pricelevel)" +
                           "values ('" + so2List[i].seqID + "','" + so2List[i].moNo + "','" + so2List[i].moNoInternalID + "','" + so2List[i].status + "','" + so2List[i].itemID + "'," +
                           "'" + so2List[i].itemInternalID + "','" + so2List[i].qtyForWMS + "','" + so2List[i].fulFilledQty + "','" + so2List[i].ordQty + "','" + so2List[i].tax + "'," +
                           "'" + so2List[i].discount + "','" + so2List[i].rate + "','" + so2List[i].amount + "','" + so2List[i].customer + "','" + checkIsNull(so2List[i].customerInternalID).Replace("'", "''") + "'," +
                           "'" + so2List[i].SEISmoNo + "','" + so2List[i].SEISmoNoInternalID + "','" + checkIsNull(so2List[i].subsidiary).Replace("'", "''") + "','" + createdDate + "','" + convertRangeTo + "'," +
                           "'" + checkIsNull(so2List[i].custID).Replace("'", "''") + "','" + checkIsNull(so2List[i].addressee).Replace("'", "''") + "','" + checkIsNull(so2List[i].deliveryAdd).Replace("'", "''") + "'," +
                           "'" + checkIsNull(so2List[i].deliveryAdd2).Replace("'", "''") + "','" + checkIsNull(so2List[i].deliveryAdd3).Replace("'", "''") + "','" + checkIsNull(so2List[i].postCode).Replace("'", "''") + "'," +
                           "'" + checkIsNull(so2List[i].contactPerson).Replace("'", "''") + "','" + checkIsNull(so2List[i].phone).Replace("'", "''") + "','" + checkIsNull(so2List[i].country).Replace("'", "''") + "', " +
                           "'" + checkIsNull(so2List[i].billingAddressee).Replace("'", "''") + "','" + checkIsNull(so2List[i].billingAdd).Replace("'", "''") + "','" + checkIsNull(so2List[i].billingAdd2).Replace("'", "''") + "', " +
                           "'" + checkIsNull(so2List[i].billingAdd3).Replace("'", "''") + "','" + checkIsNull(so2List[i].billingPostcode).Replace("'", "''") + "','" + checkIsNull(so2List[i].billingContactPerson).Replace("'", "''") + "'," +
                           "'" + checkIsNull(so2List[i].billingPhone).Replace("'", "''") + "','" + so2List[i].shipMethod + "','" + so2List[i].creditTerm + "','" + so2List[i].basedPrice + "','" + so2List[i].pricelevel + "')";

                        this.DataFromNetsuiteLog.Debug("SalesOrdersNewJob2: " + query2);
                        entities.Database.ExecuteSqlCommand(query2);
                    }

                    if (so2List.Count > 0)
                    {
                        String jobID = "SDE_" + Guid.NewGuid();
                        var query3 = "update requestnetsuite set rn_status = 'UPLOADED', rn_jobID='" + jobID + "', rn_completedAt='" + createdDate + "',rn_updatedDate='" + createdDate + "' where rn_id = '" + requestNetsuiteID + "'";
                        this.DataFromNetsuiteLog.Debug("SalesOrdersNewJob2: " + query3);
                        entities.Database.ExecuteSqlCommand(query3);
                    }
                    else
                    {
                        String jobID = "SDE_" + Guid.NewGuid();
                        var query3 = "update requestnetsuite set rn_status = 'NO-DATA', rn_jobID='" + jobID + "', rn_completedAt='" + createdDate + "',rn_updatedDate='" + createdDate + "' where rn_id = '" + requestNetsuiteID + "'";
                        this.DataFromNetsuiteLog.Debug("SalesOrdersNewJob2: " + query3);
                        entities.Database.ExecuteSqlCommand(query3);
                    }
                    scope1.Complete();
                    status = true;
                }
                catch (Exception ex)
                {
                    this.DataFromNetsuiteLog.Error("SalesOrdersNewJob2 Exception: " + ex.ToString());
                    status = false;
                }
            }
            return status;
        }
        //NS-SALES ORDER
        public Boolean SalesOrders(sdeEntities entities, RequestNetsuiteEntity r)
        {
            //Extract TRADE sales order from NetSuite which ready to sync to IMAS to do fulfillment
            this.DataFromNetsuiteLog.Info("SalesOrders: Pulling sales orders ********");
            //TBA
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            DataCenterAwareNetSuiteService netsuiteService = new DataCenterAwareNetSuiteService(account);

            String createdDate = convertDateToString(DateTime.Now);
            DateTime trangeFrom = Convert.ToDateTime(r.rn_rangeFrom);
            DateTime trangeTo = Convert.ToDateTime(r.rn_rangeTo);
            long temp_consignmentNote = 100000000000;
            Record[] pffRecord = null;
            Record[] customerRecord = null;

            Boolean status = false;

            //WY-29.AUG.2014
            //List<cls_customer> listCust = new List<cls_customer>();
            Boolean isValidCust = true;

            //Boolean loginStatus = login();
            //Status netsuiteStatus = new Status();
            //service.Timeout = 1000000000;
            //service.CookieContainer = new CookieContainer();
            //ApplicationInfo appinfo = new ApplicationInfo();
            //appinfo.applicationId = @Resource.NETSUITE_LOGIN_APPLICATIONID;
            //service.applicationInfo = appinfo;

            #region Netsuite

            //TBA
            ItemSearchBasic basic = new ItemSearchBasic()
            {
                internalId = new SearchMultiSelectField()
                {
                    @operator = SearchMultiSelectFieldOperator.anyOf,
                    operatorSpecified = true,
                    searchValue = new RecordRef[] {
                    new RecordRef() {
                    internalId = "14943"
                         }
                    }
                }
            };

            netsuiteService.Timeout = 1000000000;
            netsuiteService.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();

            //  appinfo.applicationId = appID;
            netsuiteService.applicationInfo = appinfo;
            string loginEmail = "";
            loginEmail = @Resource.NETSUITE_LOGIN_EMAIL;
            tokenId = @Resource.ASIA_WEBSERVICE_TOKEN_ID;
            tokenSecret = @Resource.ASIA_WEBSERVICE_TOKEN_SECRET;


            Boolean loginStatus = false;
            try
            {
                Console.WriteLine("Success");
                netsuiteService.tokenPassport = createTokenPassport();
                SearchResult status1 = netsuiteService.search(basic);
                if (status1.status.isSuccess == true)
                {
                    this.DataFromNetsuiteLog.Debug("SalesOrders: Login Netsuite success.");
                    loginStatus = true;
                }
                else
                {
                    loginStatus = false;
                }
            }
            catch (Exception ex)
            {
                loginStatus = false;
                this.DataFromNetsuiteLog.Fatal("SOFulfillmentUpdate: Login Netsuite failed. Exception : " + ex.ToString());

            }
            //


            //Passport passport = new Passport();
            //passport.account = @Resource.NETSUITE_LOGIN_ACCOUNT;
            //passport.email = @Resource.NETSUITE_LOGIN_EMAIL;

            //RecordRef role = new RecordRef();
            //role.internalId = @Resource.NETSUITE_LOGIN_ROLE_INTERNALID;

            //passport.role = role;
            ////kang get netsuite password from DB
            ////passport.password = @Resource.NETSUITE_LOGIN_PASSWORD;
            //passport.password = getNetsuitePassword(@Resource.NETSUITE_LOGIN_EMAIL);

            //netsuiteStatus = service.login(passport).status;
            //Boolean loginStatus = netsuiteStatus.isSuccess;


            if (loginStatus == true)
            {
                this.DataFromNetsuiteLog.Debug("SalesOrders: Login Netsuite success.");
                this.DataFromNetsuiteLog.Info("SalesOrders: Retrieving sales order per day from Netsuite.");

                //TBA
                netsuiteService.tokenPassport = createTokenPassport();
                AsyncResult pffResponse = netsuiteService.getAsyncResult(r.rn_jobID, 1);
                AsyncSearchResult salesOrderSearchResult = (AsyncSearchResult)pffResponse;
                pffRecord = salesOrderSearchResult.searchResult.recordList;

                //TBA
                //netsuiteStatus = (service.logout()).status;
                //if (netsuiteStatus.isSuccess == true)
                //{
                //    this.DataFromNetsuiteLog.Debug("SalesOrders: Logout Netsuite success.");

                //}
                //else
                //{
                //    this.DataFromNetsuiteLog.Debug("SalesOrders: Logout Netsuite failed.");
                //}

                //try
                //{ 
                //    #region Customer Info 
                //    if (pffRecord != null && pffRecord.Count() > 0)
                //    {
                //        this.DataFromNetsuiteLog.Info("SalesOrders: Number of records retrieve : " + pffRecord.Count());
                //        for (int g = 0; g < pffRecord.Count(); g++) 
                //        {
                //            SalesOrder so = (SalesOrder)pffRecord[g];
                //            String customerInternalID = so.entity.internalId;

                //            this.DataFromNetsuiteLog.Info("SalesOrders: Getting Sales Order - " + so.internalId);
                //            // DAVID
                //            String SEISSONumber = null;
                //            #region Custom Fields Looping
                //            for (int i = 0; i < so.customFieldList.Count(); i++)
                //            {
                //                if (so.customFieldList[i].ToString().Equals("sde.comNetsuiteServices.StringCustomFieldRef"))
                //                {
                //                    StringCustomFieldRef custom1 = (StringCustomFieldRef)so.customFieldList[i];
                //                    if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SEISSALESORDERNUMBER_SCRIPTID))
                //                    {
                //                        SEISSONumber = custom1.value;
                //                        var SEISCustomerID = (from q1 in entities.netsuite_newso
                //                                              where q1.nt1_moNo == SEISSONumber
                //                                              select q1.nt1_customer_internalID).FirstOrDefault();

                //                        if (!String.IsNullOrEmpty(SEISCustomerID))
                //                        {
                //                            customerInternalID = SEISCustomerID;
                //                        }
                //                        else if (!String.IsNullOrEmpty(SEISSONumber))
                //                        {
                //                            customerInternalID = "";
                //                        }
                //                    }
                //                }
                //            }
                //            #endregion
                //            // DAVID

                //            SearchPreferences sp = new SearchPreferences();
                //            sp.bodyFieldsOnly = false;
                //            service.searchPreferences = sp;
                //            CustomerSearchAdvanced csa = new CustomerSearchAdvanced();
                //            CustomerSearch cs = new CustomerSearch();
                //            CustomerSearchBasic csb = new CustomerSearchBasic();

                //            RecordRef[] refInternalID = new RecordRef[1];
                //            RecordRef refEntity = new RecordRef();
                //            refEntity.internalId = customerInternalID;//so.entity.internalId;
                //            refInternalID[0] = refEntity;

                //            SearchMultiSelectField csInternalID = new SearchMultiSelectField();
                //            csInternalID.@operator = SearchMultiSelectFieldOperator.anyOf;
                //            csInternalID.operatorSpecified = true;
                //            csInternalID.searchValue = refInternalID;
                //            csb.internalId = csInternalID;

                //            cs.basic = csb;
                //            csa.criteria = cs;
                //            this.DataFromNetsuiteLog.Info("SalesOrders: Login to search customer info.");
                //            login(); 
                //            //netsuiteStatus = service.login(passport).status;
                //            SearchResult sr = service.search(csa);
                //            logout();
                //            this.DataFromNetsuiteLog.Info("SalesOrders: Logout from search customer info");
                //            customerRecord = sr.recordList;

                //            for (int i = 0; i < customerRecord.Count(); i++)
                //            {
                //                Customer cust = (Customer)customerRecord[i];
                //                cls_customer cust2 = new cls_customer();
                //                String salesTer = null;

                //                for (int a = 0; a < cust.customFieldList.Count(); a++)
                //                {
                //                    if (cust.customFieldList[a].ToString().Equals("sde.comNetsuiteServices.SelectCustomFieldRef"))
                //                    {
                //                        SelectCustomFieldRef custom1 = (SelectCustomFieldRef)cust.customFieldList[a];
                //                        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SALESTERRITORY_SCRIPTID))
                //                        { 
                //                            switch (custom1.value.internalId)
                //                            {
                //                                case "1":
                //                                    salesTer = "TH";
                //                                    break;
                //                                case "16":
                //                                    salesTer = "TH";
                //                                    break;
                //                                case "8": 
                //                                    salesTer = "ID";
                //                                    break;
                //                                case "14":
                //                                    salesTer = "SG";
                //                                    break;
                //                                case "10":
                //                                    salesTer = "MY";
                //                                    break;
                //                                default:
                //                                    salesTer = "NA";
                //                                    break;
                //                            }
                //                        }
                //                    }
                //                }

                //                if (cust.addressbookList != null)
                //                {
                //                    cust2.custID = customerInternalID;
                //                    Int32 addBookCount = cust.addressbookList.addressbook.Count();

                //                    //Get the defaultShippingAddress instead of get the first address - WY-08.SEPT.2014
                //                    for (int b = 0; b < addBookCount; b++)
                //                    {
                //                        Boolean isDefaultShipAdd = false;
                //                        isDefaultShipAdd = cust.addressbookList.addressbook[b].defaultShipping;
                //                        if (isDefaultShipAdd == true)
                //                        {
                //                            cust2.addressee = cust.addressbookList.addressbook[b].addressee;
                //                            cust2.deliveryAdd = cust.addressbookList.addressbook[b].addr1;
                //                            cust2.deliveryAdd2 = cust.addressbookList.addressbook[b].addr2;
                //                            cust2.deliveryAdd3 = cust.addressbookList.addressbook[b].addr3;
                //                            cust2.postCode = cust.addressbookList.addressbook[b].zip;
                //                            cust2.contactPerson = cust.addressbookList.addressbook[b].attention;
                //                            cust2.phone = cust.addressbookList.addressbook[b].phone;
                //                            break;
                //                        }
                //                    }
                //                    //cust2.country = cust.addressbookList.addressbook[0].country.ToString();
                //                    cust2.country = salesTer;
                //                }

                //                listCust.Add(cust2);
                //            }
                //        }
                //    }
                //    #endregion
                //}
                //catch (Exception ex)
                //{
                //    this.DataFromNetsuiteLog.Error("SalesOrders Logout Exception: " + ex.ToString());
                //    isValidCust = false;
                //}
            }
            else
            {
                this.DataFromNetsuiteLog.Fatal("SalesOrders: Login Netsuite failed.");
                isValidCust = false;
            }
            #endregion

            this.DataFromNetsuiteLog.Info("SalesOrders: Finished getting customer info.");

            if (isValidCust == true)
            {
                var option = new TransactionOptions
                {
                    IsolationLevel = IsolationLevel.RepeatableRead,
                    Timeout = TimeSpan.FromSeconds(2400)
                };

                //using (TransactionScope scope1 = new TransactionScope())
                using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    if (pffRecord != null && pffRecord.Count() > 0)
                    {
                        Int32 tolRow = 0;
                        try
                        {
                            this.DataFromNetsuiteLog.Info("SalesOrders: " + pffRecord.Count() + " records is retrieved.");

                            String job_id = null;
                            String rangeTo = convertDateToString(Convert.ToDateTime(r.rn_rangeTo));
                            Int32 tolRecords = pffRecord.Count();

                            //for (int g = 38; g < 69; g++)
                            //for (int g = 167; g < tolRecords; g++)
                            for (int g = 0; g < tolRecords; g++)
                            {
                                SalesOrder so = (SalesOrder)pffRecord[g];
                                Boolean isValid = true;
                                String moNoInternalID = so.internalId;
                                String customerInternalID = so.entity.internalId;
                                String SEISCurrency = string.Empty; //Set Dropshipment Currency to SGD - WY-22.SPET.2014 
                                String term = checkRecordRefIsNull(so.terms); //Get creditTerm from SG SO if SEIS - WY-25.SEPT.2014 
                                if (!String.IsNullOrEmpty(term))
                                {
                                    term = SplitSalesOrderTerm(term);
                                }
                                String shipMethod = checkRecordRefIsNull(so.shipMethod);//Get ShipMethod - WY-25.SEPT.2014 

                                String SEISSONumber = null;
                                String forwarderLabel = string.Empty;
                                String forwarderTo = string.Empty;
                                String forwarderToInternalID = string.Empty;
                                String forwarderAdd1 = string.Empty;
                                String jobMoAddressee = string.Empty;
                                String jobMoContactPerson = string.Empty;
                                String jobMoPhone = string.Empty;
                                String jobMoAddr1 = string.Empty;
                                String jobMoAddr2 = string.Empty;
                                String jobMoAddr3 = string.Empty;
                                String jobMoAddr4 = string.Empty;
                                String customerIDDropshipTH = string.Empty;
                                String jobmoSchID = string.Empty;
                                String shipDate = "0001-01-01";
                                //FAS order 09/10/2018 - Mohan
                                String fasOrder = "N";
                                String SchnameFull = string.Empty;
                                String teachername = string.Empty;

                                //FAS order 09/10/2018 - Mohan end
                                if (so.shipDate != null)
                                {
                                    shipDate = convertDateToString(so.shipDate);
                                }
                                #region Custom Fields Looping


                                for (int i = 0; i < so.customFieldList.Count(); i++)
                                {
                                    if (so.customFieldList[i].ToString().Equals("sde.comNetsuiteServices.StringCustomFieldRef"))
                                    {
                                        StringCustomFieldRef custom1 = (StringCustomFieldRef)so.customFieldList[i];
                                        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SEISSALESORDERNUMBER_SCRIPTID))
                                        {
                                            isValid = false;
                                            SEISSONumber = custom1.value;
                                            //var SEISCustomerID = (from q1 in entities.netsuite_newso
                                            //                      where q1.nt1_moNo == SEISSONumber
                                            //                      select q1.nt1_customer_internalID).FirstOrDefault();

                                            //if (!String.IsNullOrEmpty(SEISCustomerID))
                                            //{
                                            //    customerInternalID = SEISCustomerID;
                                            //    SEISCurrency = "SGD"; //Set Dropshipment Currency to SGD - WY-22.SPET.2014 
                                            //    isValid = true;
                                            //}
                                            var SEISCustomerID = (from q1 in entities.netsuite_newso
                                                                  where q1.nt1_moNo == SEISSONumber
                                                                  select new
                                                                  {
                                                                      q1.nt1_customer_internalID,
                                                                      q1.nt1_creditTerm,
                                                                      q1.nt1_country,
                                                                      q1.nt1_customer
                                                                  }).Distinct().ToList();

                                            if (SEISCustomerID.Count() > 0)
                                            {
                                                customerInternalID = SEISCustomerID[0].nt1_customer_internalID;
                                                term = SEISCustomerID[0].nt1_creditTerm;
                                                //Set Dropshipment Currency - WY-29.JAN.2015
                                                switch (SEISCustomerID[0].nt1_country)
                                                {
                                                    case "SG":
                                                        SEISCurrency = "SGD";
                                                        break;
                                                    //TH DROPSHIP
                                                    case "TH":
                                                        SEISCurrency = "THB";
                                                        customerIDDropshipTH = SEISCustomerID[0].nt1_customer;
                                                        break;
                                                    default:
                                                        SEISCurrency = "";
                                                        break;
                                                }
                                                isValid = true;
                                            }
                                        }
                                        else
                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_LABEL_SCRIPTID))
                                            {
                                                forwarderLabel = custom1.value;
                                            }
                                            else if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ADDR1_SCRIPTID))
                                            {
                                                forwarderAdd1 = custom1.value;
                                            } //FAS order 09/10/2018 - Mohan
                                            else if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SCHADD_INTERNALID))
                                            {
                                                SchnameFull = custom1.value;
                                            }
                                            else if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_OFFER_DESC_INTERNAL_SCRIPTID))
                                            {
                                                teachername = custom1.value;

                                            } //FAS order 09/10/2018 - Mohan end
                                    }
                                    else
                                        if (so.customFieldList[i].ToString().Equals("sde.comNetsuiteServices.SelectCustomFieldRef"))
                                        {
                                            SelectCustomFieldRef custom1 = (SelectCustomFieldRef)so.customFieldList[i];
                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDERTO_SCRIPTID))
                                            {
                                                forwarderTo = custom1.value.name.ToString();
                                                forwarderToInternalID = custom1.value.internalId;
                                            }
                                        }
                                        //FAS order 09/10/2018 - Mohan
                                        else
                                            if (so.customFieldList[i].ToString().Equals("sde.comNetsuiteServices.BooleanCustomFieldRef"))
                                            {
                                                BooleanCustomFieldRef custom1 = (BooleanCustomFieldRef)so.customFieldList[i];
                                                if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FAS_ORDER_INTERNAL_SCRIPTID))
                                                {
                                                    if (custom1.value)
                                                    {
                                                        fasOrder = "Y";
                                                    }
                                                    //  forwarderToInternalID = custom1.value.internalId;
                                                }
                                            }
                                    //FAS order 09/10/2018 - Mohan end
                                }
                                #endregion

                                //Get Customer Info - WY-12.SEPT.2014
                                #region Get Customer Info
                                List<cls_customer> listCustInfo = new List<cls_customer>();
                                cls_customer cust2 = new cls_customer();
                                var queryCustInfo = (from q1 in entities.netsuite_syncso
                                                     where q1.nt2_moNo_internalID == moNoInternalID
                                                       && q1.nt2_custID == customerInternalID
                                                     select new
                                                     {
                                                         q1.nt2_custID,
                                                         q1.nt2_addressee,
                                                         q1.nt2_deliveryAdd,
                                                         q1.nt2_deliveryAdd2,
                                                         q1.nt2_deliveryAdd3,
                                                         q1.nt2_postCode,
                                                         q1.nt2_contactPerson,
                                                         q1.nt2_phone,
                                                         q1.nt2_country,
                                                         q1.nt2_customer,

                                                         //Added Billing Address - WY-25.SEPT.2014
                                                         q1.nt2_billingAddressee,
                                                         q1.nt2_billingAdd,
                                                         q1.nt2_billingAdd2,
                                                         q1.nt2_billingAdd3,
                                                         q1.nt2_billingPostcode,
                                                         q1.nt2_billingContactPerson,
                                                         q1.nt2_billingPhone
                                                     }).Distinct().ToList();
                                if (queryCustInfo.Count() > 0)
                                {
                                    cust2.custID = queryCustInfo[0].nt2_custID;
                                    cust2.addressee = queryCustInfo[0].nt2_addressee;
                                    cust2.deliveryAdd = queryCustInfo[0].nt2_deliveryAdd;
                                    cust2.deliveryAdd2 = queryCustInfo[0].nt2_deliveryAdd2;
                                    cust2.deliveryAdd3 = queryCustInfo[0].nt2_deliveryAdd3;
                                    cust2.postCode = queryCustInfo[0].nt2_postCode;
                                    cust2.contactPerson = queryCustInfo[0].nt2_contactPerson;
                                    cust2.phone = queryCustInfo[0].nt2_phone;
                                    cust2.country = queryCustInfo[0].nt2_country;
                                    cust2.customerID = queryCustInfo[0].nt2_customer;

                                    //Added Billing Address - WY-25.SEPT.2014
                                    cust2.billingAddressee = queryCustInfo[0].nt2_billingAddressee;
                                    cust2.billingAdd = queryCustInfo[0].nt2_billingAdd;
                                    cust2.billingAdd2 = queryCustInfo[0].nt2_billingAdd2;
                                    cust2.billingAdd3 = queryCustInfo[0].nt2_billingAdd3;
                                    cust2.billingPostcode = queryCustInfo[0].nt2_billingPostcode;
                                    cust2.billingContactPerson = queryCustInfo[0].nt2_billingContactPerson;
                                    cust2.billingPhone = queryCustInfo[0].nt2_billingPhone;

                                    listCustInfo.Add(cust2);
                                }
                                else
                                {
                                    isValid = false;
                                }
                                #endregion

                                if (isValid == true)
                                {
                                    if (listCustInfo[0].custID != customerInternalID)
                                    {
                                        isValid = false;
                                    }
                                }

                                #region Get Forwarder Address
                                //Added Forwarder Address Retrieving - WY-09.OCT.2014
                                if (((!String.IsNullOrEmpty(forwarderTo)) || (!String.IsNullOrEmpty(forwarderAdd1))) && isValid == true)
                                {
                                    var qForwarder = (from q2 in entities.forwarderadds
                                                      where q2.InternalID == forwarderToInternalID
                                                      //where q2.Name == forwarderTo
                                                      //  && q2.Address1 == forwarderAdd1 
                                                      select new
                                                      {
                                                          q2.Addressee,
                                                          q2.Address1,
                                                          q2.Address2,
                                                          q2.Address3,
                                                          q2.City,
                                                          q2.State,
                                                          q2.Postcode,
                                                          q2.Country,
                                                          q2.Attention,
                                                          q2.Phone,
                                                      }).ToList();
                                    if (qForwarder.Count() > 0)
                                    {
                                        jobMoAddressee = checkIsNull(qForwarder[0].Addressee).Replace("'", "''");
                                        jobMoAddr1 = checkIsNull(qForwarder[0].Address1).Replace("'", "''");
                                        jobMoAddr2 = checkIsNull(qForwarder[0].Address2).Replace("'", "''");
                                        jobMoAddr3 = checkIsNull(qForwarder[0].Address3).Replace("'", "''");

                                        if (!String.IsNullOrEmpty(qForwarder[0].Postcode))
                                        {
                                            jobMoAddr4 = qForwarder[0].Postcode;
                                        }

                                        if (!String.IsNullOrEmpty(qForwarder[0].City))
                                        {
                                            if (!String.IsNullOrEmpty(jobMoAddr4))
                                            {
                                                jobMoAddr4 = jobMoAddr4.TrimEnd() + " " + qForwarder[0].City;
                                            }
                                            else
                                            {
                                                jobMoAddr4 = qForwarder[0].City;
                                            }
                                        }

                                        if (!String.IsNullOrEmpty(qForwarder[0].State))
                                        {
                                            if (!String.IsNullOrEmpty(jobMoAddr4))
                                            {
                                                jobMoAddr4 = jobMoAddr4.TrimEnd() + " " + qForwarder[0].State;
                                            }
                                            else
                                            {
                                                jobMoAddr4 = qForwarder[0].State;
                                            }
                                        }

                                        if (!String.IsNullOrEmpty(qForwarder[0].Country))
                                        {
                                            if (!String.IsNullOrEmpty(jobMoAddr4))
                                            {
                                                jobMoAddr4 = jobMoAddr4.TrimEnd() + " " + qForwarder[0].Country;
                                            }
                                            else
                                            {
                                                jobMoAddr4 = qForwarder[0].Country;
                                            }
                                        }
                                        jobMoAddr4 = checkIsNull(jobMoAddr4).Replace("'", "''");
                                        jobMoContactPerson = checkIsNull(qForwarder[0].Attention).Replace("'", "''");
                                        jobMoPhone = checkIsNull(qForwarder[0].Phone).Replace("'", "''");
                                    }
                                    else
                                    {
                                        isValid = false;
                                    }
                                }
                                #endregion

                                this.DataFromNetsuiteLog.Info("SalesOrders: Customer Info Valid Status : " + isValid.ToString());

                                if (isValid == true)
                                {
                                    #region Customer Info
                                    //SearchPreferences sp = new SearchPreferences();
                                    //sp.bodyFieldsOnly = false;
                                    //service.searchPreferences = sp;
                                    //CustomerSearchAdvanced csa = new CustomerSearchAdvanced();
                                    //CustomerSearch cs = new CustomerSearch();
                                    //CustomerSearchBasic csb = new CustomerSearchBasic();

                                    //RecordRef[] refInternalID = new RecordRef[1];
                                    //RecordRef refEntity = new RecordRef();
                                    //refEntity.internalId = customerInternalID;//so.entity.internalId;
                                    //refInternalID[0] = refEntity;

                                    //SearchMultiSelectField csInternalID = new SearchMultiSelectField();
                                    //csInternalID.@operator = SearchMultiSelectFieldOperator.anyOf;
                                    //csInternalID.operatorSpecified = true;
                                    //csInternalID.searchValue = refInternalID;
                                    //csb.internalId = csInternalID;

                                    //cs.basic = csb;
                                    //csa.criteria = cs;
                                    //login();
                                    //SearchResult sr = service.search(csa);
                                    //logout();
                                    //customerRecord = sr.recordList;

                                    //String addressee = null;
                                    //String deliveryAdd = null;
                                    //String deliveryAdd2 = null;
                                    //String deliveryAdd3 = null;
                                    //String postCode = null;
                                    //String contactPerson = null;
                                    //String phone = null;
                                    //for (int i = 0; i < customerRecord.Count(); i++)
                                    //{
                                    //    Customer cust = (Customer)customerRecord[i];
                                    //    if (cust.addressbookList != null)
                                    //    {
                                    //        addressee = cust.addressbookList.addressbook[0].addressee;
                                    //        deliveryAdd = cust.addressbookList.addressbook[0].addr1;
                                    //        deliveryAdd2 = cust.addressbookList.addressbook[0].addr2;
                                    //        deliveryAdd3 = cust.addressbookList.addressbook[0].addr3;
                                    //        postCode = cust.addressbookList.addressbook[0].zip;
                                    //        contactPerson = cust.addressbookList.addressbook[0].attention;
                                    //        phone = cust.addressbookList.addressbook[0].phone;
                                    //    }
                                    //}
                                    #endregion

                                    #region Sales Info
                                    String subsidiary = null;
                                    String businessChannel = null;
                                    String currency = null;
                                    String listCustCountry = null;
                                    if (so.@class == null)
                                    {
                                        businessChannel = "NA";
                                    }
                                    else
                                    { //FAS order 09/10/2018 - Mohan
                                        if (fasOrder.Equals("Y"))
                                        {
                                            var queryBusinessChannel = (from b in entities.map_businesschannel
                                                                        where b.mb_businessChannel_internalID == "101"
                                                                        select b).FirstOrDefault();
                                            businessChannel = queryBusinessChannel.mb_imas_businessChannel_ID;
                                        } //FAS order 09/10/2018 - Mohan end
                                        else
                                        {
                                            var queryBusinessChannel = (from b in entities.map_businesschannel
                                                                        where b.mb_businessChannel_internalID == so.@class.internalId
                                                                        select b).FirstOrDefault();
                                            businessChannel = queryBusinessChannel.mb_imas_businessChannel_ID;
                                        }
                                    }

                                    ////Change to Using Country - WY-30.AUG.2014
                                    //listCustCountry = listCust[g].country.ToLower();  
                                    //switch (listCustCountry)
                                    //{
                                    //    case "_malaysia":
                                    //        subsidiary = "MY";
                                    //        break;
                                    //    case "_thailand":
                                    //        subsidiary = "TH";
                                    //        break;
                                    //    case "_hongkong":
                                    //        subsidiary = "HK";
                                    //        break;
                                    //    case "_singapore":
                                    //        subsidiary = "SG";
                                    //        break;
                                    //    case "_indonesia":
                                    //        subsidiary = "ID";
                                    //        break;
                                    //    default:
                                    //        subsidiary = "NA";
                                    //        break;
                                    //}
                                    subsidiary = listCustInfo[0].country;
                                    /*
                                     * Change to Using Country - WY-30.AUG.2014
                                    if (so.subsidiary == null)
                                    {
                                        subsidiary = "NA";
                                    }
                                    else
                                    {
                                        var querySubsidiary = (from s in entities.map_subsidiary
                                                               where s.ms_subsidiary_internalID == so.subsidiary.internalId
                                                               select s).FirstOrDefault();
                                        subsidiary = querySubsidiary.ms_countryName;
                                        currency = querySubsidiary.ms_currencyCode;
                                    }*/

                                    //Get Currency Code - WY-12.SEPT.2014
                                    #region Get Currency Code
                                    switch (so.currency.name)
                                    {
                                        case "US Dollar":
                                            currency = "USD";
                                            break;
                                        case "British pound":
                                            currency = "GBP";
                                            break;
                                        case "Canadian Dollar":
                                            currency = "CAD";
                                            break;
                                        case "Euro":
                                            currency = "EUR";
                                            break;
                                        case "Malaysian Ringgit":
                                            currency = "MYR";
                                            break;
                                        case "Singapore Dollar":
                                            currency = "SGD";
                                            break;
                                        case "Thailand Baht":
                                            currency = "THB";
                                            break;
                                        case "Indonesian Rupiah":
                                            currency = "IDR";
                                            break;
                                        case "Philippine Peso":
                                            currency = "PHP";
                                            break;
                                        case "Indian Rupee":
                                            currency = "INR";
                                            break;
                                        case "Taiwan Dollar":
                                            currency = "TWD";
                                            break;
                                        case "Hong Kong Dollar":
                                            currency = "HKD";
                                            break;
                                        case "New Zealand Dollar":
                                            currency = "NZD";
                                            break;
                                        case "Australian Dollar":
                                            currency = "AUD";
                                            break;
                                        default:
                                            currency = "";
                                            break;
                                    }
                                    //Set Dropshipment Currency to SGD - WY-22.SPET.2014
                                    if (!String.IsNullOrEmpty(SEISCurrency))
                                    {
                                        currency = SEISCurrency;
                                    }
                                    #endregion

                                    #region netsuite_job
                                    var checkJobID = (from j in entities.netsuite_job
                                                      where j.nsj_businessChannel_ID == businessChannel && j.nsj_country_tag == subsidiary
                                                      && j.nsj_rangeTo == r.rn_rangeTo
                                                      select j.nsj_jobID).FirstOrDefault();

                                    if (checkJobID == null)
                                    {
                                        Guid gjob_id = Guid.NewGuid();
                                        job_id = gjob_id.ToString();

                                        String desc = "Stock Packing List for " + subsidiary;
                                        var insertNetsuiteJob = "insert into netsuite_job (nsj_jobID, nsj_businessChannel_ID, nsj_country_tag,nsj_createdBy,nsj_createdDate," +
                                            "nsj_job_description,nsj_rangeTo) values ('" + job_id.ToString() + "','" + businessChannel + "','" + subsidiary + "','NETSUITE'," +
                                            "'" + createdDate + "','" + desc + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                        this.DataFromNetsuiteLog.Debug("SalesOrders: " + insertNetsuiteJob);
                                        entities.Database.ExecuteSqlCommand(insertNetsuiteJob);
                                    }
                                    else
                                    {
                                        job_id = checkJobID;
                                    }
                                    #endregion

                                    #region netsuite_jobmo
                                    var deleteNetsuiteJobMoCls = "delete from netsuite_jobmocls where nsjmc_jobmo_id in (select b.nsjm_jobmo_id from netsuite_jobmo b " +
                                                 "where b.nsjm_moNo = '" + so.tranId + "' and b.nsjm_nsj_job_ID = '" + job_id + "') and " +
                                                 "nsjmc_jobID = '" + job_id + "'";
                                    this.DataFromNetsuiteLog.Debug("SalesOrders: " + deleteNetsuiteJobMoCls);
                                    entities.Database.ExecuteSqlCommand(deleteNetsuiteJobMoCls);

                                    var deleteNetsuiteJobMo = "delete from netsuite_jobmo where nsjm_moNo = '" + so.tranId + "' and nsjm_nsj_job_ID = '" + job_id + "'";
                                    this.DataFromNetsuiteLog.Debug("SalesOrders: " + deleteNetsuiteJobMo);
                                    entities.Database.ExecuteSqlCommand(deleteNetsuiteJobMo);

                                    Guid jobmo_id = Guid.NewGuid();
                                    string current_jobmo_id = jobmo_id.ToString();
                                    //String term = checkRecordRefIsNull(so.terms);
                                    //this.DataFromNetsuiteLog.Debug("SalesOrders: " + term + "SO NO : " + so.tranId);
                                    //if (!String.IsNullOrEmpty(term))
                                    //{
                                    //    term = SplitSalesOrderTerm(term);
                                    //}
                                    if (subsidiary == "TH")
                                    {
                                        jobmoSchID = customerIDDropshipTH;
                                    }
                                    else
                                    {
                                        jobmoSchID = listCustInfo[0].customerID;
                                    }

                                    //FAS order 09/10/2018 - Mohan
                                    if (fasOrder.Equals("Y"))
                                    {
                                        var classDetail2 = (from q1 in entities.netsuite_newso
                                                            where q1.nt1_moNo == SEISSONumber
                                                            select new
                                                            {
                                                                q1.nt1_class_name,
                                                                q1.nt1_teacher_name
                                                            }).Distinct().ToList();
                                        int classCount2 = classDetail2.Count;


                                        string schname = SplitEntityByName(SchnameFull).Replace("'", "''");

                                        string tempEntity = SchnameFull.Split(' ')[0];

                                        var insertNetsuiteJobMo = "insert into netsuite_jobmo (nsjm_nsj_job_ID,nsjm_moNo,nsjm_jobMo_ID,nsjm_consignmentNote,nsjm_clsCnt,nsjm_contactPerson," +
                                       "nsjm_country,nsjm_deliveryAdd,nsjm_deliveryAdd_2,nsjm_deliveryAdd_3,nsjm_ordRecNoCnt,nsjm_postCode,nsjm_processPeriod,nsjm_schID,nsjm_schName," +
                                       "nsjm_status,nsjm_telNo,nsjm_schName_2,nsjm_creditTerm,nsjm_moCurrency,nsjm_deliveryType, nsjm_moNo_internalID,nsjm_tranDate,nsjm_createdDate,nsjm_rangeTo,nsjm_ns_status,nsjm_shipDate, is_fas ) " +
                                       "values ('" + job_id + "','" + so.tranId + "','" + jobmo_id + "','" + (temp_consignmentNote++) + "','" + classCount2 + "','" + checkIsNull(listCustInfo[0].contactPerson) + "'," +
                                       "'" + subsidiary + "','" + checkIsNull(listCustInfo[0].deliveryAdd).Replace("'", "''") + "','" + checkIsNull(listCustInfo[0].deliveryAdd2).Replace("'", "''") + "'," +
                                            //"'" + checkIsNull(listCustInfo[0].deliveryAdd3).Replace("'", "''") + "','1','" + checkIsNull(listCustInfo[0].postCode) + "',null,'" + SplitEntityByID(so.entity.name) + "'," +
                                       "'" + checkIsNull(listCustInfo[0].deliveryAdd3).Replace("'", "''") + "','" + classCount2 + "','" + checkIsNull(listCustInfo[0].postCode) + "',null,'" + checkIsNull(tempEntity).Replace("'", "''") + "'," + //To get Customer ID - WY-22.SEPT.2014
                                       "'" + (schname).Replace("'", "''") + "','C','" + checkIsNull(listCustInfo[0].phone) + "','" + checkIsNull(listCustInfo[0].addressee).Replace("'", "''") + "','" + term + "','" + currency + "'," +
                                       "'" + shipMethod + "','" + so.internalId + "','" + convertDateToString(so.tranDate) + "','" + createdDate + "'," +
                                       "'" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "','" + so.status.ToUpper() + "','" + shipDate + "', '" + fasOrder + "')";


                                        this.DataFromNetsuiteLog.Debug("SalesOrders: " + insertNetsuiteJobMo);
                                        entities.Database.ExecuteSqlCommand(insertNetsuiteJobMo);

                                    } //FAS order 09/10/2018 - Mohan end
                                    else
                                    {
                                        var insertNetsuiteJobMo = "insert into netsuite_jobmo (nsjm_nsj_job_ID,nsjm_moNo,nsjm_jobMo_ID,nsjm_consignmentNote,nsjm_clsCnt,nsjm_contactPerson," +
                                            "nsjm_country,nsjm_deliveryAdd,nsjm_deliveryAdd_2,nsjm_deliveryAdd_3,nsjm_ordRecNoCnt,nsjm_postCode,nsjm_processPeriod,nsjm_schID,nsjm_schName," +
                                            "nsjm_status,nsjm_telNo,nsjm_schName_2,nsjm_creditTerm,nsjm_moCurrency,nsjm_deliveryType, nsjm_moNo_internalID,nsjm_tranDate,nsjm_createdDate,nsjm_rangeTo,nsjm_ns_status,nsjm_shipDate) " +
                                            "values ('" + job_id + "','" + so.tranId + "','" + jobmo_id + "','" + (temp_consignmentNote++) + "','1','" + checkIsNull(listCustInfo[0].contactPerson) + "'," +
                                            "'" + subsidiary + "','" + checkIsNull(listCustInfo[0].deliveryAdd).Replace("'", "''") + "','" + checkIsNull(listCustInfo[0].deliveryAdd2).Replace("'", "''") + "'," +
                                            //"'" + checkIsNull(listCustInfo[0].deliveryAdd3).Replace("'", "''") + "','1','" + checkIsNull(listCustInfo[0].postCode) + "',null,'" + SplitEntityByID(so.entity.name) + "'," +
                                            "'" + checkIsNull(listCustInfo[0].deliveryAdd3).Replace("'", "''") + "','1','" + checkIsNull(listCustInfo[0].postCode) + "',null,'" + checkIsNull(jobmoSchID).Replace("'", "''") + "'," + //To get Customer ID - WY-22.SEPT.2014
                                            "'" + SplitEntityByName(so.entity.name).Replace("'", "''") + "','C','" + checkIsNull(listCustInfo[0].phone) + "','" + checkIsNull(listCustInfo[0].addressee).Replace("'", "''") + "','" + term + "','" + currency + "'," +
                                            "'" + shipMethod + "','" + so.internalId + "','" + convertDateToString(so.tranDate) + "','" + createdDate + "'," +
                                            "'" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "','" + so.status.ToUpper() + "','" + shipDate + "')";


                                        this.DataFromNetsuiteLog.Debug("SalesOrders: " + insertNetsuiteJobMo);
                                        entities.Database.ExecuteSqlCommand(insertNetsuiteJobMo);
                                    }

                                    /* //Commented due to currency directly get from SO form - WY-15.SEPT.2014
                                    var updateNetsuiteJobMo = "update netsuite_jobmo j set nsjm_moCurrency = (select ms_currencyCode from map_subsidiary where ms_currency = j.nsjm_moCurrency) " +
                                        "where j.nsjm_nsj_job_ID = '" + job_id + "' ";
                                    this.DataFromNetsuiteLog.Debug("SalesOrders: " + updateNetsuiteJobMo);
                                    entities.Database.ExecuteSqlCommand(updateNetsuiteJobMo);*/
                                    #endregion

                                    #region netsuite_jobmocls
                                    //var deleteNetsuiteJobMoCls = "delete from netsuite_jobmocls where nsjmc_jobMo_ID = '" + jobmo_id + "' and nsjmc_jobID = '" + job_id + "'";
                                    //this.DataFromNetsuiteLog.Debug("SalesOrders: " + deleteNetsuiteJobMoCls);
                                    //entities.Database.ExecuteSqlCommand(deleteNetsuiteJobMoCls);

                                    //FAS order 09/10/2018 - Mohan

                                    string fas_clsId = null;
                                    if (fasOrder.Equals("Y"))
                                    {

                                        var classDetail = (from q1 in entities.netsuite_newso
                                                           where q1.nt1_moNo == SEISSONumber
                                                           select new
                                                           {
                                                               q1.nt1_class_name,
                                                               q1.nt1_teacher_name
                                                           }).Distinct().ToList();
                                        int classCount = classDetail.Count;
                                        if (classDetail.Count > 0)
                                        {
                                            //to update here
                                            for (int i = 0; i < classCount; i++)
                                            {
                                                Guid jobmocls_id = Guid.NewGuid();
                                                fas_clsId = jobmocls_id.ToString();
                                                var insertNetsuiteJobMoCls = "insert into netsuite_jobmocls (nsjmc_jobMoCls_ID,nsjmc_jobID,nsjmc_jobMo_ID,nsjmc_clsNo,nsjmc_teacherName,nsjmc_createdDate,nsjmc_rangeTo) values (" +
                                                    "'" + jobmocls_id + "','" + job_id + "','" + jobmo_id + "','" + (classDetail[i].nt1_class_name).Replace("'", "''") + "','" + (classDetail[i].nt1_teacher_name).Replace("'", "''") + "'," +
                                                    "'" + createdDate + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                                this.DataFromNetsuiteLog.Debug("SalesOrders: " + insertNetsuiteJobMoCls);
                                                entities.Database.ExecuteSqlCommand(insertNetsuiteJobMoCls);
                                            }

                                        }

                                    }
                                    //FAS order 09/10/2018 - Mohan end
                                    else
                                    {
                                        Guid jobmocls_id = Guid.NewGuid();
                                        var insertNetsuiteJobMoCls = "insert into netsuite_jobmocls (nsjmc_jobMoCls_ID,nsjmc_jobID,nsjmc_jobMo_ID,nsjmc_clsNo,nsjmc_teacherName,nsjmc_createdDate,nsjmc_rangeTo) values (" +
                                            "'" + jobmocls_id + "','" + job_id + "','" + jobmo_id + "','" + SplitEntityByID(so.entity.name) + "','" + SplitTeacherName(so.entity.name).Replace("'", "''") + "'," +
                                            "'" + createdDate + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                        this.DataFromNetsuiteLog.Debug("SalesOrders: " + insertNetsuiteJobMoCls);
                                        entities.Database.ExecuteSqlCommand(insertNetsuiteJobMoCls);
                                    }

                                    #endregion

                                    #region netsuite_jobmo_address
                                    var deleteNetsuiteJobMoAddress = "delete from netsuite_jobmo_address where nsjma_moNo = '" + so.tranId + "' and nsjma_nsj_jobID = '" + job_id + "'";
                                    this.DataFromNetsuiteLog.Debug("SalesOrders: " + deleteNetsuiteJobMoAddress);
                                    entities.Database.ExecuteSqlCommand(deleteNetsuiteJobMoAddress);

                                    String shippingDeliveryType = null;
                                    String forwardDeliveryType = null;
                                    if (!String.IsNullOrEmpty(SEISSONumber) && subsidiary == "SG")//Only apply for SG Dropship
                                    {
                                        shippingDeliveryType = "E";
                                        forwardDeliveryType = "I";
                                    }
                                    else
                                    {
                                        shippingDeliveryType = "I";
                                        forwardDeliveryType = "E";
                                    }

                                    #region forwarder address
                                    /*
                                    for (int i = 0; i < so.customFieldList.Count(); i++)
                                    {
                                        if (so.customFieldList[i].ToString().Equals("sde.comNetsuiteServices.StringCustomFieldRef"))
                                        {
                                            StringCustomFieldRef custom1 = (StringCustomFieldRef)so.customFieldList[i];
                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_LABEL_SCRIPTID))
                                            {
                                                jobMolabel = custom1.value;
                                            }
                                            else if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ADDR1_SCRIPTID))
                                            {
                                                jobMoAddr1 = custom1.value;
                                            }
                                            else if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ADDR2_SCRIPTID))
                                            {
                                                jobMoAddr2 = custom1.value;
                                            }
                                            else if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ADDR3_SCRIPTID))
                                            {
                                                jobMoAddr3 = custom1.value;
                                            }
                                            else if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_ATTENTION_SCRIPTID))
                                            {
                                                jobMoContactPerson = custom1.value;
                                            }
                                            else if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FORWARDER_PHONE_SCRIPTID))
                                            {
                                                jobMoPhone = custom1.value;
                                            }
                                            //Not required - WY-18.SEPT.2014
                                            //if (String.IsNullOrEmpty(jobMolabel) || String.IsNullOrEmpty(jobMoAddr1) || String.IsNullOrEmpty(jobMoAddr2) || String.IsNullOrEmpty(jobMoAddr3))
                                            //{
                                            //    shippingDeliveryType = "E";
                                            //    forwardDeliveryType = "I";
                                            //}
                                        }
                                    }*/

                                    if (!String.IsNullOrEmpty(jobMoAddressee) || !String.IsNullOrEmpty(jobMoAddr1) || !String.IsNullOrEmpty(jobMoAddr2) || !String.IsNullOrEmpty(jobMoAddr3) || !String.IsNullOrEmpty(jobMoAddr4))
                                    {
                                        Guid jobMoAddr_id2 = Guid.NewGuid();
                                        //var insertNetsuiteJobMoAddressForwarder = @"insert into netsuite_jobmo_address (nsjma_jobMoAddress_ID,nsjma_nsjm_jobMoID,nsjma_jobMoAddress_name,nsjma_jobMoAddress_1," +
                                        //    "nsjma_jobMoAddress_2,nsjma_jobMoAddress_3,nsjma_moNo,nsjma_jobMoAddress_contact,nsjma_jobMoAddress_deliveryType,nsjma_nsj_jobID,nsjma_jobMoAddress_tag," +
                                        //    "nsjma_jobMoAddress_tel,nsjma_moNo_internalID,nsjma_createdDate,nsjma_rangeTo) values ('" + jobMoAddr_id2 + "','" + jobmo_id + "'," +
                                        //    "'" + jobMolabel.Replace("'", "''") + "','" + jobMoAddr1.Replace("'", "''") + "','" + jobMoAddr2.Replace("'", "''") + "','" + jobMoAddr3.Replace("'", "''") + "'," +
                                        //    "'" + so.tranId + "','" + jobMoContactPerson + "','" + shipMethod + "','" + job_id + "','" + forwardDeliveryType + "','" + jobMoPhone + "','" + so.internalId + "','" + createdDate + "'," +
                                        //    "'" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                        var insertNetsuiteJobMoAddressForwarder = @"insert into netsuite_jobmo_address (nsjma_jobMoAddress_ID,nsjma_nsjm_jobMoID,nsjma_jobMoAddress_name,nsjma_jobMoAddress_1," +
                                            "nsjma_jobMoAddress_2,nsjma_jobMoAddress_3,nsjma_moNo,nsjma_jobMoAddress_contact,nsjma_jobMoAddress_deliveryType,nsjma_nsj_jobID,nsjma_jobMoAddress_tag," +
                                            "nsjma_jobMoAddress_tel,nsjma_moNo_internalID,nsjma_createdDate,nsjma_rangeTo,nsjma_jobMoAddress_4) values ('" + jobMoAddr_id2 + "','" + jobmo_id + "'," +
                                            "'" + jobMoAddressee + "','" + jobMoAddr1 + "','" + jobMoAddr2 + "','" + jobMoAddr3 + "'," +
                                            "'" + so.tranId + "','" + jobMoContactPerson + "','" + shipMethod + "','" + job_id + "','" + forwardDeliveryType + "','" + jobMoPhone + "','" + so.internalId + "','" + createdDate + "'," +
                                            "'" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "','" + jobMoAddr4 + "')";
                                        this.DataFromNetsuiteLog.Debug("SalesOrders: " + insertNetsuiteJobMoAddressForwarder);
                                        entities.Database.ExecuteSqlCommand(insertNetsuiteJobMoAddressForwarder);
                                    }
                                    //Set default forwarder address for TH,NA and ID - WY-23.SEPT.2014
                                    else
                                        if (subsidiary == "NA" || subsidiary == "TH" || subsidiary == "ID")
                                        {
                                            var defaultForwarder = (from q1 in entities.default_forwarder
                                                                    where q1.code == subsidiary
                                                                    select new
                                                                     {
                                                                         q1.focCoName,
                                                                         q1.fobAddr1,
                                                                         q1.fobAddr2,
                                                                         q1.fobCity,
                                                                         q1.fobUen,
                                                                         q1.fobTelNo,
                                                                         q1.fobFaxNo,
                                                                         q1.fobContactName
                                                                     }).ToList().FirstOrDefault();

                                            jobMoAddressee = checkIsNull(defaultForwarder.focCoName);
                                            jobMoAddr1 = checkIsNull(defaultForwarder.fobAddr1);
                                            jobMoAddr2 = checkIsNull(defaultForwarder.fobAddr2);
                                            jobMoAddr3 = checkIsNull(defaultForwarder.fobCity);
                                            jobMoContactPerson = checkIsNull(defaultForwarder.fobContactName);
                                            jobMoPhone = checkIsNull(defaultForwarder.fobTelNo);

                                            Guid jobMoAddr_id2 = Guid.NewGuid();
                                            var insertNetsuiteJobMoAddressForwarder = @"insert into netsuite_jobmo_address (nsjma_jobMoAddress_ID,nsjma_nsjm_jobMoID,nsjma_jobMoAddress_name,nsjma_jobMoAddress_1," +
                                                "nsjma_jobMoAddress_2,nsjma_jobMoAddress_3,nsjma_moNo,nsjma_jobMoAddress_contact,nsjma_jobMoAddress_deliveryType,nsjma_nsj_jobID,nsjma_jobMoAddress_tag," +
                                                "nsjma_jobMoAddress_tel,nsjma_moNo_internalID,nsjma_createdDate,nsjma_rangeTo) values ('" + jobMoAddr_id2 + "','" + jobmo_id + "'," +
                                                "'" + jobMoAddressee.Replace("'", "''") + "','" + jobMoAddr1.Replace("'", "''") + "','" + jobMoAddr2.Replace("'", "''") + "','" + jobMoAddr3.Replace("'", "''") + "'," +
                                                "'" + so.tranId + "','" + jobMoContactPerson + "','" + shipMethod + "','" + job_id + "','" + forwardDeliveryType + "','" + jobMoPhone + "','" + so.internalId + "','" + createdDate + "'," +
                                                "'" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                            this.DataFromNetsuiteLog.Debug("SalesOrders: " + insertNetsuiteJobMoAddressForwarder);
                                            entities.Database.ExecuteSqlCommand(insertNetsuiteJobMoAddressForwarder);
                                        }
                                    #endregion

                                    #region shipping address
                                    //Check if TH and NA using billing Address
                                    if (subsidiary == "NA" || subsidiary == "TH" || subsidiary == "ID")
                                    {
                                        Guid jobMoAddr_id = Guid.NewGuid();
                                        var insertNetsuiteJobMoAddressShipping = "insert into netsuite_jobmo_address (nsjma_jobMoAddress_ID,nsjma_nsjm_jobMoID,nsjma_jobMoAddress_name,nsjma_jobMoAddress_1," +
                                            "nsjma_jobMoAddress_2,nsjma_jobMoAddress_3,nsjma_moNo,nsjma_jobMoAddress_contact,nsjma_jobMoAddress_deliveryType,nsjma_nsj_jobID,nsjma_jobMoAddress_tag," +
                                            "nsjma_jobMoAddress_tel,nsjma_moNo_internalID,nsjma_createdDate,nsjma_rangeTo) values ('" + jobMoAddr_id + "','" + jobmo_id + "'," +
                                            "'" + checkIsNull(listCustInfo[0].billingAddressee).Replace("'", "''") + "','" + checkIsNull(listCustInfo[0].billingAdd).Replace("'", "''") + "'," +
                                            "'" + checkIsNull(listCustInfo[0].billingAdd2).Replace("'", "''") + "','" + checkIsNull(listCustInfo[0].billingAdd3).Replace("'", "''") + "'," +
                                            "'" + so.tranId + "','" + checkIsNull(listCustInfo[0].billingContactPerson) + "','" + shipMethod + "','" + job_id + "','" + shippingDeliveryType + "','" + checkIsNull(listCustInfo[0].billingPhone) + "'," +
                                            "'" + so.internalId + "','" + createdDate + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                        this.DataFromNetsuiteLog.Debug("SalesOrders: " + insertNetsuiteJobMoAddressShipping);
                                        entities.Database.ExecuteSqlCommand(insertNetsuiteJobMoAddressShipping);
                                    }
                                    else
                                    {
                                        Guid jobMoAddr_id = Guid.NewGuid();
                                        var insertNetsuiteJobMoAddressShipping = "insert into netsuite_jobmo_address (nsjma_jobMoAddress_ID,nsjma_nsjm_jobMoID,nsjma_jobMoAddress_name,nsjma_jobMoAddress_1," +
                                            "nsjma_jobMoAddress_2,nsjma_jobMoAddress_3,nsjma_moNo,nsjma_jobMoAddress_contact,nsjma_jobMoAddress_deliveryType,nsjma_nsj_jobID,nsjma_jobMoAddress_tag," +
                                            "nsjma_jobMoAddress_tel,nsjma_moNo_internalID,nsjma_createdDate,nsjma_rangeTo) values ('" + jobMoAddr_id + "','" + jobmo_id + "'," +
                                            "'" + checkIsNull(listCustInfo[0].addressee).Replace("'", "''") + "','" + checkIsNull(listCustInfo[0].deliveryAdd).Replace("'", "''") + "'," +
                                            "'" + checkIsNull(listCustInfo[0].deliveryAdd2).Replace("'", "''") + "','" + checkIsNull(listCustInfo[0].deliveryAdd3).Replace("'", "''") + "'," +
                                            "'" + so.tranId + "','" + checkIsNull(listCustInfo[0].contactPerson) + "','" + shipMethod + "','" + job_id + "','" + shippingDeliveryType + "','" + checkIsNull(listCustInfo[0].phone) + "'," +
                                            "'" + so.internalId + "','" + createdDate + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                        this.DataFromNetsuiteLog.Debug("SalesOrders: " + insertNetsuiteJobMoAddressShipping);
                                        entities.Database.ExecuteSqlCommand(insertNetsuiteJobMoAddressShipping);
                                    }
                                    #endregion
                                    #endregion

                                    #region netsuite_jobordmaster

                                    //no need add I infornt 
                                    //while (ordRecNo.Length < 8)
                                    //{
                                    //    ordRecNo = "I" + ordRecNo;
                                    //}

                                    //FAS order 09/10/2018 - Mohan

                                    if (fasOrder.Equals("Y"))
                                    {
                                        //jobmo_id

                                        var classDetail = (from q1 in entities.netsuite_jobmocls
                                                           where q1.nsjmc_jobID == job_id && q1.nsjmc_jobMo_ID == current_jobmo_id
                                                           select new
                                                           {
                                                               q1.nsjmc_jobMoCls_ID,
                                                               q1.nsjmc_clsNo,
                                                               q1.nsjmc_teacherName
                                                           }).Distinct().ToList();


                                        int classCount = classDetail.Count;

                                        int counter = 1;
                                        string newCounter = "";
                                        //to update here
                                        for (int i = 0; i < classCount; i++)
                                        {
                                            newCounter = counter.ToString();
                                            newCounter = counter.ToString().PadLeft(3, '0');
                                            DateTime myDateTime = DateTime.Now;


                                            string sMonth = DateTime.Now.ToString("MM");
                                            string sYear = myDateTime.ToString("yy");
                                            //string sYear = year.ToString("YY");

                                            newCounter = "F" + sMonth + sYear + newCounter;

                                            Guid jobordmaster_id = Guid.NewGuid();
                                            var insertNetsuiteJobOrdMaster = "insert into netsuite_jobordmaster (nsjom_jobordmaster_ID,nsjom_nsj_job_ID,nsjom_ordRecNo,nsjom_ordStudent,nsjom_clsID," +
                                                "nsjom_moNo,nsjom_consignmentNote,nsjom_processPeriod,nsjom_country,nsjom_moNo_internalID,nsjom_createdDate, nsjom_rangeTo,nsjom_jobmo_id,nsjom_memo, nsjom_jobCls_id) values ('" + jobordmaster_id + "','" + job_id + "'," +
                                                "'" + newCounter + "','" + (classDetail[i].nsjmc_teacherName).Replace("'", "''") + "','" + (classDetail[i].nsjmc_clsNo).Replace("'", "''") + "','" + so.tranId + "','','','" + subsidiary + "','" + so.internalId + "'," +
                                                "'" + createdDate + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "','" + jobmo_id + "','" + checkIsNull(so.memo).Replace("'", "''") + "', '" + checkIsNull(classDetail[i].nsjmc_jobMoCls_ID).Replace("'", "''") + "')";
                                            this.DataFromNetsuiteLog.Debug("SalesOrders: " + insertNetsuiteJobOrdMaster);
                                            entities.Database.ExecuteSqlCommand(insertNetsuiteJobOrdMaster);
                                            counter++;
                                        }


                                    } //FAS order 09/10/2018 - Mohan end
                                    else
                                    {

                                        var deleteNetsuiteJobOrdMaster = "delete from netsuite_jobordmaster where nsjom_moNo = '" + so.tranId + "' and nsjom_nsj_job_ID = '" + job_id + "'";
                                        this.DataFromNetsuiteLog.Debug("SalesOrders: " + deleteNetsuiteJobOrdMaster);
                                        entities.Database.ExecuteSqlCommand(deleteNetsuiteJobOrdMaster);

                                        String ordRecNo = SplitMoNo(so.tranId);

                                        Guid jobordmaster_id = Guid.NewGuid();
                                        var insertNetsuiteJobOrdMaster = "insert into netsuite_jobordmaster (nsjom_jobordmaster_ID,nsjom_nsj_job_ID,nsjom_ordRecNo,nsjom_ordStudent,nsjom_clsID," +
                                            "nsjom_moNo,nsjom_consignmentNote,nsjom_processPeriod,nsjom_country,nsjom_moNo_internalID,nsjom_createdDate, nsjom_rangeTo,nsjom_jobmo_id,nsjom_memo, nsjom_jobCls_id) values ('" + jobordmaster_id + "','" + job_id + "'," +
                                            "'" + ordRecNo + "','" + checkIsNull(so.otherRefNum).Replace("'", "''") + "','" + checkIsNull(so.otherRefNum).Replace("'", "''") + "','" + so.tranId + "','','','" + subsidiary + "','" + so.internalId + "'," +
                                            "'" + createdDate + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "','" + jobmo_id + "','" + checkIsNull(so.memo).Replace("'", "''") + "', '')";
                                        this.DataFromNetsuiteLog.Debug("SalesOrders: " + insertNetsuiteJobOrdMaster);
                                        entities.Database.ExecuteSqlCommand(insertNetsuiteJobOrdMaster);
                                    }

                                    #endregion

                                    //Split Table netsuite_jobordmaster_pack, netsuite_jobordmaster_packdetail, netsuite_jobmo_pack, netsuite_jobitem - WY-29.AUG.2014 
                                    #region netsuite_jobordmaster_pack, netsuite_jobordmaster_packdetail, netsuite_jobmo_pack, netsuite_jobitem
                                    /*
                                 this.DataFromNetsuiteLog.Debug("SalesOrders: Inserting netsuite_jobordmaster_pack, netsuite_jobordmaster_packdetail, netsuite_jobmo_pack and netsuite_jobitem.");

                                List<NewSO> newSOList = new List<NewSO>();
                                List<SyncSO> syncSOList = new List<SyncSO>();

                                if (!String.IsNullOrEmpty(SEISSONumber))
                                {
                                    var q20 = (from q1 in entities.netsuite_newso
                                               where q1.nt1_moNo == SEISSONumber && q1.nt1_committedQty > 0 && (q1.nt1_rangeTo > trangeFrom
                                               && q1.nt1_rangeTo <= trangeTo)
                                               select new NewSO()
                                               {
                                                   itemInternalID = q1.nt1_item_internalID,
                                                   committedQty = q1.nt1_committedQty,
                                                   ordQty = q1.nt1_ordQty,
                                                   tax = q1.nt1_tax,
                                                   discount = q1.nt1_discount,
                                                   rate = q1.nt1_rate,
                                                   amount = q1.nt1_amount
                                               });
                                    newSOList = q20.ToList();
                                }
                                else
                                {
                                    var q20 = (from q1 in entities.netsuite_syncso
                                               where q1.nt2_moNo == so.tranId && (q1.nt2_rangeTo > trangeFrom && q1.nt2_rangeTo <= trangeTo)
                                               select new SyncSO
                                               {
                                                   itemInternalID = q1.nt2_item_internalID,
                                                   committedQty = q1.nt2_qtyForWMS,
                                                   ordQty = q1.nt2_ordQty,
                                                   tax = q1.nt2_tax,
                                                   discount = q1.nt2_discount,
                                                   rate = q1.nt2_rate,
                                                   amount = q1.nt2_amount
                                               }).ToList();
                                    syncSOList = q20;
                                }

                                String itemID = "";
                                String title = "";
                                String itemInternalID = "";
                                Double commitQty = 0;
                                Double ordQty = 0;
                                Double tax = 0;
                                Double discount = 0;
                                Double rate = 0;
                                Double amount = 0;
                                String location = "";*/

                                    #region delete duplicate item
                                    /*
                                var query2 = (from q2 in entities.netsuite_jobordmaster_pack
                                              where q2.nsjomp_ordNo == so.tranId && q2.nsjomp_job_ID == job_id
                                              select q2).ToList();

                                foreach (var q2 in query2)
                                {
                                    var deleteNetsuiteJobOrdMasterPackDetail = "delete from netsuite_jobordmaster_packdetail where nsjompd_jobOrdMaster_pack_ID = '" + q2.nsjomp_jobOrdMaster_pack_ID + "'";
                                    this.DataFromNetsuiteLog.Debug("SalesOrders: " + deleteNetsuiteJobOrdMasterPackDetail);
                                    entities.Database.ExecuteSqlCommand(deleteNetsuiteJobOrdMasterPackDetail);
                                }

                                var deleteNetsuiteJobOrdMasterPack = "delete from netsuite_jobordmaster_pack where nsjomp_ordNo = '" + so.tranId + "' and nsjomp_job_ID = '" + job_id + "'";
                                this.DataFromNetsuiteLog.Debug("SalesOrders: " + deleteNetsuiteJobOrdMasterPack);
                                entities.Database.ExecuteSqlCommand(deleteNetsuiteJobOrdMasterPack);

                                var deleteNetsuiteJobMOPack = "delete from netsuite_jobmo_pack where nsjmp_moNo = '" + so.tranId + "' and nsjmp_nsj_jobID = '" + job_id + "'";
                                this.DataFromNetsuiteLog.Debug("SalesOrders: " + deleteNetsuiteJobMOPack);
                                entities.Database.ExecuteSqlCommand(deleteNetsuiteJobMOPack);

                                var deleteNetsuiteJobItem = "delete from netsuite_jobitem where nsji_moNo = '" + so.tranId + "' and nsji_nsj_jobID = '" + job_id + "'";
                                this.DataFromNetsuiteLog.Debug("SalesOrders: " + deleteNetsuiteJobItem);
                                entities.Database.ExecuteSqlCommand(deleteNetsuiteJobItem);
                                */
                                    #endregion

                                    #region From netsuite_newso
                                    /*
                                if (newSOList.Count() > 0)
                                {
                                    Int32 line = 0;

                                    foreach (var i in newSOList)
                                    {
                                        itemID = "";
                                        title = "";
                                        itemInternalID = i.itemInternalID;// so.itemList.item[i].item.internalId;
                                        commitQty = Convert.ToDouble(i.committedQty);// so.itemList.item[i].quantityCommitted;
                                        ordQty = Convert.ToDouble(i.ordQty);// so.itemList.item[i].quantity;
                                        tax = Convert.ToDouble(i.tax);// so.itemList.item[i].taxRate1;
                                        discount = 0;
                                        rate = Convert.ToDouble(i.rate);// Convert.ToDouble(so.itemList.item[i].rate);
                                        amount = commitQty * rate * ((100 + tax) / 100); //Convert.ToDouble(i.amount);// so.itemList.item[i].grossAmt;
                                        location = checkRecordRefIsNull_internalID(so.location);//checkRecordRefIsNull_internalID(so.itemList.item[i].location);
                                        
                                        //var query1 = (from q1 in entities.netsuite_newso
                                        //              where q1.nt1_rangeTo == r.rn_rangeTo && q1.nt1_moNo_internalID == so.internalId && q1.nt1_item_internalID == itemInternalID
                                        //              select q1).ToList();
                            
                                        //if (query1.Count() > 0)
                                        //{
                                        //    foreach (var q1 in query1)
                                        //    {
                                        //        commitQty = Convert.ToDouble(q1.nt1_committedQty);
                                        //        amount = commitQty * rate * ((100 + tax) / 100);
                                        //    }
                                        //}

                                        var item = (from ii in entities.map_item
                                                    where ii.mi_item_internalID == itemInternalID
                                                    select ii).FirstOrDefault();

                                        if (item != null)
                                        {
                                            itemID = checkIsNull(item.mi_item_ID);
                                            title = checkIsNull(item.mi_item_title).Replace("'", "''");
                                        }

                                        if (!String.IsNullOrEmpty(so.discountRate))
                                        {
                                            discount = Convert.ToDouble(so.discountRate.TrimStart('-').TrimEnd('%'));
                                        }

                                        #region netsuite_jobordmaster_pack
                                        Guid jobordmaster_pack_id = Guid.NewGuid();
                                        var insertNetsuiteJobOrdMasterPack = "insert into netsuite_jobordmaster_pack (nsjomp_jobOrdMaster_pack_ID,nsjomp_jobOrdMaster_ID,nsjomp_job_ID,nsjomp_ordNo,nsjomp_ordPack," +
                                            "nsjomp_item_internalID,nsjomp_qty,nsjomp_ordQty,nsjomp_ordPrice,nsjomp_ordReplace,nsjomp_ofrCode,nsjomp_status,nsjomp_ordPackStatus,nsjomp_ordFulfill,nsjomp_ordDetDate,nsjomp_ordPoint," +
                                            "nsjomp_packTitle,nsjomp_ofrDesc,nsjomp_location_internalID,nsjomp_tax,nsjomp_discount,nsjomp_orderLine,nsjomp_createdDate, nsjomp_rangeTo, nsjomp_moNo) values ('" + jobordmaster_pack_id + "','" + jobordmaster_id + "'," +
                                            "'" + job_id + "','" + so.tranId + "','" + itemID + "','" + itemInternalID + "','" + ordQty + "','" + commitQty + "','" + rate + "','Y','TRADE','C','N','" + commitQty + "'," +
                                            "'" + convertDateToString(so.tranDate) + "','0','" + title + "',null,'" + location + "','" + tax + "','" + discount + "','" + (line + 1) + "','" + createdDate + "'," +
                                            "'" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "','" + so.tranId + "')";
                                        this.DataFromNetsuiteLog.Debug("SalesOrders (newso): " + insertNetsuiteJobOrdMasterPack);
                                        entities.Database.ExecuteSqlCommand(insertNetsuiteJobOrdMasterPack);
                                        #endregion

                                        #region netsuite_jobordmaster_packdetail
                                        Guid jobordmaster_packdetail_id = Guid.NewGuid();
                                        var insertNetsuiteJobOrdMasterPackDetail = "insert into netsuite_jobordmaster_packdetail (nsjompd_jobOrdMaster_packDetail_ID,nsjompd_jobOrdMaster_pack_ID,nsjompd_job_ID,nsjompd_ordPack,nsjompd_skuNo,nsjompd_isbn," +
                                            "nsjompd_isbn_secondary,nsjompd_item_internalID,nsjompd_sku_qty,nsjompd_item_ID,nsjompd_total_qty,nsjompd_scanned_qty,nsjompd_createdDate,nsjompd_rangeTo) values ('" + jobordmaster_packdetail_id + "'," +
                                            "'" + jobordmaster_pack_id + "','" + job_id + "','" + itemID + "','" + itemID + "','" + itemID + "','" + itemID + "','" + itemInternalID + "','" + commitQty + "','" + itemID + "','" + commitQty + "','0'," +
                                            "'" + createdDate + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                        this.DataFromNetsuiteLog.Debug("SalesOrders (newso): " + insertNetsuiteJobOrdMasterPackDetail);
                                        entities.Database.ExecuteSqlCommand(insertNetsuiteJobOrdMasterPackDetail);
                                        #endregion

                                        #region netsuite_jobmo_pack
                                        Guid job_packID = Guid.NewGuid();
                                        var insertNetsuiteJobMOPack = "insert into netsuite_jobmo_pack (nsjmp_jobmoPack_ID,nsjmp_nsj_jobID,nsjmp_moNo,nsjmp_schID,nsjmp_schName,nsjmp_packID,nsjmp_packTitles,nsjmp_item_internalID," +
                                            "nsjmp_packPrice,nsjmp_qty,nsjmp_amt,nsjmp_packISBN,nsjmp_moNo_internalID,nsjmp_createdDate,nsjmp_rangeTo) values ('" + job_packID + "','" + job_id + "','" + so.tranId + "'," +
                                            "'" + GetFirstSixChar(so.entity.name) + "','" + SplitEntityByName(so.entity.name).Replace("'", "''") + "','" + itemID + "','" + title + "','" + itemInternalID + "','" + rate + "','" + commitQty + "'," +
                                            "'" + amount + "','" + itemID + "','" + so.internalId + "','" + createdDate + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                        this.DataFromNetsuiteLog.Debug("SalesOrders (newso): " + insertNetsuiteJobMOPack);
                                        entities.Database.ExecuteSqlCommand(insertNetsuiteJobMOPack);
                                        #endregion

                                        #region netsuite_jobitem
                                        Guid job_itemID = Guid.NewGuid();
                                        var insertNetsuiteJobItem = "insert into netsuite_jobitem (nsji_jobItem_ID,nsji_nsj_jobID,nsji_createdBy,nsji_createdDate,nsji_item_ID,nsji_item_qty," +
                                            "nsji_posting_type,nsji_moNo,nsji_moNo_internalID,nsji_rangeTo) values ('" + job_itemID + "','" + job_id + "','NETSUITE','" + createdDate + "'," +
                                            "'" + itemID + "','" + commitQty + "','SALES','" + so.tranId + "','" + so.internalId + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                        this.DataFromNetsuiteLog.Debug("SalesOrders (newso): " + insertNetsuiteJobItem);
                                        entities.Database.ExecuteSqlCommand(insertNetsuiteJobItem);
                                        #endregion
                                        line++;
                                    }
                                }*/
                                    #endregion

                                    #region from netsuite_syncso
                                    /*
                                else if (syncSOList.Count() > 0)
                                {
                                    Int32 line = 0;
                                    foreach (var i in syncSOList)
                                    {
                                        itemID = "";
                                        title = "";
                                        itemInternalID = i.itemInternalID;// so.itemList.item[i].item.internalId;
                                        commitQty = Convert.ToDouble(i.committedQty); //Convert.ToDouble(i.committedQty);// so.itemList.item[i].quantityCommitted;
                                        ordQty = Convert.ToDouble(i.ordQty);// so.itemList.item[i].quantity;
                                        tax = Convert.ToDouble(i.tax);// so.itemList.item[i].taxRate1;
                                        discount = 0;
                                        rate = Convert.ToDouble(i.rate);// Convert.ToDouble(so.itemList.item[i].rate);
                                        amount = commitQty * rate * ((100 + tax) / 100); //Convert.ToDouble(i.amount);// so.itemList.item[i].grossAmt;
                                        location = checkRecordRefIsNull_internalID(so.location);//checkRecordRefIsNull_internalID(so.itemList.item[i].location);

                                        
                                        //var query1 = (from q1 in entities.netsuite_syncso
                                        //              where q1.nt2_rangeTo == r.rn_rangeTo && q1.nt2_moNo_internalID == so.internalId && q1.nt2_item_internalID == itemInternalID
                                        //              select q1).ToList();

                                        //if (query1.Count() > 0)
                                        //{
                                        //    foreach (var q1 in query1)
                                        //    {
                                        //        commitQty = Convert.ToDouble(q1.nt2_qtyForWMS);
                                        //        amount = commitQty * rate * ((100 + tax) / 100);
                                        //    }
                                        //}
                                        
                                        var item = (from ii in entities.map_item
                                                    where ii.mi_item_internalID == itemInternalID
                                                    select ii).FirstOrDefault();

                                        if (item != null)
                                        {
                                            itemID = checkIsNull(item.mi_item_ID);
                                            title = checkIsNull(item.mi_item_title).Replace("'", "''");
                                        }

                                        if (!String.IsNullOrEmpty(so.discountRate))
                                        {
                                            discount = Convert.ToDouble(so.discountRate.TrimStart('-').TrimEnd('%'));
                                        }

                                        #region netsuite_jobordmaster_pack
                                        Guid jobordmaster_pack_id = Guid.NewGuid();
                                        var insertNetsuiteJobOrdMasterPack = "insert into netsuite_jobordmaster_pack (nsjomp_jobOrdMaster_pack_ID,nsjomp_jobOrdMaster_ID,nsjomp_job_ID,nsjomp_ordNo,nsjomp_ordPack," +
                                            "nsjomp_item_internalID,nsjomp_qty,nsjomp_ordQty,nsjomp_ordPrice,nsjomp_ordReplace,nsjomp_ofrCode,nsjomp_status,nsjomp_ordPackStatus,nsjomp_ordFulfill,nsjomp_ordDetDate,nsjomp_ordPoint," +
                                            "nsjomp_packTitle,nsjomp_ofrDesc,nsjomp_location_internalID,nsjomp_tax,nsjomp_discount,nsjomp_orderLine,nsjomp_createdDate, nsjomp_rangeTo, nsjomp_moNo) values ('" + jobordmaster_pack_id + "','" + jobordmaster_id + "'," +
                                            "'" + job_id + "','" + so.tranId + "','" + itemID + "','" + itemInternalID + "','" + ordQty + "','" + commitQty + "','" + rate + "','Y','TRADE','C','N','" + commitQty + "'," +
                                            "'" + convertDateToString(so.tranDate) + "','0','" + title + "',null,'" + location + "','" + tax + "','" + discount + "','" + (line + 1) + "','" + createdDate + "'," +
                                            "'" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "','" + so.tranId + "')";
                                        this.DataFromNetsuiteLog.Debug("SalesOrders (syncso): " + insertNetsuiteJobOrdMasterPack);
                                        entities.Database.ExecuteSqlCommand(insertNetsuiteJobOrdMasterPack);
                                        #endregion

                                        #region netsuite_jobordmaster_packdetail
                                        Guid jobordmaster_packdetail_id = Guid.NewGuid();
                                        var insertNetsuiteJobOrdMasterPackDetail = "insert into netsuite_jobordmaster_packdetail (nsjompd_jobOrdMaster_packDetail_ID,nsjompd_jobOrdMaster_pack_ID,nsjompd_job_ID,nsjompd_ordPack,nsjompd_skuNo,nsjompd_isbn," +
                                            "nsjompd_isbn_secondary,nsjompd_item_internalID,nsjompd_sku_qty,nsjompd_item_ID,nsjompd_total_qty,nsjompd_scanned_qty,nsjompd_createdDate,nsjompd_rangeTo) values ('" + jobordmaster_packdetail_id + "'," +
                                            "'" + jobordmaster_pack_id + "','" + job_id + "','" + itemID + "','" + itemID + "','" + itemID + "','" + itemID + "','" + itemInternalID + "','" + commitQty + "','" + itemID + "','" + commitQty + "','0'," +
                                            "'" + createdDate + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                        this.DataFromNetsuiteLog.Debug("SalesOrders (syncso): " + insertNetsuiteJobOrdMasterPackDetail);
                                        entities.Database.ExecuteSqlCommand(insertNetsuiteJobOrdMasterPackDetail);
                                        #endregion

                                        #region netsuite_jobmo_pack
                                        Guid job_packID = Guid.NewGuid();
                                        var insertNetsuiteJobMOPack = "insert into netsuite_jobmo_pack (nsjmp_jobmoPack_ID,nsjmp_nsj_jobID,nsjmp_moNo,nsjmp_schID,nsjmp_schName,nsjmp_packID,nsjmp_packTitles,nsjmp_item_internalID," +
                                            "nsjmp_packPrice,nsjmp_qty,nsjmp_amt,nsjmp_packISBN,nsjmp_moNo_internalID,nsjmp_createdDate,nsjmp_rangeTo) values ('" + job_packID + "','" + job_id + "','" + so.tranId + "'," +
                                            "'" + GetFirstSixChar(so.entity.name) + "','" + SplitEntityByName(so.entity.name).Replace("'", "''") + "','" + itemID + "','" + title + "','" + itemInternalID + "','" + rate + "','" + commitQty + "'," +
                                            "'" + amount + "','" + itemID + "','" + so.internalId + "','" + createdDate + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                        this.DataFromNetsuiteLog.Debug("SalesOrders (syncso): " + insertNetsuiteJobMOPack);
                                        entities.Database.ExecuteSqlCommand(insertNetsuiteJobMOPack);
                                        #endregion

                                        #region netsuite_jobitem
                                        Guid job_itemID = Guid.NewGuid();
                                        var insertNetsuiteJobItem = "insert into netsuite_jobitem (nsji_jobItem_ID,nsji_nsj_jobID,nsji_createdBy,nsji_createdDate,nsji_item_ID,nsji_item_qty," +
                                            "nsji_posting_type,nsji_moNo,nsji_moNo_internalID,nsji_rangeTo) values ('" + job_itemID + "','" + job_id + "','NETSUITE','" + createdDate + "'," +
                                            "'" + itemID + "','" + commitQty + "','SALES','" + so.tranId + "','" + so.internalId + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                        this.DataFromNetsuiteLog.Debug("SalesOrders (syncso): " + insertNetsuiteJobItem);
                                        entities.Database.ExecuteSqlCommand(insertNetsuiteJobItem);
                                        #endregion
                                        line++;
                                    }
                                }*/
                                    #endregion

                                    #endregion

                                    var updateMOCount = (from jm in entities.netsuite_jobmo
                                                         where jm.nsjm_nsj_job_ID == job_id
                                                         group jm by jm.nsjm_nsj_job_ID into gg
                                                         let count = gg.Count()
                                                         select new { Value = gg.Key, Count = count }).ToList();

                                    foreach (var c in updateMOCount)
                                    {
                                        String jobID = c.Value;
                                        Int32 moCount = c.Count;
                                        var updatejob = "update netsuite_job set nsj_job_mo_count = '" + moCount + "' where nsj_jobID = '" + jobID + "'";
                                        this.DataFromNetsuiteLog.Debug("SalesOrders: " + updatejob);
                                        entities.Database.ExecuteSqlCommand(updatejob);
                                    }
                                    #endregion

                                    Int32 rowCount = g + 1;
                                    String _refno = "NETSUITE.SYNC-SO.SELECT." + r.rn_rangeFrom + "-" + r.rn_rangeTo;
                                    var insertTask = "insert into requestnetsuite_task (rnt_task, rnt_description, rnt_refNO, rnt_jobID, rnt_status, rnt_createdDate, " +
                                    "rnt_seqNO, rnt_createdFromInternalID, rnt_nsInternalId, rnt_updatedDate) values ('SELECT', '" + r.rn_sche_transactionType + "', '" + _refno + "', '" + r.rn_jobID + "'," +
                                    "'TRUE', '" + convertDateToString(DateTime.Now) + "', '" + rowCount + "','', '" + moNoInternalID + "', '" + convertDateToString(DateTime.Now) + "')";
                                    this.DataFromNetsuiteLog.Debug("SalesOrders: " + insertTask);
                                    entities.Database.ExecuteSqlCommand(insertTask);
                                    tolRow = rowCount;
                                }

                            }
                            if (tolRow > 0)
                            {
                                var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                                    "where rn_jobID = '" + r.rn_jobID + "'";
                                this.DataFromNetsuiteLog.Debug("SalesOrders: " + updateRequestNetsuite);
                                entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                                //Split Table netsuite_jobordmaster_pack, netsuite_jobordmaster_packdetail, netsuite_jobmo_pack, netsuite_jobitem - WY-29.AUG.2014
                                var insertRequestNetsuite = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status,rn_jobID,rn_updatedDate,rn_rangeFrom,rn_rangeTo) values " +
                                    "('NS-SALES ORDER 2','" + convertDateToString(DateTime.Now) + "','FINISHED','" + r.rn_jobID + "','" + convertDateToString(DateTime.Now) + "','" + convertDateToString(trangeFrom) + "','" + convertDateToString(trangeTo) + "')";
                                this.DataFromNetsuiteLog.Debug("SalesOrders: " + insertRequestNetsuite);
                                entities.Database.ExecuteSqlCommand(insertRequestNetsuite);

                                //var insertRequestNetsuite = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status,rn_jobID,rn_updatedDate,rn_rangeFrom,rn_rangeTo) values " +
                                //    "('NS-SALES ORDER 2','" + convertDateToString(DateTime.Now) + "','DEBUG','" + r.rn_jobID + "','" + convertDateToString(DateTime.Now) + "','" + convertDateToString(trangeFrom) + "','" + convertDateToString(trangeTo) + "')";
                                //this.DataFromNetsuiteLog.Debug("SalesOrders: " + insertRequestNetsuite);
                                //entities.Database.ExecuteSqlCommand(insertRequestNetsuite);

                                scope1.Complete();
                                status = true;
                            }

                        }
                        catch (Exception ex)
                        {
                            this.DataFromNetsuiteLog.Error("SalesOrders Exception: " + tolRow + pffRecord.Count() + ex.ToString());
                        }
                    }
                    else
                    {
                        var updateRequestNetsuite = "update requestnetsuite set rn_status='NO-DATA', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                            "where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("SalesOrders: " + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                        scope1.Complete();
                    }
                }
            }
            return status;
        }
        //NS-SALES ORDER 2-Split Table netsuite_jobordmaster_pack, netsuite_jobordmaster_packdetail, netsuite_jobmo_pack, netsuite_jobitem - WY-29.AUG.2014
        public Boolean SalesOrders2(sdeEntities entities, RequestNetsuiteEntity r)
        {
            //Extract TRADE sales order from NetSuite which ready to sync to IMAS to do fulfillment
            this.DataFromNetsuiteLog.Info("SalesOrders2: Pulling sales orders ********");
            //TBA
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            DataCenterAwareNetSuiteService netsuiteService = new DataCenterAwareNetSuiteService(account);

            String createdDate = convertDateToString(DateTime.Now);
            DateTime trangeFrom = Convert.ToDateTime(r.rn_rangeFrom);
            DateTime trangeTo = Convert.ToDateTime(r.rn_rangeTo);
            long temp_consignmentNote = 100000000000;
            Record[] pffRecord = null;
            Record[] customerRecord = null;

            Boolean status = false;

            //WY-30.AUG.2014
            //List<cls_customer> listCust = new List<cls_customer>();
            Boolean isValidCust = true;

            //Boolean loginStatus = login();
            //Status netsuiteStatus = new Status();
            //service.Timeout = 1000000000;
            //service.CookieContainer = new CookieContainer();
            //ApplicationInfo appinfo = new ApplicationInfo();
            //appinfo.applicationId = @Resource.NETSUITE_LOGIN_APPLICATIONID;
            //service.applicationInfo = appinfo;
            //FAS order 09/10/2018 - Mohan
            String fasOrder = "N";
            String SchnameFull = string.Empty;
            //FAS order 09/10/2018 - Mohan end
            //#region Netsuite
            //Passport passport = new Passport();
            //passport.account = @Resource.NETSUITE_LOGIN_ACCOUNT;
            //passport.email = @Resource.NETSUITE_LOGIN_EMAIL;

            //RecordRef role = new RecordRef();
            //role.internalId = @Resource.NETSUITE_LOGIN_ROLE_INTERNALID;

            //passport.role = role;
            ////kang get netsuite password from DB
            ////passport.password = @Resource.NETSUITE_LOGIN_PASSWORD;
            //passport.password = getNetsuitePassword(@Resource.NETSUITE_LOGIN_EMAIL);

            //netsuiteStatus = service.login(passport).status;
            //Boolean loginStatus = netsuiteStatus.isSuccess;
            //TBA
            ItemSearchBasic basic = new ItemSearchBasic()
            {
                internalId = new SearchMultiSelectField()
                {
                    @operator = SearchMultiSelectFieldOperator.anyOf,
                    operatorSpecified = true,
                    searchValue = new RecordRef[] {
                    new RecordRef() {
                    internalId = "14943"
                         }
                    }
                }
            };

            netsuiteService.Timeout = 1000000000;
            netsuiteService.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();

            //  appinfo.applicationId = appID;
            netsuiteService.applicationInfo = appinfo;
            string loginEmail = "";
            loginEmail = @Resource.NETSUITE_LOGIN_EMAIL;
            tokenId = @Resource.ASIA_WEBSERVICE_TOKEN_ID;
            tokenSecret = @Resource.ASIA_WEBSERVICE_TOKEN_SECRET;

            Boolean loginStatus = false;
            try
            {
                Console.WriteLine("Success");
                netsuiteService.tokenPassport = createTokenPassport();
                SearchResult status1 = netsuiteService.search(basic);
                if (status1.status.isSuccess == true)
                {
                    loginStatus = true;
                }
                else
                {
                    loginStatus = false;
                }
            }
            catch (Exception ex)
            {
                loginStatus = false;
                this.DataFromNetsuiteLog.Fatal("SOFulfillmentUpdate: Login Netsuite failed. Exception : " + ex.ToString());

            }
            //
            if (loginStatus == true)
            {
                this.DataFromNetsuiteLog.Debug("SalesOrders2: Login Netsuite success.");
                this.DataFromNetsuiteLog.Info("SalesOrders2: Retrieving sales order per day from Netsuite.");

                //TBA
                netsuiteService.tokenPassport = createTokenPassport();
                AsyncResult pffResponse = netsuiteService.getAsyncResult(r.rn_jobID, 1);
                AsyncSearchResult salesOrderSearchResult = (AsyncSearchResult)pffResponse;
                pffRecord = salesOrderSearchResult.searchResult.recordList;

                //netsuiteStatus = (service.logout()).status;
                //if (netsuiteStatus.isSuccess == true)
                //{
                //    this.DataFromNetsuiteLog.Debug("SalesOrders2: Logout Netsuite success.");
                //}
                //else
                //{
                //    this.DataFromNetsuiteLog.Debug("SalesOrders2: Logout Netsuite failed.");
                //}

                //try
                //{ 
                //    #region Customer Info
                //    if (pffRecord != null && pffRecord.Count() > 0)
                //    {

                //        this.DataFromNetsuiteLog.Info("SalesOrders2: Number of records retrieve : " + pffRecord.Count());
                //        for (int g = 0; g < pffRecord.Count(); g++)
                //        {
                //            SalesOrder so = (SalesOrder)pffRecord[g];
                //            String customerInternalID = so.entity.internalId;

                //            this.DataFromNetsuiteLog.Info("SalesOrders2: Getting Sales Order - " + so.internalId);

                //            // DAVID
                //            String SEISSONumber = null;
                //            #region Custom Fields Looping
                //            for (int i = 0; i < so.customFieldList.Count(); i++)
                //            {
                //                if (so.customFieldList[i].ToString().Equals("sde.comNetsuiteServices.StringCustomFieldRef"))
                //                {
                //                    StringCustomFieldRef custom1 = (StringCustomFieldRef)so.customFieldList[i];
                //                    if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SEISSALESORDERNUMBER_SCRIPTID))
                //                    {
                //                        SEISSONumber = custom1.value;
                //                        var SEISCustomerID = (from q1 in entities.netsuite_newso
                //                                              where q1.nt1_moNo == SEISSONumber
                //                                              select q1.nt1_customer_internalID).FirstOrDefault();

                //                        if (!String.IsNullOrEmpty(SEISCustomerID))
                //                        {
                //                            customerInternalID = SEISCustomerID;
                //                        }
                //                        else if (!String.IsNullOrEmpty(SEISSONumber))
                //                        {
                //                            customerInternalID = "";
                //                        }
                //                    }
                //                }
                //            }
                //            #endregion
                //            // DAVID

                //            SearchPreferences sp = new SearchPreferences();
                //            sp.bodyFieldsOnly = false;
                //            service.searchPreferences = sp;
                //            CustomerSearchAdvanced csa = new CustomerSearchAdvanced();
                //            CustomerSearch cs = new CustomerSearch();
                //            CustomerSearchBasic csb = new CustomerSearchBasic();

                //            RecordRef[] refInternalID = new RecordRef[1];
                //            RecordRef refEntity = new RecordRef();
                //            refEntity.internalId = customerInternalID;//so.entity.internalId;
                //            refInternalID[0] = refEntity;

                //            SearchMultiSelectField csInternalID = new SearchMultiSelectField();
                //            csInternalID.@operator = SearchMultiSelectFieldOperator.anyOf;
                //            csInternalID.operatorSpecified = true;
                //            csInternalID.searchValue = refInternalID;
                //            csb.internalId = csInternalID; 

                //            cs.basic = csb;
                //            csa.criteria = cs; 
                //            this.DataFromNetsuiteLog.Info("SalesOrders2: Login to search customer info.");
                //            login();
                //            //netsuiteStatus = service.login(passport).status;
                //            SearchResult sr = service.search(csa);
                //            logout(); 
                //            this.DataFromNetsuiteLog.Info("SalesOrders2: Logout from search customer info");
                //            customerRecord = sr.recordList;

                //            for (int i = 0; i < customerRecord.Count(); i++)
                //            {
                //                Customer cust = (Customer)customerRecord[i];
                //                cls_customer cust2 = new cls_customer();
                //                String salesTer = null;

                //                for (int a = 0; a < cust.customFieldList.Count(); a++)
                //                {
                //                    if (cust.customFieldList[a].ToString().Equals("sde.comNetsuiteServices.SelectCustomFieldRef"))
                //                    {
                //                        SelectCustomFieldRef custom1 = (SelectCustomFieldRef)cust.customFieldList[a];
                //                        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SALESTERRITORY_SCRIPTID))
                //                        {
                //                            switch (custom1.value.internalId)
                //                            {
                //                                case "1":
                //                                    salesTer = "TH";
                //                                    break;
                //                                case "16":
                //                                    salesTer = "TH";
                //                                    break;
                //                                case "8":
                //                                    salesTer = "ID";
                //                                    break;
                //                                case "14":
                //                                    salesTer = "SG";
                //                                    break;
                //                                case "10":
                //                                    salesTer = "MY";
                //                                    break;
                //                                default:
                //                                    salesTer = "NA";
                //                                    break;
                //                            }
                //                        }
                //                    }
                //                }

                //                if (cust.addressbookList != null)
                //                {
                //                    cust2.custID = customerInternalID;
                //                    Int32 addBookCount = cust.addressbookList.addressbook.Count();

                //                    //Get the defaultShippingAddress instead of get the first address - WY-08.SEPT.2014
                //                    for (int b = 0; b < addBookCount; b++)
                //                    {
                //                        Boolean isDefaultShipAdd = false;
                //                        isDefaultShipAdd = cust.addressbookList.addressbook[b].defaultShipping;
                //                        if (isDefaultShipAdd == true)
                //                        {
                //                            cust2.addressee = cust.addressbookList.addressbook[b].addressee;
                //                            cust2.deliveryAdd = cust.addressbookList.addressbook[b].addr1;
                //                            cust2.deliveryAdd2 = cust.addressbookList.addressbook[b].addr2;
                //                            cust2.deliveryAdd3 = cust.addressbookList.addressbook[b].addr3;
                //                            cust2.postCode = cust.addressbookList.addressbook[b].zip;
                //                            cust2.contactPerson = cust.addressbookList.addressbook[b].attention;
                //                            cust2.phone = cust.addressbookList.addressbook[b].phone;
                //                            break;
                //                        }
                //                    }
                //                    //cust2.country = cust.addressbookList.addressbook[0].country.ToString();
                //                    cust2.country = salesTer; 
                //                } 
                //                listCust.Add(cust2);
                //            }
                //        }
                //    }
                //    #endregion 

                //}
                //catch (Exception ex)
                //{
                //    this.DataFromNetsuiteLog.Error("SalesOrders2 Logout Exception: " + ex.ToString());
                //    isValidCust = false;
                //}
            }
            else
            {
                this.DataFromNetsuiteLog.Fatal("SalesOrders2: Login Netsuite failed.");
                isValidCust = false;
            }
        #endregion

            this.DataFromNetsuiteLog.Info("SalesOrders2: Finished getting customer info.");

            if (isValidCust == true)
            {
                var option = new TransactionOptions
                {
                    IsolationLevel = IsolationLevel.RepeatableRead,
                    Timeout = TimeSpan.FromSeconds(2400)
                };

                //using (TransactionScope scope1 = new TransactionScope())
                using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    if (pffRecord != null && pffRecord.Count() > 0)
                    {
                        Int32 tolRow = 0;
                        try
                        {
                            this.DataFromNetsuiteLog.Info("SalesOrders2: " + pffRecord.Count() + " records is retrieved.");

                            String job_id = null;
                            String jobordmaster_id = null;
                            String rangeTo = convertDateToString(Convert.ToDateTime(r.rn_rangeTo));
                            Int32 tolRecords = pffRecord.Count();

                            //for (int g = 38; g < 69; g++)
                            //for (int g = 167; g < tolRecords; g++)
                            for (int g = 0; g < tolRecords; g++)
                            {
                                SalesOrder so = (SalesOrder)pffRecord[g];
                                Boolean isValid = true;
                                String moNoInternalID = so.internalId;
                                String customerInternalID = so.entity.internalId;
                                String SEISCurrency = string.Empty; //Set Dropshipment Currency to SGD - WY-22.SPET.2014
                                String term = checkRecordRefIsNull(so.terms);  //Get creditTerm from SG SO if SEIS - WY-25.SEPT.2014 
                                if (!String.IsNullOrEmpty(term))
                                {
                                    term = SplitSalesOrderTerm(term);
                                }
                                String shipMethod = checkRecordRefIsNull(so.shipMethod);//Get ShipMethod - WY-25.SEPT.2014
                                String moNo = so.tranId;//Get mono - WY-25.SEPt.2014

                                String SEISSONumber = null;
                                String customerIDDropshipTH = string.Empty;
                                String jobmoSchID = string.Empty;
                                #region Custom Field Looping
                                for (int i = 0; i < so.customFieldList.Count(); i++)
                                {
                                    if (so.customFieldList[i].ToString().Equals("sde.comNetsuiteServices.StringCustomFieldRef"))
                                    {
                                        StringCustomFieldRef custom1 = (StringCustomFieldRef)so.customFieldList[i];

                                        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SEISSALESORDERNUMBER_SCRIPTID))
                                        {
                                            isValid = false;
                                            SEISSONumber = custom1.value;

                                            var SEISCustomerID = (from q1 in entities.netsuite_newso
                                                                  where q1.nt1_moNo == SEISSONumber
                                                                  select new
                                                                  {
                                                                      q1.nt1_customer_internalID,
                                                                      q1.nt1_creditTerm,
                                                                      q1.nt1_country,
                                                                      q1.nt1_customer
                                                                  }).Distinct().ToList();

                                            if (SEISCustomerID.Count() > 0)
                                            {
                                                customerInternalID = SEISCustomerID[0].nt1_customer_internalID;
                                                term = SEISCustomerID[0].nt1_creditTerm;

                                                //Set Dropshipment Currency - WY-29.JAN.2015
                                                switch (SEISCustomerID[0].nt1_country)
                                                {
                                                    case "SG":
                                                        SEISCurrency = "SGD";
                                                        break;
                                                    //TH DROPSHIP
                                                    case "TH":
                                                        SEISCurrency = "THB";
                                                        customerIDDropshipTH = SEISCustomerID[0].nt1_customer;
                                                        break;
                                                    default:
                                                        SEISCurrency = "";
                                                        break;
                                                }
                                                isValid = true;
                                            }
                                        }
                                        else if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_SCHADD_INTERNALID))
                                        {
                                            SchnameFull = custom1.value;
                                        }
                                    } //FAS order 09/10/2018 - Mohan
                                    else
                                        if (so.customFieldList[i].ToString().Equals("sde.comNetsuiteServices.BooleanCustomFieldRef"))
                                        {
                                            BooleanCustomFieldRef custom1 = (BooleanCustomFieldRef)so.customFieldList[i];
                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_FAS_ORDER_INTERNAL_SCRIPTID))
                                            {
                                                if (custom1.value)
                                                {
                                                    fasOrder = "Y";
                                                }
                                                else
                                                {
                                                    fasOrder = "N";
                                                }
                                                //  forwarderToInternalID = custom1.value.internalId;
                                            }
                                        } //FAS order 09/10/2018 - Mohan end
                                }
                                #endregion


                                //Get Customer Info - WY-12.SEPT.2014
                                #region Get Customer Info
                                List<cls_customer> listCustInfo = new List<cls_customer>();
                                cls_customer cust2 = new cls_customer();
                                var queryCustInfo = (from q1 in entities.netsuite_syncso
                                                     where q1.nt2_moNo_internalID == moNoInternalID
                                                       && q1.nt2_custID == customerInternalID
                                                     select new
                                                     {
                                                         q1.nt2_custID,
                                                         q1.nt2_addressee,
                                                         q1.nt2_deliveryAdd,
                                                         q1.nt2_deliveryAdd2,
                                                         q1.nt2_deliveryAdd3,
                                                         q1.nt2_postCode,
                                                         q1.nt2_contactPerson,
                                                         q1.nt2_phone,
                                                         q1.nt2_country,
                                                         q1.nt2_customer, //To get Customer ID - WY-22.SEPT.2014

                                                         //Added Billing Address - WY-25.SEPT.2014
                                                         q1.nt2_billingAddressee,
                                                         q1.nt2_billingAdd,
                                                         q1.nt2_billingAdd2,
                                                         q1.nt2_billingAdd3,
                                                         q1.nt2_billingPostcode,
                                                         q1.nt2_billingContactPerson,
                                                         q1.nt2_billingPhone
                                                     }).Distinct().ToList();
                                if (queryCustInfo.Count() > 0)
                                {
                                    cust2.custID = queryCustInfo[0].nt2_custID;
                                    cust2.addressee = queryCustInfo[0].nt2_addressee;
                                    cust2.deliveryAdd = queryCustInfo[0].nt2_deliveryAdd;
                                    cust2.deliveryAdd2 = queryCustInfo[0].nt2_deliveryAdd2;
                                    cust2.deliveryAdd3 = queryCustInfo[0].nt2_deliveryAdd3;
                                    cust2.postCode = queryCustInfo[0].nt2_postCode;
                                    cust2.contactPerson = queryCustInfo[0].nt2_contactPerson;
                                    cust2.phone = queryCustInfo[0].nt2_phone;
                                    cust2.country = queryCustInfo[0].nt2_country;
                                    cust2.customerID = queryCustInfo[0].nt2_customer; //To get Customer ID - WY-22.SEPT.2014

                                    //Added Billing Address - WY-25.SEPT.2014
                                    cust2.billingAddressee = queryCustInfo[0].nt2_billingAddressee;
                                    cust2.billingAdd = queryCustInfo[0].nt2_billingAdd;
                                    cust2.billingAdd2 = queryCustInfo[0].nt2_billingAdd2;
                                    cust2.billingAdd3 = queryCustInfo[0].nt2_billingAdd3;
                                    cust2.billingPostcode = queryCustInfo[0].nt2_billingPostcode;
                                    cust2.billingContactPerson = queryCustInfo[0].nt2_billingContactPerson;
                                    cust2.billingPhone = queryCustInfo[0].nt2_billingPhone;

                                    listCustInfo.Add(cust2);
                                }
                                else
                                {
                                    isValid = false;
                                }
                                #endregion

                                if (isValid == true)
                                {
                                    if (listCustInfo[0].custID != customerInternalID)
                                    {
                                        isValid = false;
                                    }
                                }

                                this.DataFromNetsuiteLog.Info("SalesOrders2: Customer Info Valid Status : " + isValid.ToString());

                                if (isValid == true)
                                {
                                    #region Customer Info
                                    /*
                                SearchPreferences sp = new SearchPreferences();
                                sp.bodyFieldsOnly = false;
                                service.searchPreferences = sp;
                                CustomerSearchAdvanced csa = new CustomerSearchAdvanced();
                                CustomerSearch cs = new CustomerSearch();
                                CustomerSearchBasic csb = new CustomerSearchBasic();

                                RecordRef[] refInternalID = new RecordRef[1];
                                RecordRef refEntity = new RecordRef();
                                refEntity.internalId = customerInternalID;//so.entity.internalId;
                                refInternalID[0] = refEntity;

                                SearchMultiSelectField csInternalID = new SearchMultiSelectField();
                                csInternalID.@operator = SearchMultiSelectFieldOperator.anyOf;
                                csInternalID.operatorSpecified = true;
                                csInternalID.searchValue = refInternalID;
                                csb.internalId = csInternalID;

                                cs.basic = csb;
                                csa.criteria = cs;
                                login();
                                SearchResult sr = service.search(csa);
                                logout();
                                customerRecord = sr.recordList;

                                String addressee = null;
                                String deliveryAdd = null;
                                String deliveryAdd2 = null;
                                String deliveryAdd3 = null;
                                String postCode = null;
                                String contactPerson = null;
                                String phone = null;
                                for (int i = 0; i < customerRecord.Count(); i++)
                                {
                                    Customer cust = (Customer)customerRecord[i];
                                    if (cust.addressbookList != null)
                                    {
                                        addressee = cust.addressbookList.addressbook[0].addressee;
                                        deliveryAdd = cust.addressbookList.addressbook[0].addr1;
                                        deliveryAdd2 = cust.addressbookList.addressbook[0].addr2;
                                        deliveryAdd3 = cust.addressbookList.addressbook[0].addr3;
                                        postCode = cust.addressbookList.addressbook[0].zip;
                                        contactPerson = cust.addressbookList.addressbook[0].attention;
                                        phone = cust.addressbookList.addressbook[0].phone;
                                    }
                                }*/
                                    #endregion

                                    String subsidiary = null;
                                    String businessChannel = null;
                                    String currency = null;
                                    String listCustCountry = null;
                                    String is_fas = null;  //FAS order 09/10/2018 - Mohan
                                    if (so.@class == null)
                                    {
                                        businessChannel = "NA";
                                    }
                                    else//FAS order 09/10/2018 - Mohan
                                    {
                                        if (fasOrder.Equals("Y"))
                                        {
                                            var queryBusinessChannel = (from b in entities.map_businesschannel
                                                                        where b.mb_businessChannel_internalID == "101"
                                                                        select b).FirstOrDefault();
                                            businessChannel = queryBusinessChannel.mb_imas_businessChannel_ID;
                                        }
                                        else
                                        {
                                            var queryBusinessChannel = (from b in entities.map_businesschannel
                                                                        where b.mb_businessChannel_internalID == so.@class.internalId
                                                                        select b).FirstOrDefault();
                                            businessChannel = queryBusinessChannel.mb_imas_businessChannel_ID;
                                        }
                                    }

                                    ////Change to Using Country - WY-30.AUG.2014
                                    //listCustCountry = listCust[g].country.ToLower();
                                    //switch (listCustCountry)
                                    //{
                                    //    case "_malaysia":
                                    //        subsidiary = "MY";
                                    //        break;
                                    //    case "_thailand":
                                    //        subsidiary = "TH";
                                    //        break;
                                    //    case "_hongkong":
                                    //        subsidiary = "HK";
                                    //        break;
                                    //    case "_singapore":
                                    //        subsidiary = "SG";
                                    //        break;
                                    //    case "_indonesia":
                                    //        subsidiary = "ID";
                                    //        break;
                                    //    default:
                                    //        subsidiary = "NA";
                                    //        break;
                                    //}
                                    subsidiary = listCustInfo[0].country;
                                    /* Change to Using Country - WY-30.AUG.2014
                                    if (so.subsidiary == null)
                                    {
                                        subsidiary = "NA";
                                    }
                                    else
                                    {
                                        var querySubsidiary = (from s in entities.map_subsidiary
                                                               where s.ms_subsidiary_internalID == so.subsidiary.internalId
                                                               select s).FirstOrDefault();
                                        subsidiary = querySubsidiary.ms_countryName;
                                        currency = querySubsidiary.ms_currencyCode;
                                    }*/

                                    //Get Currency Code - WY-12.SEPT.2014
                                    #region Get Currency Code
                                    switch (so.currency.name)
                                    {
                                        case "US Dollar":
                                            currency = "USD";
                                            break;
                                        case "British pound":
                                            currency = "GBP";
                                            break;
                                        case "Canadian Dollar":
                                            currency = "CAD";
                                            break;
                                        case "Euro":
                                            currency = "EUR";
                                            break;
                                        case "Malaysian Ringgit":
                                            currency = "MYR";
                                            break;
                                        case "Singapore Dollar":
                                            currency = "SGD";
                                            break;
                                        case "Thailand Baht":
                                            currency = "THB";
                                            break;
                                        case "Indonesian Rupiah":
                                            currency = "IDR";
                                            break;
                                        case "Philippine Peso":
                                            currency = "PHP";
                                            break;
                                        case "Indian Rupee":
                                            currency = "INR";
                                            break;
                                        case "Taiwan Dollar":
                                            currency = "TWD";
                                            break;
                                        case "Hong Kong Dollar":
                                            currency = "HKD";
                                            break;
                                        case "New Zealand Dollar":
                                            currency = "NZD";
                                            break;
                                        case "Australian Dollar":
                                            currency = "AUD";
                                            break;
                                        default:
                                            currency = "";
                                            break;
                                    }
                                    //Set Dropshipment Currency to SGD - WY-22.SPET.2014
                                    if (!String.IsNullOrEmpty(SEISCurrency))
                                    {
                                        currency = SEISCurrency;
                                    }
                                    #endregion

                                    #region Get JobID from netsuite_job and jobordmaster_ID from netsuite_jobordmaster
                                    var checkJobID = (from j in entities.netsuite_job
                                                      where j.nsj_businessChannel_ID == businessChannel && j.nsj_country_tag == subsidiary
                                                      && j.nsj_rangeTo == r.rn_rangeTo
                                                      select j.nsj_jobID).FirstOrDefault();

                                    if (checkJobID == null)
                                    {
                                        job_id = null;
                                    }
                                    else
                                    {
                                        job_id = checkJobID;
                                    }

                                    var checkJobMasterID = (from j in entities.netsuite_jobordmaster
                                                            where j.nsjom_nsj_job_ID == job_id && j.nsjom_moNo_internalID == moNoInternalID
                                                            select j.nsjom_jobOrdMaster_ID).FirstOrDefault();

                                    if (checkJobMasterID == null)
                                    {
                                        jobordmaster_id = null;
                                    }
                                    else
                                    {
                                        jobordmaster_id = checkJobMasterID;
                                    }
                                    #endregion

                                    #region netsuite_jobordmaster_pack, netsuite_jobordmaster_packdetail, netsuite_jobmo_pack, netsuite_jobitem
                                    this.DataFromNetsuiteLog.Debug("SalesOrders: Inserting netsuite_jobordmaster_pack, netsuite_jobordmaster_packdetail, netsuite_jobmo_pack and netsuite_jobitem.");
                                    if (job_id != null && jobordmaster_id != null)
                                    {
                                        List<NewSO> newSOList = new List<NewSO>();
                                        List<SyncSO> syncSOList = new List<SyncSO>();
                                        List<SyncSO2> syncSOList2 = new List<SyncSO2>();


                                        var q20 = (from q1 in entities.netsuite_syncso
                                                   where q1.nt2_moNo == so.tranId
                                                   && (q1.nt2_rangeTo > trangeFrom && q1.nt2_rangeTo <= trangeTo)
                                                   && q1.nt2_progressStatus == null && q1.nt2_qtyForWMS > 0
                                                   select new SyncSO
                                                   {
                                                       itemInternalID = q1.nt2_item_internalID,
                                                       committedQty = q1.nt2_qtyForWMS,
                                                       ordQty = q1.nt2_ordQty,
                                                       tax = q1.nt2_tax,
                                                       discount = q1.nt2_discount,
                                                       rate = q1.nt2_rate,
                                                       amount = q1.nt2_amount,
                                                       basedPrice = q1.nt2_basedprice,
                                                       pricelevel = q1.nt2_pricelevel,
                                                       Mo_number = q1.nt2_moNo, //FAS order 09/10/2018 - Mohan
                                                       isfas = q1.nt2_is_fas, //FAS order 09/10/2018 - Mohan
                                                       className = q1.nt2_class_name, //FAS order 09/10/2018 - Mohan
                                                       teacherName = q1.nt2_teacher_name //FAS order 09/10/2018 - Mohan
                                                   }).ToList();

                                        syncSOList = q20;

                                        /* //All SO based on SYNC SO - 
                                        if (!String.IsNullOrEmpty(SEISSONumber))
                                        {
                                            var q20 = (from q1 in entities.netsuite_newso
                                                       where q1.nt1_moNo == SEISSONumber && q1.nt1_committedQty > 0 
                                                       && (q1.nt1_rangeTo > trangeFrom
                                                       && q1.nt1_rangeTo <= trangeTo)
                                                       select new NewSO()
                                                       {
                                                           itemInternalID = q1.nt1_item_internalID,
                                                           committedQty = q1.nt1_committedQty,
                                                           ordQty = q1.nt1_ordQty,
                                                           tax = q1.nt1_tax,
                                                           discount = q1.nt1_discount,
                                                           rate = q1.nt1_rate,
                                                           amount = q1.nt1_amount
                                                       });
                                            newSOList = q20.ToList();
                                        }
                                        else
                                        {
                                            var q20 = (from q1 in entities.netsuite_syncso
                                                       where q1.nt2_moNo == so.tranId 
                                                       && (q1.nt2_rangeTo > trangeFrom && q1.nt2_rangeTo <= trangeTo)
                                                       && q1.nt2_progressStatus == null
                                                       select new SyncSO
                                                       {
                                                           itemInternalID = q1.nt2_item_internalID,
                                                           committedQty = q1.nt2_qtyForWMS,
                                                           ordQty = q1.nt2_ordQty,
                                                           tax = q1.nt2_tax,
                                                           discount = q1.nt2_discount,
                                                           rate = q1.nt2_rate,
                                                           amount = q1.nt2_amount
                                                       }).ToList();
                                            syncSOList = q20;
                                        }*/

                                        String itemID = "";
                                        String title = "";
                                        String itemInternalID = "";
                                        Double commitQty = 0;
                                        Double ordQty = 0;
                                        Double tax = 0;
                                        Double discount = 0;
                                        Double rate = 0;
                                        Double amount = 0;
                                        Double discPercantage = 0;
                                        Double discPricePerQty = 0; //To fix the Custom Invoice - WY-17.SEPT.2014
                                        Double discPrice = 0;
                                        String location = "";
                                        //Get based price and price level - WY-29.SEPT.2014
                                        Double basedPrice = 0;
                                        String priceLevel = string.Empty;

                                        #region delete duplicate item
                                        // netsuite_jobordmaster_pack, netsuite_jobordmaster_packdetail, netsuite_jobmo_pack and netsuite_jobitem
                                        var query2 = (from q2 in entities.netsuite_jobordmaster_pack
                                                      where q2.nsjomp_ordNo == so.tranId && q2.nsjomp_job_ID == job_id
                                                      select q2).ToList();

                                        foreach (var q2 in query2)
                                        {
                                            var deleteNetsuiteJobOrdMasterPackDetail = "delete from netsuite_jobordmaster_packdetail where nsjompd_jobOrdMaster_pack_ID = '" + q2.nsjomp_jobOrdMaster_pack_ID + "'";
                                            this.DataFromNetsuiteLog.Debug("SalesOrders: " + deleteNetsuiteJobOrdMasterPackDetail);
                                            entities.Database.ExecuteSqlCommand(deleteNetsuiteJobOrdMasterPackDetail);
                                        }

                                        var deleteNetsuiteJobOrdMasterPack = "delete from netsuite_jobordmaster_pack where nsjomp_ordNo = '" + so.tranId + "' and nsjomp_job_ID = '" + job_id + "'";
                                        this.DataFromNetsuiteLog.Debug("SalesOrders: " + deleteNetsuiteJobOrdMasterPack);
                                        entities.Database.ExecuteSqlCommand(deleteNetsuiteJobOrdMasterPack);

                                        var deleteNetsuiteJobMOPack = "delete from netsuite_jobmo_pack where nsjmp_moNo = '" + so.tranId + "' and nsjmp_nsj_jobID = '" + job_id + "'";
                                        this.DataFromNetsuiteLog.Debug("SalesOrders: " + deleteNetsuiteJobMOPack);
                                        entities.Database.ExecuteSqlCommand(deleteNetsuiteJobMOPack);

                                        var deleteNetsuiteJobItem = "delete from netsuite_jobitem where nsji_moNo = '" + so.tranId + "' and nsji_nsj_jobID = '" + job_id + "'";
                                        this.DataFromNetsuiteLog.Debug("SalesOrders: " + deleteNetsuiteJobItem);
                                        entities.Database.ExecuteSqlCommand(deleteNetsuiteJobItem);
                                        #endregion

                                        #region From netsuite_newso
                                        /*
                                    if (newSOList.Count() > 0)
                                    {
                                        Int32 line = 0;

                                        foreach (var i in newSOList)
                                        {
                                            itemID = "";
                                            title = "";
                                            itemInternalID = i.itemInternalID;// so.itemList.item[i].item.internalId;
                                            commitQty = Convert.ToDouble(i.committedQty);// so.itemList.item[i].quantityCommitted;
                                            ordQty = Convert.ToDouble(i.ordQty);// so.itemList.item[i].quantity;
                                            tax = Convert.ToDouble(i.tax);// so.itemList.item[i].taxRate1;
                                            discount = 0;
                                            rate = Convert.ToDouble(i.rate);// Convert.ToDouble(so.itemList.item[i].rate);
                                            amount = commitQty * rate * ((100 + tax) / 100); //Convert.ToDouble(i.amount);// so.itemList.item[i].grossAmt;
                                            location = checkRecordRefIsNull_internalID(so.location);//checkRecordRefIsNull_internalID(so.itemList.item[i].location);

                                            var item = (from ii in entities.map_item
                                                        where ii.mi_item_internalID == itemInternalID
                                                        select ii).FirstOrDefault();

                                            if (item != null)
                                            {
                                                itemID = checkIsNull(item.mi_item_ID);
                                                title = checkIsNull(item.mi_item_title).Replace("'", "''");
                                            }

                                            if (!String.IsNullOrEmpty(so.discountRate))
                                            {
                                                discount = Convert.ToDouble(so.discountRate.TrimStart('-').TrimEnd('%'));
                                            }

                                            #region netsuite_jobordmaster_pack
                                            Guid jobordmaster_pack_id = Guid.NewGuid();
                                            var insertNetsuiteJobOrdMasterPack = "insert into netsuite_jobordmaster_pack (nsjomp_jobOrdMaster_pack_ID,nsjomp_jobOrdMaster_ID,nsjomp_job_ID,nsjomp_ordNo,nsjomp_ordPack," +
                                                "nsjomp_item_internalID,nsjomp_qty,nsjomp_ordQty,nsjomp_ordPrice,nsjomp_ordReplace,nsjomp_ofrCode,nsjomp_status,nsjomp_ordPackStatus,nsjomp_ordFulfill,nsjomp_ordDetDate,nsjomp_ordPoint," +
                                                "nsjomp_packTitle,nsjomp_ofrDesc,nsjomp_location_internalID,nsjomp_tax,nsjomp_discount,nsjomp_orderLine,nsjomp_createdDate, nsjomp_rangeTo, nsjomp_moNo) values ('" + jobordmaster_pack_id + "','" + jobordmaster_id + "'," +
                                                "'" + job_id + "','" + so.tranId + "','" + itemID + "','" + itemInternalID + "','" + ordQty + "','" + commitQty + "','" + rate + "','Y','TRADE','C','N','" + commitQty + "'," +
                                                "'" + convertDateToString(so.tranDate) + "','0','" + title + "',null,'" + location + "','" + tax + "','" + discount + "','" + (line + 1) + "','" + createdDate + "'," +
                                                "'" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "','" + so.tranId + "')";
                                            this.DataFromNetsuiteLog.Debug("SalesOrders (newso): " + insertNetsuiteJobOrdMasterPack);
                                            entities.Database.ExecuteSqlCommand(insertNetsuiteJobOrdMasterPack);
                                            #endregion

                                            #region netsuite_jobordmaster_packdetail
                                            Guid jobordmaster_packdetail_id = Guid.NewGuid();
                                            var insertNetsuiteJobOrdMasterPackDetail = "insert into netsuite_jobordmaster_packdetail (nsjompd_jobOrdMaster_packDetail_ID,nsjompd_jobOrdMaster_pack_ID,nsjompd_job_ID,nsjompd_ordPack,nsjompd_skuNo,nsjompd_isbn," +
                                                "nsjompd_isbn_secondary,nsjompd_item_internalID,nsjompd_sku_qty,nsjompd_item_ID,nsjompd_total_qty,nsjompd_scanned_qty,nsjompd_createdDate,nsjompd_rangeTo) values ('" + jobordmaster_packdetail_id + "'," +
                                                "'" + jobordmaster_pack_id + "','" + job_id + "','" + itemID + "','" + itemID + "','" + itemID + "','" + itemID + "','" + itemInternalID + "','" + commitQty + "','" + itemID + "','" + commitQty + "','0'," +
                                                "'" + createdDate + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                            this.DataFromNetsuiteLog.Debug("SalesOrders (newso): " + insertNetsuiteJobOrdMasterPackDetail);
                                            entities.Database.ExecuteSqlCommand(insertNetsuiteJobOrdMasterPackDetail);
                                            #endregion

                                            #region netsuite_jobmo_pack
                                            Guid job_packID = Guid.NewGuid();
                                            var insertNetsuiteJobMOPack = "insert into netsuite_jobmo_pack (nsjmp_jobmoPack_ID,nsjmp_nsj_jobID,nsjmp_moNo,nsjmp_schID,nsjmp_schName,nsjmp_packID,nsjmp_packTitles,nsjmp_item_internalID," +
                                                "nsjmp_packPrice,nsjmp_qty,nsjmp_amt,nsjmp_packISBN,nsjmp_moNo_internalID,nsjmp_createdDate,nsjmp_rangeTo) values ('" + job_packID + "','" + job_id + "','" + so.tranId + "'," +
                                                "'" + GetFirstSixChar(so.entity.name) + "','" + SplitEntityByName(so.entity.name).Replace("'", "''") + "','" + itemID + "','" + title + "','" + itemInternalID + "','" + rate + "','" + commitQty + "'," +
                                                "'" + amount + "','" + itemID + "','" + so.internalId + "','" + createdDate + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                            this.DataFromNetsuiteLog.Debug("SalesOrders (newso): " + insertNetsuiteJobMOPack);
                                            entities.Database.ExecuteSqlCommand(insertNetsuiteJobMOPack);
                                            #endregion

                                            #region netsuite_jobitem
                                            Guid job_itemID = Guid.NewGuid();
                                            var insertNetsuiteJobItem = "insert into netsuite_jobitem (nsji_jobItem_ID,nsji_nsj_jobID,nsji_createdBy,nsji_createdDate,nsji_item_ID,nsji_item_qty," +
                                                "nsji_posting_type,nsji_moNo,nsji_moNo_internalID,nsji_rangeTo) values ('" + job_itemID + "','" + job_id + "','NETSUITE','" + createdDate + "'," +
                                                "'" + itemID + "','" + commitQty + "','SALES','" + so.tranId + "','" + so.internalId + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                            this.DataFromNetsuiteLog.Debug("SalesOrders (newso): " + insertNetsuiteJobItem);
                                            entities.Database.ExecuteSqlCommand(insertNetsuiteJobItem);
                                            #endregion
                                            line++;
                                        }
                                    }*/
                                        #endregion

                                        #region from netsuite_syncso
                                        //else if (syncSOList.Count() > 0)
                                        //{
                                        Int32 line = 0;
                                        String customerID = checkIsNull(listCustInfo[0].customerID).Replace("'", "''");//To get Customer ID - WY-22.SEPT.2014
                                        string soNumber = null; //FAS order 09/10/2018 - Mohan
                                        string class_name = null; //FAS order 09/10/2018 - Mohan
                                        string teacher_name = null; //FAS order 09/10/2018 - Mohan

                                        foreach (var i in syncSOList)
                                        {
                                            if (!String.IsNullOrEmpty(SEISSONumber))
                                            {
                                                var newSoSql = (from q1 in entities.netsuite_newso
                                                                where q1.nt1_moNo == SEISSONumber
                                                                && q1.nt1_item_internalID == i.itemInternalID
                                                                select new NewSO()
                                                                {
                                                                    itemInternalID = q1.nt1_item_internalID,
                                                                    committedQty = q1.nt1_committedQty,
                                                                    ordQty = q1.nt1_ordQty,
                                                                    tax = q1.nt1_tax,
                                                                    discount = q1.nt1_discount,
                                                                    rate = q1.nt1_rate,
                                                                    amount = q1.nt1_amount,
                                                                    basedPrice = q1.nt1_basedprice,
                                                                    pricelevel = q1.nt1_pricelevel
                                                                });

                                                newSOList = newSoSql.ToList();
                                                tax = Convert.ToDouble(newSOList[0].tax);// so.itemList.item[i].taxRate1;
                                                rate = Convert.ToDouble(newSOList[0].rate);// Convert.ToDouble(so.itemList.item[i].rate);
                                                discPercantage = Convert.ToDouble(newSOList[0].discount);  //Get the discounted and tax amount - WY-08.SEPT.2014
                                                //Get based price and price level - WY-29.SEPT.2014
                                                basedPrice = Convert.ToDouble(newSOList[0].basedPrice);
                                                priceLevel = newSOList[0].pricelevel;
                                            }
                                            else
                                            {
                                                tax = Convert.ToDouble(i.tax);// so.itemList.item[i].taxRate1;
                                                rate = Convert.ToDouble(i.rate);// Convert.ToDouble(so.itemList.item[i].rate);
                                                discPercantage = Convert.ToDouble(i.discount);//Get the discounted and tax amount - WY-08.SEPT.2014
                                                //Get based price and price level - WY-29.SEPT.2014
                                                basedPrice = Convert.ToDouble(i.basedPrice);
                                                priceLevel = i.pricelevel;
                                            }

                                            itemID = "";
                                            title = "";
                                            soNumber = i.Mo_number;//FAS order 09/10/2018 - Mohan
                                            class_name = i.className;//FAS order 09/10/2018 - Mohan
                                            teacher_name = i.teacherName;//FAS order 09/10/2018 - Mohan
                                            itemInternalID = i.itemInternalID;// so.itemList.item[i].item.internalId;
                                            commitQty = Convert.ToDouble(i.committedQty); //Convert.ToDouble(i.committedQty);// so.itemList.item[i].quantityCommitted;
                                            ordQty = Convert.ToDouble(i.ordQty);// so.itemList.item[i].quantity; 
                                            discount = 0;
                                            //amount = commitQty * rate * ((100 + tax) / 100); //Convert.ToDouble(i.amount);// so.itemList.item[i].grossAmt; //Get the discounted and tax amount - WY-08.SEPT.2014
                                            amount = (commitQty * rate) - (commitQty * rate * discPercantage / 100) + (commitQty * rate * tax / 100); //Get the discounted and tax amount - WY-08.SEPT.2014
                                            discPrice = rate - (rate * discPercantage / 100);//Tax charge on the price after discount - WY-10.OCT.2014
                                            discPricePerQty = (1 * rate) - (1 * rate * discPercantage / 100) + (1 * discPrice * tax / 100);//To fix the Custom Invoice - WY-17.SEPT.2014

                                            location = checkRecordRefIsNull_internalID(so.location);//checkRecordRefIsNull_internalID(so.itemList.item[i].location);

                                            /*
                                            var query1 = (from q1 in entities.netsuite_syncso
                                                          where q1.nt2_rangeTo == r.rn_rangeTo && q1.nt2_moNo_internalID == so.internalId && q1.nt2_item_internalID == itemInternalID
                                                          select q1).ToList();

                                            if (query1.Count() > 0)
                                            {
                                                foreach (var q1 in query1)
                                                {
                                                    commitQty = Convert.ToDouble(q1.nt2_qtyForWMS);
                                                    amount = commitQty * rate * ((100 + tax) / 100);
                                                }
                                            }
                                            */
                                            var item = (from ii in entities.map_item
                                                        where ii.mi_item_internalID == itemInternalID
                                                        select ii).FirstOrDefault();

                                            if (item != null)
                                            {
                                                //itemID = checkIsNull(item.mi_item_ID);
                                                itemID = checkIsNull(item.mi_item_isbn); //Change to using isbn - WY-29.SEPT2014
                                                //title = checkIsNull(item.mi_item_title).Replace("'", "''");
                                                title = checkIsNull(item.mi_item_description).Replace("'", "''"); //Change to use item_description - WY-29.SEPT.2014
                                            }

                                            if (!String.IsNullOrEmpty(so.discountRate))
                                            {
                                                discount = Convert.ToDouble(so.discountRate.TrimStart('-').TrimEnd('%'));
                                            }

                                            if (subsidiary == "TH")
                                            {
                                                jobmoSchID = checkIsNull(customerIDDropshipTH).Replace("'", "''");
                                            }
                                            else
                                            {
                                                jobmoSchID = customerID;
                                            }

                                            // netsuite_jobordmaster_pack, netsuite_jobordmaster_packdetail, netsuite_jobmo_pack and netsuite_jobitem
                                            //FAS order 09/10/2018 - Mohan
                                            if (fasOrder.Equals("Y"))
                                            {
                                                #region netsuite_jobordmaster_pack
                                                Guid jobordmaster_pack_id = Guid.NewGuid();
                                                var insertNetsuiteJobOrdMasterPack = "insert into netsuite_jobordmaster_pack (nsjomp_jobOrdMaster_pack_ID,nsjomp_jobOrdMaster_ID,nsjomp_job_ID,nsjomp_ordNo,nsjomp_ordPack," +
                                                    "nsjomp_item_internalID,nsjomp_qty,nsjomp_ordQty,nsjomp_ordPrice,nsjomp_ordReplace,nsjomp_ofrCode,nsjomp_status,nsjomp_ordPackStatus,nsjomp_ordFulfill,nsjomp_ordDetDate,nsjomp_ordPoint," +
                                                    "nsjomp_packTitle,nsjomp_ofrDesc,nsjomp_location_internalID,nsjomp_tax,nsjomp_discount,nsjomp_orderLine,nsjomp_createdDate, nsjomp_rangeTo, nsjomp_moNo,nsjomp_ordRate, " +
                                                    "nsjomp_basedprice,nsjomp_pricelevel) SELECT '" + jobordmaster_pack_id + "',nsjom_jobOrdMaster_ID ," +
                                                    "'" + job_id + "','" + so.tranId + "','" + itemID + "','" + itemInternalID + "','" + ordQty + "','" + commitQty + "','" + discPricePerQty + "','Y','FAS','C','N','" + commitQty + "'," +
                                                    "'" + convertDateToString(so.tranDate) + "','0','" + title + "',null,'" + location + "','" + tax + "','" + discPercantage + "','" + (line + 1) + "','" + createdDate + "'," +
                                                    "'" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "','" + so.tranId + "','" + rate + "','" + basedPrice + "','" + priceLevel + " ' FROM netsuite_jobordmaster WHERE nsjom_ordStudent = '" + teacher_name + "' and nsjom_clsID = '" + class_name + "' and nsjom_mono = '" + soNumber + "' AND nsjom_nsj_job_ID = '" + job_id + "'";
                                                this.DataFromNetsuiteLog.Debug("SalesOrders (syncso): " + insertNetsuiteJobOrdMasterPack);
                                                entities.Database.ExecuteSqlCommand(insertNetsuiteJobOrdMasterPack);
                                                #endregion
                                                #region netsuite_jobordmaster_packdetail
                                                Guid jobordmaster_packdetail_id = Guid.NewGuid();
                                                var insertNetsuiteJobOrdMasterPackDetail = "insert into netsuite_jobordmaster_packdetail (nsjompd_jobOrdMaster_packDetail_ID,nsjompd_jobOrdMaster_pack_ID,nsjompd_job_ID,nsjompd_ordPack,nsjompd_skuNo,nsjompd_isbn," +
                                                    "nsjompd_isbn_secondary,nsjompd_item_internalID,nsjompd_sku_qty,nsjompd_item_ID,nsjompd_total_qty,nsjompd_scanned_qty,nsjompd_createdDate,nsjompd_rangeTo) values ('" + jobordmaster_packdetail_id + "'," +
                                                    //"'" + jobordmaster_pack_id + "','" + job_id + "','" + itemID + "','" + itemID + "','" + itemID + "','" + itemID + "','" + itemInternalID + "','" + commitQty + "','" + itemID + "','" + commitQty + "','0'," +
                                                    "'" + jobordmaster_pack_id + "','" + job_id + "','" + itemID + "','" + itemID + "','" + itemID + "','" + itemID + "','" + itemInternalID + "','1','" + itemID + "','" + commitQty + "','0'," + //Change the sky_qty to 1 - WY-15.OCT.2014
                                                    "'" + createdDate + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                                this.DataFromNetsuiteLog.Debug("SalesOrders (syncso): " + insertNetsuiteJobOrdMasterPackDetail);
                                                entities.Database.ExecuteSqlCommand(insertNetsuiteJobOrdMasterPackDetail);
                                                #endregion
                                                #region netsuite_jobmo_pack


                                                string schname = SplitEntityByName(SchnameFull).Replace("'", "''");

                                                string tempEntity = SchnameFull.Split(' ')[0];
                                                //checkIsNull(tempEntity).Replace("'", "''") + "'," + "'" + (schname).Replace("'", "''")

                                                Guid job_packID = Guid.NewGuid();
                                                var insertNetsuiteJobMOPack = "insert into netsuite_jobmo_pack (nsjmp_jobmoPack_ID,nsjmp_nsj_jobID,nsjmp_moNo,nsjmp_schID,nsjmp_schName,nsjmp_packID,nsjmp_packTitles,nsjmp_item_internalID," +
                                                    "nsjmp_packPrice,nsjmp_qty,nsjmp_amt,nsjmp_packISBN,nsjmp_moNo_internalID,nsjmp_createdDate,nsjmp_rangeTo) values ('" + job_packID + "','" + job_id + "','" + so.tranId + "'," +
                                                    //"'" + GetFirstSixChar(so.entity.name) + "','" + SplitEntityByName(so.entity.name).Replace("'", "''") + "','" + itemID + "','" + title + "','" + itemInternalID + "','" + discPricePerQty + "','" + commitQty + "'," +
                                                    "'" + jobmoSchID + "','" + (schname).Replace("'", "''") + "','" + itemID + "','" + title + "','" + itemInternalID + "','" + discPricePerQty + "','" + commitQty + "'," +//To get Customer ID - WY-22.SEPT.2014
                                                    "'" + amount + "','" + itemID + "','" + so.internalId + "','" + createdDate + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                                this.DataFromNetsuiteLog.Debug("SalesOrders (syncso): " + insertNetsuiteJobMOPack);
                                                entities.Database.ExecuteSqlCommand(insertNetsuiteJobMOPack);
                                                #endregion
                                                #region netsuite_jobitem

                                                var deleteDuplicateJobItemJob = "DELETE FROM netsuite_jobitem where nsji_nsj_jobID = '" + job_id + "' AND nsji_mono = '" + so.tranId + "'";
                                                this.DataFromNetsuiteLog.Debug("deleteDuplicateJobItemJob: " + deleteDuplicateJobItemJob);
                                                entities.Database.ExecuteSqlCommand(deleteDuplicateJobItemJob);


                                                var itemGroup = (from q1 in entities.netsuite_syncso

                                                                 where q1.nt2_moNo == so.tranId
                                                                 && (q1.nt2_rangeTo > trangeFrom && q1.nt2_rangeTo <= trangeTo)
                                                                 && q1.nt2_progressStatus == null && q1.nt2_qtyForWMS > 0
                                                                 group q1 by new { q1.nt2_item_internalID, q1.nt2_tax, q1.nt2_rate, q1.nt2_moNo, q1.nt2_basedprice, q1.nt2_pricelevel } into grouping
                                                                 select new SyncSO2
                                                                 {
                                                                     itemInternalID = grouping.Key.nt2_item_internalID,
                                                                     committedQty = grouping.Sum(q1 => q1.nt2_qtyForWMS),
                                                                     ordQty = grouping.Sum(q1 => q1.nt2_ordQty),
                                                                     tax = grouping.Key.nt2_tax,
                                                                     discount = grouping.Sum(q1 => q1.nt2_discount),
                                                                     rate = grouping.Key.nt2_rate,
                                                                     amount = grouping.Sum(q1 => q1.nt2_amount),
                                                                     basedPrice = grouping.Key.nt2_basedprice,
                                                                     pricelevel = grouping.Key.nt2_pricelevel,
                                                                     Mo_number = grouping.Key.nt2_moNo
                                                                 }).ToList();
                                                syncSOList2 = itemGroup;

                                                foreach (var JobItem in syncSOList2)
                                                {
                                                    Guid job_itemID = Guid.NewGuid();

                                                    itemID = "";
                                                    title = "";
                                                    soNumber = JobItem.Mo_number;
                                                    itemInternalID = JobItem.itemInternalID;// so.itemList.item[i].item.internalId;
                                                    commitQty = Convert.ToDouble(JobItem.committedQty); //Convert.ToDouble(i.committedQty);// so.itemList.item[i].quantityCommitted;
                                                    ordQty = Convert.ToDouble(JobItem.ordQty);// so.itemList.item[i].quantity; 
                                                    discount = 0;
                                                    //amount = commitQty * rate * ((100 + tax) / 100); //Convert.ToDouble(i.amount);// so.itemList.item[i].grossAmt; //Get the discounted and tax amount - WY-08.SEPT.2014
                                                    amount = (commitQty * rate) - (commitQty * rate * discPercantage / 100) + (commitQty * rate * tax / 100); //Get the discounted and tax amount - WY-08.SEPT.2014
                                                    discPrice = rate - (rate * discPercantage / 100);//Tax charge on the price after discount - WY-10.OCT.2014
                                                    discPricePerQty = (1 * rate) - (1 * rate * discPercantage / 100) + (1 * discPrice * tax / 100);//To fix the Custom Invoice - WY-17.SEPT.2014

                                                    location = checkRecordRefIsNull_internalID(so.location);//checkRecordRefIsNull_internalID
                                                    var item2 = (from ii in entities.map_item
                                                                 where ii.mi_item_internalID == itemInternalID
                                                                 select ii).FirstOrDefault();

                                                    if (item2 != null)
                                                    {
                                                        //itemID = checkIsNull(item.mi_item_ID);
                                                        itemID = checkIsNull(item2.mi_item_isbn); //Change to using isbn - WY-29.SEPT2014
                                                        //title = checkIsNull(item.mi_item_title).Replace("'", "''");
                                                        title = checkIsNull(item2.mi_item_description).Replace("'", "''"); //Change to use item_description - WY-29.SEPT.2014
                                                    }

                                                    if (!String.IsNullOrEmpty(so.discountRate))
                                                    {
                                                        discount = Convert.ToDouble(so.discountRate.TrimStart('-').TrimEnd('%'));
                                                    }


                                                    var insertNetsuiteJobItem = "insert into netsuite_jobitem (nsji_jobItem_ID,nsji_nsj_jobID,nsji_createdBy,nsji_createdDate,nsji_item_ID,nsji_item_qty," +
                                                        "nsji_posting_type,nsji_moNo,nsji_moNo_internalID,nsji_rangeTo) values ('" + job_itemID + "','" + job_id + "','NETSUITE','" + createdDate + "'," +
                                                        "'" + itemID + "','" + commitQty + "','SALES','" + so.tranId + "','" + so.internalId + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                                    this.DataFromNetsuiteLog.Debug("SalesOrders (syncso): " + insertNetsuiteJobItem);
                                                    entities.Database.ExecuteSqlCommand(insertNetsuiteJobItem);

                                                }






                                                //    var insertNetsuiteJobItem = "insert into netsuite_jobitem (nsji_jobItem_ID,nsji_nsj_jobID,nsji_createdBy,nsji_createdDate,nsji_item_ID,nsji_item_qty," +
                                                //"nsji_posting_type,nsji_moNo,nsji_moNo_internalID,nsji_rangeTo) SELECT '" + job_itemID + "','" + job_id + "','NETSUITE','" + createdDate + "'," +
                                                //"nt2_itemID,SUM(nt2_ordQty),'SALES','" + so.tranId + "','" + so.internalId + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "' FROM netsuite_syncso WHERE nt2_mono = '" + so.tranId + "' GROUP BY nt2_item_internalID, nt2_mono ,nt2_tax,nt2_basedprice,nt2_pricelevel";
                                                //    this.DataFromNetsuiteLog.Debug("SalesOrders (syncso): " + insertNetsuiteJobItem);
                                                //    entities.Database.ExecuteSqlCommand(insertNetsuiteJobItem);
                                                #endregion

                                                //FAS order 09/10/2018 - Mohan end
                                            }
                                            else
                                            {
                                                #region netsuite_jobordmaster_pack
                                                Guid jobordmaster_pack_id = Guid.NewGuid();
                                                var insertNetsuiteJobOrdMasterPack = "insert into netsuite_jobordmaster_pack (nsjomp_jobOrdMaster_pack_ID,nsjomp_jobOrdMaster_ID,nsjomp_job_ID,nsjomp_ordNo,nsjomp_ordPack," +
                                                    "nsjomp_item_internalID,nsjomp_qty,nsjomp_ordQty,nsjomp_ordPrice,nsjomp_ordReplace,nsjomp_ofrCode,nsjomp_status,nsjomp_ordPackStatus,nsjomp_ordFulfill,nsjomp_ordDetDate,nsjomp_ordPoint," +
                                                    "nsjomp_packTitle,nsjomp_ofrDesc,nsjomp_location_internalID,nsjomp_tax,nsjomp_discount,nsjomp_orderLine,nsjomp_createdDate, nsjomp_rangeTo, nsjomp_moNo,nsjomp_ordRate, " +
                                                    "nsjomp_basedprice,nsjomp_pricelevel) values ('" + jobordmaster_pack_id + "','" + jobordmaster_id + "'," +
                                                    "'" + job_id + "','" + so.tranId + "','" + itemID + "','" + itemInternalID + "','" + ordQty + "','" + commitQty + "','" + discPricePerQty + "','Y','TRADE','C','N','" + commitQty + "'," +
                                                    "'" + convertDateToString(so.tranDate) + "','0','" + title + "',null,'" + location + "','" + tax + "','" + discPercantage + "','" + (line + 1) + "','" + createdDate + "'," +
                                                    "'" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "','" + so.tranId + "','" + rate + "','" + basedPrice + "','" + priceLevel + "')";
                                                this.DataFromNetsuiteLog.Debug("SalesOrders (syncso): " + insertNetsuiteJobOrdMasterPack);
                                                entities.Database.ExecuteSqlCommand(insertNetsuiteJobOrdMasterPack);
                                                #endregion
                                                #region netsuite_jobordmaster_packdetail
                                                Guid jobordmaster_packdetail_id = Guid.NewGuid();
                                                var insertNetsuiteJobOrdMasterPackDetail = "insert into netsuite_jobordmaster_packdetail (nsjompd_jobOrdMaster_packDetail_ID,nsjompd_jobOrdMaster_pack_ID,nsjompd_job_ID,nsjompd_ordPack,nsjompd_skuNo,nsjompd_isbn," +
                                                    "nsjompd_isbn_secondary,nsjompd_item_internalID,nsjompd_sku_qty,nsjompd_item_ID,nsjompd_total_qty,nsjompd_scanned_qty,nsjompd_createdDate,nsjompd_rangeTo) values ('" + jobordmaster_packdetail_id + "'," +
                                                    //"'" + jobordmaster_pack_id + "','" + job_id + "','" + itemID + "','" + itemID + "','" + itemID + "','" + itemID + "','" + itemInternalID + "','" + commitQty + "','" + itemID + "','" + commitQty + "','0'," +
                                                    "'" + jobordmaster_pack_id + "','" + job_id + "','" + itemID + "','" + itemID + "','" + itemID + "','" + itemID + "','" + itemInternalID + "','1','" + itemID + "','" + commitQty + "','0'," + //Change the sky_qty to 1 - WY-15.OCT.2014
                                                    "'" + createdDate + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                                this.DataFromNetsuiteLog.Debug("SalesOrders (syncso): " + insertNetsuiteJobOrdMasterPackDetail);
                                                entities.Database.ExecuteSqlCommand(insertNetsuiteJobOrdMasterPackDetail);
                                                #endregion
                                                #region netsuite_jobmo_pack
                                                Guid job_packID = Guid.NewGuid();
                                                var insertNetsuiteJobMOPack = "insert into netsuite_jobmo_pack (nsjmp_jobmoPack_ID,nsjmp_nsj_jobID,nsjmp_moNo,nsjmp_schID,nsjmp_schName,nsjmp_packID,nsjmp_packTitles,nsjmp_item_internalID," +
                                                    "nsjmp_packPrice,nsjmp_qty,nsjmp_amt,nsjmp_packISBN,nsjmp_moNo_internalID,nsjmp_createdDate,nsjmp_rangeTo) values ('" + job_packID + "','" + job_id + "','" + so.tranId + "'," +
                                                    //"'" + GetFirstSixChar(so.entity.name) + "','" + SplitEntityByName(so.entity.name).Replace("'", "''") + "','" + itemID + "','" + title + "','" + itemInternalID + "','" + discPricePerQty + "','" + commitQty + "'," +
                                                    "'" + jobmoSchID + "','" + SplitEntityByName(so.entity.name).Replace("'", "''") + "','" + itemID + "','" + title + "','" + itemInternalID + "','" + discPricePerQty + "','" + commitQty + "'," +//To get Customer ID - WY-22.SEPT.2014
                                                    "'" + amount + "','" + itemID + "','" + so.internalId + "','" + createdDate + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                                this.DataFromNetsuiteLog.Debug("SalesOrders (syncso): " + insertNetsuiteJobMOPack);
                                                entities.Database.ExecuteSqlCommand(insertNetsuiteJobMOPack);
                                                #endregion
                                                #region netsuite_jobitem
                                                Guid job_itemID = Guid.NewGuid();
                                                var insertNetsuiteJobItem = "insert into netsuite_jobitem (nsji_jobItem_ID,nsji_nsj_jobID,nsji_createdBy,nsji_createdDate,nsji_item_ID,nsji_item_qty," +
                                                    "nsji_posting_type,nsji_moNo,nsji_moNo_internalID,nsji_rangeTo) values ('" + job_itemID + "','" + job_id + "','NETSUITE','" + createdDate + "'," +
                                                    "'" + itemID + "','" + commitQty + "','SALES','" + so.tranId + "','" + so.internalId + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                                this.DataFromNetsuiteLog.Debug("SalesOrders (syncso): " + insertNetsuiteJobItem);
                                                entities.Database.ExecuteSqlCommand(insertNetsuiteJobItem);
                                                #endregion
                                            }

                                            line++;
                                        }
                                        //}
                                        #endregion

                                        Int32 rowCount = g + 1;
                                        tolRow = rowCount;
                                        String _refno = "NETSUITE.SYNC-SO.SELECT." + r.rn_rangeFrom + "-" + r.rn_rangeTo;
                                        var insertTask = "insert into requestnetsuite_task (rnt_task, rnt_description, rnt_refNO, rnt_jobID, rnt_status, rnt_createdDate, " +
                                        "rnt_seqNO, rnt_createdFromInternalID, rnt_nsInternalId, rnt_updatedDate) values ('SELECT', '" + r.rn_sche_transactionType + "', '" + _refno + "', '" + r.rn_jobID + "'," +
                                        "'TRUE', '" + convertDateToString(DateTime.Now) + "', '" + rowCount + "','', '" + moNoInternalID + "', '" + convertDateToString(DateTime.Now) + "')";
                                        this.DataFromNetsuiteLog.Debug("SalesOrders2: " + insertTask);
                                        entities.Database.ExecuteSqlCommand(insertTask);

                                        //SYNCED - WY
                                        var updateSyncSo = "update netsuite_syncso set nt2_progressStatus = 'wms_jobID: " + job_id + "', nt2_lastModifiedDate = '" + convertDateToString(DateTime.Now) + "' " +
                                                            "where nt2_progressStatus is null " +
                                                            "and nt2_rangeTo <= '" + rangeTo + "' " +
                                                            "and nt2_moNo_internalID = '" + moNoInternalID + "'";
                                        this.DataFromNetsuiteLog.Debug("SalesOrders2: " + updateSyncSo);
                                        entities.Database.ExecuteSqlCommand(updateSyncSo);

                                    }
                                    #endregion
                                }
                            }

                            if (tolRow > 0)
                            {
                                var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                                    "where rn_jobID = '" + r.rn_jobID + "'";
                                this.DataFromNetsuiteLog.Debug("SalesOrders2: " + updateRequestNetsuite);
                                entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                                scope1.Complete();
                                status = true;
                            }
                        }
                        catch (Exception ex)
                        {
                            this.DataFromNetsuiteLog.Error("SalesOrders2 Exception: " + tolRow + pffRecord.Count() + ex.ToString());
                        }
                    }
                    else
                    {
                        var updateRequestNetsuite = "update requestnetsuite set rn_status='NO-DATA', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                            "where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("SalesOrders2: " + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                        scope1.Complete();
                    }
                }
            }
            return status;
        }
        //To extract update synced list - WY-04.NOV.2014
        private Boolean SalesOrdersSyncUpdate(sdeEntities entities, RequestNetsuiteEntity r)
        {
            this.DataFromNetsuiteLog.Info("SalesOrdersSyncUpdate: Pulling sales orders ********");
            //TBA
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            DataCenterAwareNetSuiteService netsuiteService = new DataCenterAwareNetSuiteService(account);

            Record[] pffRecord = null;
            Boolean status = false;

            //Status netsuiteStatus = new Status();
            //service.Timeout = 1000000000;
            //service.CookieContainer = new CookieContainer();
            //ApplicationInfo appinfo = new ApplicationInfo();
            //appinfo.applicationId = @Resource.NETSUITE_LOGIN_APPLICATIONID;
            //service.applicationInfo = appinfo;

            //Passport passport = new Passport();
            //passport.account = @Resource.NETSUITE_LOGIN_ACCOUNT;
            //passport.email = @Resource.NETSUITE_LOGIN_EMAIL;

            //RecordRef role = new RecordRef();
            //role.internalId = @Resource.NETSUITE_LOGIN_ROLE_INTERNALID;

            //passport.role = role;
            ////kang get netsuite password from DB
            ////passport.password = @Resource.NETSUITE_LOGIN_PASSWORD;
            //passport.password = getNetsuitePassword(@Resource.NETSUITE_LOGIN_EMAIL);

            //netsuiteStatus = service.login(passport).status;
            //Boolean loginStatus = netsuiteStatus.isSuccess;

            //TBA
            ItemSearchBasic basic = new ItemSearchBasic()
            {
                internalId = new SearchMultiSelectField()
                {
                    @operator = SearchMultiSelectFieldOperator.anyOf,
                    operatorSpecified = true,
                    searchValue = new RecordRef[] {
                    new RecordRef() {
                    internalId = "14943"
                         }
                    }
                }
            };


            netsuiteService.Timeout = 1000000000;
            netsuiteService.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();

            //  appinfo.applicationId = appID;
            netsuiteService.applicationInfo = appinfo;
            string loginEmail = "";
            loginEmail = @Resource.NETSUITE_LOGIN_EMAIL;
            tokenId = @Resource.ASIA_WEBSERVICE_TOKEN_ID;
            tokenSecret = @Resource.ASIA_WEBSERVICE_TOKEN_SECRET;


            Boolean loginStatus = false;
            try
            {
                Console.WriteLine("Success");
                netsuiteService.tokenPassport = createTokenPassport();
                SearchResult status1 = netsuiteService.search(basic);
                if (status1.status.isSuccess == true)
                {
                    loginStatus = true;
                }
                else
                {
                    loginStatus = false;
                }
            }
            catch (Exception ex)
            {
                loginStatus = false;
                this.DataFromNetsuiteLog.Fatal("SOFulfillmentUpdate: Login Netsuite failed. Exception : " + ex.ToString());

            }
            //

            if (loginStatus == true)
            {
                this.DataFromNetsuiteLog.Debug("SalesOrdersSyncUpdate: Login Netsuite success.");

                //TBA
                netsuiteService.tokenPassport = createTokenPassport();
                AsyncResult pffResponse = netsuiteService.getAsyncResult(r.rn_jobID, 1);
                AsyncSearchResult salesOrderSearchResult = (AsyncSearchResult)pffResponse;
                pffRecord = salesOrderSearchResult.searchResult.recordList;

                var updateRequestNetsuite = "update requestnetsuite set rn_status='PULLING', " +
                                            "rn_updatedDate = '" + convertDateToString(DateTime.Now) + "' where rn_jobID = '" + r.rn_jobID + "' ";
                this.DataFromNetsuiteLog.Debug("SalesOrdersSyncUpdate: " + updateRequestNetsuite);
                entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                //TBA
                //try
                //{
                //    netsuiteStatus = (service.logout()).status;
                //    if (netsuiteStatus.isSuccess == true)
                //    {
                //        this.DataFromNetsuiteLog.Debug("SalesOrdersSyncUpdate: Logout Netsuite success.");
                //    }
                //    else
                //    {
                //        this.DataFromNetsuiteLog.Error("SalesOrdersSyncUpdate: Logout Netsuite failed.");
                //    } 
                //}
                //catch (Exception ex)
                //{
                //    this.DataFromNetsuiteLog.Error("SalesOrdersSyncUpdate Logout Exception: " + ex.ToString()); 
                //}
            }
            else
            {
                this.DataFromNetsuiteLog.Fatal("SalesOrdersSyncUpdate: Login Netsuite failed.");
            }

            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(2400)
            };

            using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
            {
                if (pffRecord != null && pffRecord.Count() > 0)
                {
                    this.DataFromNetsuiteLog.Info("SalesOrdersSyncUpdate: " + pffRecord.Count() + " records is retrieved.");
                    try
                    {
                        String rangeFrom = convertDateToString(Convert.ToDateTime(r.rn_rangeFrom));
                        String rangeTo = convertDateToString(Convert.ToDateTime(r.rn_rangeTo));
                        String createdDate = convertDateToString(DateTime.Now);

                        for (int i = 0; i < pffRecord.Length; i++)
                        {
                            SalesOrder so = (SalesOrder)pffRecord[i];
                            String moNo = so.tranId;
                            String moNoInternalID = so.internalId;

                            var deleteSO1 = "delete from netsuite_syncupdateso where nt3_moNo_internalID = '" + moNoInternalID + "' ";
                            this.DataFromNetsuiteLog.Debug("SalesOrdersSyncUpdate: " + deleteSO1);
                            entities.Database.ExecuteSqlCommand(deleteSO1);

                            #region Loop Each Item in syncso into List
                            var syncList = (from synced in entities.netsuite_syncso
                                            where synced.nt2_moNo == moNo
                                            && synced.nt2_moNo_internalID == moNoInternalID
                                            && synced.nt2_lastfulfilledDate == null
                                            //orderby synced.nt2_seqID descending
                                            select new { synced.nt2_item_internalID, synced.nt2_qtyForWMS, synced.nt2_wmsfulfilledqty }).ToList();

                            //var groupQ2 = syncList.GroupBy(x => x.nt2_item_internalID).Select(g => g.First());

                            var groupQ2 = from p in syncList
                                          let k = new
                                          {
                                              itemInternalID = p.nt2_item_internalID,
                                          }
                                          group p by k into g
                                          select new
                                          {
                                              nt2_item_internalID = g.Key.itemInternalID,
                                              nt2_qtyForWMS = g.Sum(p => p.nt2_qtyForWMS),
                                              nt2_wmsfulfilledqty = g.Sum(p => p.nt2_wmsfulfilledqty)
                                          };

                            List<cls_syncupdsoitems> listSyncItems = new List<cls_syncupdsoitems>();
                            foreach (var item in groupQ2)
                            {
                                cls_syncupdsoitems syncItems = new cls_syncupdsoitems();
                                syncItems.soItemInternalID = item.nt2_item_internalID;
                                syncItems.tolQtyForWMS = Convert.ToDouble(item.nt2_qtyForWMS);
                                syncItems.wmsfulfilledQty = Convert.ToDouble(item.nt2_wmsfulfilledqty);
                                syncItems.remainingQty = Convert.ToDouble(item.nt2_qtyForWMS);// -Convert.ToDouble(item.nt2_wmsfulfilledqty); cpng sync
                                listSyncItems.Add(syncItems);
                            }
                            #endregion

                            for (int j = 0; j < so.itemList.item.Count(); j++)
                            {
                                #region Variable Declaration and Assigned
                                String itemInternalID = so.itemList.item[j].item.internalId;
                                Double committedQty = so.itemList.item[j].quantity - so.itemList.item[j].quantityFulfilled; //cpng sync
                                Double fulfilledQty = so.itemList.item[j].quantityFulfilled;
                                Double amount = so.itemList.item[j].amount;
                                Double ordQty = so.itemList.item[j].quantity;
                                Double tax = so.itemList.item[j].taxRate1;
                                Double rate = 0;
                                Double nt_discount = 0;
                                Double discTolValue = 0;
                                Double basedPrice = 0;
                                Double synceQty = 0;
                                //Double syncedQtyFromNS = 0;
                                String itemISBN = string.Empty;
                                String strDiscPercentage = string.Empty;
                                Int32 itemLine = Convert.ToInt32(so.itemList.item[j].line);
                                if (so.itemList.item[j].rate == null)
                                {
                                    rate = 0;
                                }
                                else
                                {
                                    rate = Convert.ToDouble(so.itemList.item[j].rate.Replace("%", ""));
                                }
                                #endregion

                                #region Synced Quantity Calculation
                                for (int a = 0; a < listSyncItems.Count(); a++)
                                {
                                    if (listSyncItems[a].soItemInternalID.Equals(itemInternalID))
                                    {
                                        Double updRemainQty = 0;

                                        if (listSyncItems[a].remainingQty > 0)
                                        {
                                            if (committedQty >= listSyncItems[a].remainingQty)
                                            {
                                                synceQty = listSyncItems[a].remainingQty;
                                            }
                                            else
                                            {
                                                synceQty = committedQty;
                                                updRemainQty = listSyncItems[a].remainingQty - committedQty;
                                            }
                                            listSyncItems[a].remainingQty = updRemainQty;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }
                                #endregion

                                #region Get Custom List Field Details
                                for (int discTol = 0; discTol < so.itemList.item[j].customFieldList.Count(); discTol++)
                                {
                                    if (so.itemList.item[j].customFieldList[discTol].ToString().Equals("sde.comNetsuiteServices.DoubleCustomFieldRef"))
                                    {
                                        DoubleCustomFieldRef custom1 = (DoubleCustomFieldRef)so.itemList.item[j].customFieldList[discTol];
                                        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_DISCTOTAL_SCRIPTID))
                                        {
                                            discTolValue = custom1.value;
                                        }
                                        else
                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_BASEDPRICE_SCRIPTID))
                                            {
                                                basedPrice = custom1.value;
                                            }
                                    }
                                    else
                                        if (so.itemList.item[j].customFieldList[discTol].ToString().Equals("sde.comNetsuiteServices.StringCustomFieldRef"))
                                        {
                                            StringCustomFieldRef custom1 = (StringCustomFieldRef)so.itemList.item[j].customFieldList[discTol];
                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_DISCPERCENTAGE_SCRIPTID))
                                            {
                                                strDiscPercentage = checkIsNull(custom1.value);
                                                if ((strDiscPercentage == "") || (strDiscPercentage == "%"))
                                                {
                                                    nt_discount = 0;
                                                }
                                                else
                                                {
                                                    strDiscPercentage = strDiscPercentage.Replace('%', ' ');
                                                    strDiscPercentage = strDiscPercentage.Replace('-', ' ');
                                                    nt_discount = Convert.ToDouble(strDiscPercentage);
                                                }
                                            }
                                        }
                                    //else
                                    //if (so.itemList.item[j].customFieldList[discTol].ToString().Equals("sde.comNetsuiteServices.LongCustomFieldRef"))
                                    //{
                                    //    LongCustomFieldRef custom1 = (LongCustomFieldRef)so.itemList.item[j].customFieldList[discTol];
                                    //    if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_ITEMSYNCED_SCRIPTID))
                                    //    {
                                    //        syncedQtyFromNS = custom1.value;
                                    //    }
                                    //}
                                }
                                var qItemIsbn = (from mi in entities.map_item
                                                 where mi.mi_item_internalID == itemInternalID
                                                 select mi.mi_item_isbn).FirstOrDefault();
                                if (!String.IsNullOrEmpty(qItemIsbn))
                                {
                                    itemISBN = qItemIsbn;
                                }
                                #endregion

                                var insertSO1 = "insert into netsuite_syncupdateso (nt3_moNo,nt3_moNo_internalID,nt3_itemISBN,nt3_item_internalID,nt3_ordQty,nt3_committedQty,nt3_fulfilledQty,nt3_tax," +
                                    "nt3_discount,nt3_rate,nt3_amount,nt3_createdDate,nt3_rangeTo,nt3_basedPrice,nt3_disctolvalue,nt3_syncedtoNS,nt3_itemLine) values (" +
                                    "'" + moNo + "','" + moNoInternalID + "','" + itemISBN + "','" + itemInternalID + "','" + ordQty + "','" + committedQty + "','" + fulfilledQty + "','" + tax + "'," +
                                    "'" + nt_discount + "','" + rate + "','" + amount + "','" + convertDateToString(DateTime.Now) + "','" + rangeTo + "','" + basedPrice + "','" + discTolValue + "'," +
                                    "'" + synceQty + "','" + itemLine + "')";
                                this.DataFromNetsuiteLog.Debug("SalesOrdersSyncUpdate: " + insertSO1);
                                entities.Database.ExecuteSqlCommand(insertSO1);
                            }

                            Int32 rowCount = i + 1;
                            String _refno = "NETSUITE.LATEST-SO.SELECT." + r.rn_rangeFrom + "-" + r.rn_rangeTo;
                            var insertTask = "insert into requestnetsuite_task (rnt_task, rnt_description, rnt_refNO, rnt_jobID, rnt_status, rnt_createdDate, " +
                            "rnt_seqNO, rnt_createdFromInternalID, rnt_nsInternalId, rnt_updatedDate) values ('SELECT', '" + r.rn_sche_transactionType + "', '" + _refno + "', '" + r.rn_jobID + "'," +
                            "'TRUE', '" + convertDateToString(DateTime.Now) + "', '" + rowCount + "','', '" + moNoInternalID + "', '" + convertDateToString(DateTime.Now) + "')";
                            this.DataFromNetsuiteLog.Debug("SalesOrdersSyncUpdate: " + insertTask);
                            entities.Database.ExecuteSqlCommand(insertTask);
                        }

                        /* START: Change UPD-STATUS.NS-SO DEDUCT SYNC to be run after created - 08.JUNE.2015*/
                        var insRequestNetsuite = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status,rn_updatedDate,rn_rangeFrom,rn_rangeTo) values " +
                                    "('UPD-STATUS.NS-SO DEDUCT SYNC','" + convertDateToString(DateTime.Now) + "','START','" + convertDateToString(DateTime.Now) + "','" + rangeFrom + "','" + convertDateToString(DateTime.Now.AddMinutes(2)) + "')";
                        this.DataFromNetsuiteLog.Debug("SalesOrdersDeductSyncUpdate: " + insRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(insRequestNetsuite);
                        /*   END: Change UPD-STATUS.NS-SO DEDUCT SYNC to be run after created - 08.JUNE.2015*/

                        var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                            "where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("SalesOrdersSyncUpdate: " + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                        scope1.Complete();
                        status = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataFromNetsuiteLog.Error("SalesOrdersSyncUpdate Exception: " + ex.ToString());
                        status = false;
                    }
                }
                else
                {
                    var updateRequestNetsuite = "update requestnetsuite set rn_status='NO-DATA', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                        "where rn_jobID = '" + r.rn_jobID + "'";
                    this.DataFromNetsuiteLog.Debug("SalesOrdersSyncUpdate: " + updateRequestNetsuite);
                    entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                    scope1.Complete();
                }
            }
            return status;
        }
        //To extract deduct synced list - WY-07.NOV.2014
        private Boolean SalesOrdersDeductSyncUpdate(sdeEntities entities, RequestNetsuiteEntity r)
        {
            this.DataFromNetsuiteLog.Info("SalesOrdersDeductSyncUpdate: Pulling sales orders ********");

            //TBA
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            DataCenterAwareNetSuiteService netsuiteService = new DataCenterAwareNetSuiteService(account);

            Record[] pffRecord = null;
            Boolean status = false;

            //Status netsuiteStatus = new Status();
            //service.Timeout = 1000000000;
            //service.CookieContainer = new CookieContainer();
            //ApplicationInfo appinfo = new ApplicationInfo();
            //appinfo.applicationId = @Resource.NETSUITE_LOGIN_APPLICATIONID;
            //service.applicationInfo = appinfo;

            //Passport passport = new Passport();
            //passport.account = @Resource.NETSUITE_LOGIN_ACCOUNT;
            //passport.email = @Resource.NETSUITE_LOGIN_EMAIL;

            //RecordRef role = new RecordRef();
            //role.internalId = @Resource.NETSUITE_LOGIN_ROLE_INTERNALID;

            //passport.role = role;
            ////kang get netsuite password from DB
            ////passport.password = @Resource.NETSUITE_LOGIN_PASSWORD;
            //passport.password = getNetsuitePassword(@Resource.NETSUITE_LOGIN_EMAIL);

            //netsuiteStatus = service.login(passport).status;
            //Boolean loginStatus = netsuiteStatus.isSuccess;

            //TBA
            ItemSearchBasic basic = new ItemSearchBasic()
            {
                internalId = new SearchMultiSelectField()
                {
                    @operator = SearchMultiSelectFieldOperator.anyOf,
                    operatorSpecified = true,
                    searchValue = new RecordRef[] {
                    new RecordRef() {
                    internalId = "14943"
                         }
                    }
                }
            };


            netsuiteService.Timeout = 1000000000;
            netsuiteService.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();

            //  appinfo.applicationId = appID;
            netsuiteService.applicationInfo = appinfo;
            string loginEmail = "";
            loginEmail = @Resource.NETSUITE_LOGIN_EMAIL;
            tokenId = @Resource.ASIA_WEBSERVICE_TOKEN_ID;
            tokenSecret = @Resource.ASIA_WEBSERVICE_TOKEN_SECRET;


            Boolean loginStatus = false;
            try
            {
                Console.WriteLine("Success");
                netsuiteService.tokenPassport = createTokenPassport();
                SearchResult status1 = netsuiteService.search(basic);
                if (status1.status.isSuccess == true)
                {
                    loginStatus = true;
                }
                else
                {
                    loginStatus = false;
                }
            }
            catch (Exception ex)
            {
                loginStatus = false;
                this.DataFromNetsuiteLog.Fatal("SOFulfillmentUpdate: Login Netsuite failed. Exception : " + ex.ToString());

            }
            //

            if (loginStatus == true)
            {
                this.DataFromNetsuiteLog.Debug("SalesOrdersDeductSyncUpdate: Login Netsuite success.");

                //TBA
                netsuiteService.tokenPassport = createTokenPassport();
                AsyncResult pffResponse = netsuiteService.getAsyncResult(r.rn_jobID, 1);
                AsyncSearchResult salesOrderSearchResult = (AsyncSearchResult)pffResponse;
                pffRecord = salesOrderSearchResult.searchResult.recordList;


                var updateRequestNetsuite = "update requestnetsuite set rn_status='PULLING', " +
                                            "rn_updatedDate = '" + convertDateToString(DateTime.Now) + "' where rn_jobID = '" + r.rn_jobID + "' ";
                this.DataFromNetsuiteLog.Debug("SalesOrdersDeductSyncUpdate: " + updateRequestNetsuite);
                entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                //TBA
                //try
                //{
                //    netsuiteStatus = (service.logout()).status;
                //    if (netsuiteStatus.isSuccess == true)
                //    {
                //        this.DataFromNetsuiteLog.Debug("SalesOrdersDeductSyncUpdate: Logout Netsuite success.");
                //    }
                //    else
                //    {
                //        this.DataFromNetsuiteLog.Error("SalesOrdersDeductSyncUpdate: Logout Netsuite failed.");
                //    }
                //}
                //catch (Exception ex)
                //{
                //    this.DataFromNetsuiteLog.Error("SalesOrdersDeductSyncUpdate Logout Exception: " + ex.ToString());
                //}
            }
            else
            {
                this.DataFromNetsuiteLog.Fatal("SalesOrdersDeductSyncUpdate: Login Netsuite failed.");
            }

            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(2400)
            };

            using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
            {
                if (pffRecord != null && pffRecord.Count() > 0)
                {
                    this.DataFromNetsuiteLog.Info("SalesOrdersDeductSyncUpdate: " + pffRecord.Count() + " records is retrieved.");
                    try
                    {
                        String rangeFrom = convertDateToString(Convert.ToDateTime(r.rn_rangeFrom));
                        String rangeTo = convertDateToString(Convert.ToDateTime(r.rn_rangeTo));
                        String createdDate = convertDateToString(DateTime.Now);

                        for (int i = 0; i < pffRecord.Length; i++)
                        {
                            SalesOrder so = (SalesOrder)pffRecord[i];
                            String moNo = so.tranId;
                            String moNoInternalID = so.internalId;

                            var deleteSO1 = "delete from netsuite_syncupdateso where nt3_moNo_internalID = '" + moNoInternalID + "' ";
                            this.DataFromNetsuiteLog.Debug("SalesOrdersDeductSyncUpdate: " + deleteSO1);
                            entities.Database.ExecuteSqlCommand(deleteSO1);

                            #region Loop Each Item in syncso into List
                            var syncList = (from synced in entities.netsuite_syncso
                                            where synced.nt2_moNo == moNo
                                            && synced.nt2_moNo_internalID == moNoInternalID
                                            && synced.nt2_lastfulfilledDate == null
                                            //orderby synced.nt2_seqID descending
                                            select new { synced.nt2_item_internalID, synced.nt2_qtyForWMS, synced.nt2_wmsfulfilledqty }).ToList();

                            //var groupQ2 = syncList.GroupBy(x => x.nt2_item_internalID).Select(g => g.First());

                            var groupQ2 = from p in syncList
                                          let k = new
                                          {
                                              itemInternalID = p.nt2_item_internalID,
                                          }
                                          group p by k into g
                                          select new
                                          {
                                              nt2_item_internalID = g.Key.itemInternalID,
                                              nt2_qtyForWMS = g.Sum(p => p.nt2_qtyForWMS),
                                              nt2_wmsfulfilledqty = g.Sum(p => p.nt2_wmsfulfilledqty)
                                          };

                            List<cls_syncupdsoitems> listSyncItems = new List<cls_syncupdsoitems>();
                            foreach (var item in groupQ2)
                            {
                                cls_syncupdsoitems syncItems = new cls_syncupdsoitems();
                                syncItems.soItemInternalID = item.nt2_item_internalID;
                                syncItems.tolQtyForWMS = Convert.ToDouble(item.nt2_qtyForWMS);
                                syncItems.remainingQty = Convert.ToDouble(item.nt2_qtyForWMS);// -Convert.ToDouble(item.nt2_wmsfulfilledqty);  cpng
                                listSyncItems.Add(syncItems);
                            }
                            #endregion

                            for (int j = 0; j < so.itemList.item.Count(); j++)
                            {
                                #region Variable Declaration and Assigned
                                String itemInternalID = so.itemList.item[j].item.internalId;
                                Double committedQty = so.itemList.item[j].quantity - so.itemList.item[j].quantityFulfilled; //cpng sync
                                Double fulfilledQty = so.itemList.item[j].quantityFulfilled;
                                Double amount = so.itemList.item[j].amount;
                                Double ordQty = so.itemList.item[j].quantity;
                                Double tax = so.itemList.item[j].taxRate1;
                                Double rate = 0;
                                Double nt_discount = 0;
                                Double discTolValue = 0;
                                Double basedPrice = 0;
                                Double synceQty = 0;
                                //Double syncedQtyFromNS = 0;
                                String itemISBN = string.Empty;
                                String strDiscPercentage = string.Empty;
                                Int32 itemLine = Convert.ToInt32(so.itemList.item[j].line);
                                if (so.itemList.item[j].rate == null)
                                {
                                    rate = 0;
                                }
                                else
                                {
                                    rate = Convert.ToDouble(so.itemList.item[j].rate.Replace("%", ""));
                                }
                                #endregion

                                #region Get Custom List Field Details
                                for (int discTol = 0; discTol < so.itemList.item[j].customFieldList.Count(); discTol++)
                                {
                                    if (so.itemList.item[j].customFieldList[discTol].ToString().Equals("sde.comNetsuiteServices.DoubleCustomFieldRef"))
                                    {
                                        DoubleCustomFieldRef custom1 = (DoubleCustomFieldRef)so.itemList.item[j].customFieldList[discTol];
                                        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_DISCTOTAL_SCRIPTID))
                                        {
                                            discTolValue = custom1.value;
                                        }
                                        else
                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_BASEDPRICE_SCRIPTID))
                                            {
                                                basedPrice = custom1.value;
                                            }
                                    }
                                    else
                                        if (so.itemList.item[j].customFieldList[discTol].ToString().Equals("sde.comNetsuiteServices.StringCustomFieldRef"))
                                        {
                                            StringCustomFieldRef custom1 = (StringCustomFieldRef)so.itemList.item[j].customFieldList[discTol];
                                            if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_DISCPERCENTAGE_SCRIPTID))
                                            {
                                                strDiscPercentage = checkIsNull(custom1.value);
                                                if ((strDiscPercentage == "") || (strDiscPercentage == "%"))
                                                {
                                                    nt_discount = 0;
                                                }
                                                else
                                                {
                                                    strDiscPercentage = strDiscPercentage.Replace('%', ' ');
                                                    strDiscPercentage = strDiscPercentage.Replace('-', ' ');
                                                    nt_discount = Convert.ToDouble(strDiscPercentage);
                                                }
                                            }
                                        }
                                    //else
                                    //    if (so.itemList.item[j].customFieldList[discTol].ToString().Equals("sde.comNetsuiteServices.LongCustomFieldRef"))
                                    //    {
                                    //        LongCustomFieldRef custom1 = (LongCustomFieldRef)so.itemList.item[j].customFieldList[discTol];
                                    //        if (custom1.scriptId.Equals(@Resource.CUSTOMFIELD_ITEMSYNCED_SCRIPTID))
                                    //        {
                                    //            syncedQtyFromNS = custom1.value;
                                    //        }
                                    //    }
                                }

                                var qItemIsbn = (from mi in entities.map_item
                                                 where mi.mi_item_internalID == itemInternalID
                                                 select mi.mi_item_isbn).FirstOrDefault();
                                if (!String.IsNullOrEmpty(qItemIsbn))
                                {
                                    itemISBN = qItemIsbn;
                                }
                                #endregion

                                #region Synced Quantity Calculation
                                for (int a = 0; a < listSyncItems.Count(); a++)
                                {
                                    if (listSyncItems[a].soItemInternalID.Equals(itemInternalID))
                                    {
                                        Double updRemainQty = 0;

                                        if (listSyncItems[a].remainingQty > 0)
                                        {
                                            if (committedQty >= listSyncItems[a].remainingQty)
                                            {
                                                synceQty = listSyncItems[a].remainingQty;
                                            }
                                            else
                                            {
                                                synceQty = committedQty;
                                                updRemainQty = listSyncItems[a].remainingQty - committedQty;
                                            }
                                            listSyncItems[a].remainingQty = updRemainQty;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }
                                #endregion

                                var insertSO1 = "insert into netsuite_syncupdateso (nt3_moNo,nt3_moNo_internalID,nt3_itemISBN,nt3_item_internalID,nt3_ordQty,nt3_committedQty,nt3_fulfilledQty,nt3_tax," +
                                    "nt3_discount,nt3_rate,nt3_amount,nt3_createdDate,nt3_rangeTo,nt3_basedPrice,nt3_disctolvalue,nt3_syncedtoNS,nt3_itemLine) values (" +
                                    "'" + moNo + "','" + moNoInternalID + "','" + itemISBN + "','" + itemInternalID + "','" + ordQty + "','" + committedQty + "','" + fulfilledQty + "','" + tax + "'," +
                                    "'" + nt_discount + "','" + rate + "','" + amount + "','" + convertDateToString(DateTime.Now) + "','" + rangeTo + "','" + basedPrice + "','" + discTolValue + "'," +
                                    "'" + synceQty + "','" + itemLine + "')";
                                this.DataFromNetsuiteLog.Debug("SalesOrdersDeductSyncUpdate: " + insertSO1);
                                entities.Database.ExecuteSqlCommand(insertSO1);
                            }

                            Int32 rowCount = i + 1;
                            String _refno = "NETSUITE.LATEST-SO.SELECT." + r.rn_rangeFrom + "-" + r.rn_rangeTo;
                            var insertTask = "insert into requestnetsuite_task (rnt_task, rnt_description, rnt_refNO, rnt_jobID, rnt_status, rnt_createdDate, " +
                            "rnt_seqNO, rnt_createdFromInternalID, rnt_nsInternalId, rnt_updatedDate) values ('SELECT', '" + r.rn_sche_transactionType + "', '" + _refno + "', '" + r.rn_jobID + "'," +
                            "'TRUE', '" + convertDateToString(DateTime.Now) + "', '" + rowCount + "','', '" + moNoInternalID + "', '" + convertDateToString(DateTime.Now) + "')";
                            this.DataFromNetsuiteLog.Debug("SalesOrdersDeductSyncUpdate: " + insertTask);
                            entities.Database.ExecuteSqlCommand(insertTask);

                        }

                        /* START: Change UPD-STATUS.NS-SO DEDUCT SYNC to be run after created - 08.JUNE.2015*/
                        var insRequestNetsuite = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status,rn_updatedDate,rn_rangeFrom,rn_rangeTo) values " +
                                    "('UPD-STATUS.NS-SO DEDUCT SYNC','" + convertDateToString(DateTime.Now) + "','START','" + convertDateToString(DateTime.Now) + "','" + rangeFrom + "','" + convertDateToString(DateTime.Now.AddMinutes(2)) + "')";
                        this.DataFromNetsuiteLog.Debug("SalesOrdersDeductSyncUpdate: " + insRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(insRequestNetsuite);
                        /*   END: Change UPD-STATUS.NS-SO DEDUCT SYNC to be run after created - 08.JUNE.2015*/

                        var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                            "where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("SalesOrdersDeductSyncUpdate: " + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                        scope1.Complete();
                        status = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataFromNetsuiteLog.Error("SalesOrdersDeductSyncUpdate Exception: " + ex.ToString());
                        status = false;
                    }
                }
                else
                {
                    var updateRequestNetsuite = "update requestnetsuite set rn_status='NO-DATA', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                        "where rn_jobID = '" + r.rn_jobID + "'";
                    this.DataFromNetsuiteLog.Debug("SalesOrdersDeductSyncUpdate: " + updateRequestNetsuite);
                    entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                    scope1.Complete();
                }
            }
            return status;
        }
        //To Update wmsfulfilledqty column at netsuite_syncso WY-06.NOV.2214
        private Boolean SOFulfillmentSyncedUpdate(sdeEntities entities, Int32 requestNetsuiteID, DateTime rangeFrom, DateTime rangeTo)
        {
            this.DataFromNetsuiteLog.Info("SOFulfillmentSyncedUpdate: Extracting SO fulfillment info from wms_jobordscan_pack ********");

            Boolean status = false;
            String createdDate = convertDateToString(DateTime.Now);
            String convertRangeFrom = convertDateToString(rangeFrom);
            String convertRangeTo = convertDateToString(rangeTo);
            Guid gjob_id = Guid.NewGuid();
            Int32 rowCount = 0;

            //Extend the transaction timeout - WY-02.SEPT.2014
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(2400)
            };

            using (TransactionScope scope1 = new TransactionScope())
            {
                try
                {
                    /*
                    var qFulfill = (from q1 in entities.wms_jobordscan
                                    join q2 in entities.netsuite_jobmo on q1.jos_moNo equals q2.nsjm_moNo
                                    where q1.jos_businessChannel_code == "ET"
                                    && (q1.jos_rangeTo > rangeFrom && q1.jos_rangeTo <= rangeTo)
                                    && q1.jos_syncupdate == null
                                    select new { q1.jos_moNo,q2.nsjm_moNo_internalID }).Distinct().ToList();
                    */

                    var queryAA = (from q1 in entities.wms_jobordscan
                                   join q2 in entities.netsuite_jobmo on q1.jos_moNo equals q2.nsjm_moNo
                                   join q3 in entities.netsuite_syncso on q1.jos_moNo equals q3.nt2_moNo
                                   where (q1.jos_businessChannel_code == "ET" || q1.jos_businessChannel_code == "BC")
                                  && (q1.jos_rangeTo > rangeFrom && q1.jos_rangeTo <= rangeTo)
                                   select new
                                   {
                                       q1.jos_moNo,
                                       q2.nsjm_moNo_internalID,
                                       isFirstRun = q1.jos_syncupdate == null ? "Y" : "N",
                                       q1.jos_job_ID, //to solve 2 sync per day - WY-10.MAR.2015
                                       q3.nt2_is_fas //FAS order 09/10/2018 - Mohan
                                   })
                                    .Distinct()
                                    .ToList();

                    //to solve 2 sync per day - WY-10.MAR.2015
                    List<string> _IDjob = new List<string>();
                    foreach (var qJobID in queryAA)
                    {
                        if (qJobID.isFirstRun == "Y")
                        {
                            _IDjob.Add(qJobID.jos_job_ID);
                        }
                    }

                    var qFulfill = (from d in queryAA
                                    where d.isFirstRun == "Y"
                                    select new { d.jos_moNo, d.nsjm_moNo_internalID, d.nt2_is_fas }).Distinct().ToList(); //FAS order 09/10/2018 - Mohan

                    if (qFulfill.Count() > 0)
                        foreach (var fasJob in qFulfill)
                        {
                            if (fasJob.nt2_is_fas == "Y")
                            {
                                if (qFulfill.Count() > 0)
                                {
                                    foreach (var q1 in qFulfill)
                                    {
                                        Int32 tolFulfillQty = 0;
                                        var updJobOrdScan = "UPDATE wms_jobordscan SET jos_syncupdate = '" + gjob_id.ToString() + "' WHERE jos_syncupdate is null " +
                                                                "and jos_moNo = '" + q1.jos_moNo + "' " +
                                                                "and jos_rangeTo > '" + convertDateToString(rangeFrom) + "' " +
                                                                "and jos_rangeTo <= '" + convertDateToString(rangeTo) + "'";
                                        this.DataFromNetsuiteLog.Debug("SOFulfillmentSyncedUpdate: " + updJobOrdScan);
                                        entities.Database.ExecuteSqlCommand(updJobOrdScan);


                                        string wmsJobID = string.Empty;
                                        var qFulfillItem = (from josp in entities.wms_jobordscan_pack
                                                            join jomp in entities.netsuite_jobordmaster_pack on josp.josp_pack_ID equals jomp.nsjomp_jobOrdMaster_pack_ID
                                                            join jompd in entities.netsuite_jobordmaster_packdetail on jomp.nsjomp_jobOrdMaster_pack_ID equals jompd.nsjompd_jobOrdMaster_pack_ID
                                                            join nsjom in entities.netsuite_jobordmaster on jomp.nsjomp_jobOrdMaster_ID equals
                                                            nsjom.nsjom_jobOrdMaster_ID
                                                            join nsjmc in entities.netsuite_jobmocls on nsjom.nsjom_jobCls_id equals
                                                            nsjmc.nsjmc_jobMoCls_ID
                                                            where josp.josp_moNo == q1.jos_moNo
                                                            && josp.josp_rangeTo > rangeFrom
                                                            && josp.josp_rangeTo <= rangeTo
                                                            && _IDjob.Contains(josp.josp_jobID) //to solve 2 sync per day - WY-10.MAR.2015
                                                            select new { jompd.nsjompd_item_internalID, jomp.nsjomp_job_ID, qty = josp.josp_ordFulFill, nsjmc.nsjmc_clsNo }).ToList();

                                        foreach (var qItem in qFulfillItem)
                                        {
                                            this.DataFromNetsuiteLog.Debug("SOFulfillmentSyncedUpdate: wms_jobID:" + qItem.nsjomp_job_ID);
                                            this.DataFromNetsuiteLog.Debug("SOFulfillmentSyncedUpdate:      item:" + qItem.nsjompd_item_internalID);
                                            this.DataFromNetsuiteLog.Debug("SOFulfillmentSyncedUpdate:  quantity:" + qItem.qty);

                                            wmsJobID = "wms_jobID: " + qItem.nsjomp_job_ID;
                                            Int32 nt2WmsFulfilledQty = Convert.ToInt32(qItem.qty);
                                            var updSyncSO = "UPDATE netsuite_syncso SET  nt2_unfulfilledqty=nt2_qtyForWMS - " + nt2WmsFulfilledQty + ", nt2_wmsfulfilledqty = IFNULL(nt2_wmsfulfilledqty,0) + " + nt2WmsFulfilledQty + ", nt2_qtyForWMS = " + nt2WmsFulfilledQty + " , nt2_lastfulfilledDate = '" + createdDate + "' " +
                                                            " WHERE nt2_progressStatus = '" + wmsJobID + "' AND nt2_item_internalID = '" + qItem.nsjompd_item_internalID + "' " +
                                                            " AND nt2_moNo = '" + q1.jos_moNo + "' AND nt2_lastfulfilledDate IS NULL AND nt2_class_name = '" + qItem.nsjmc_clsNo + "'";
                                            this.DataFromNetsuiteLog.Debug("SOFulfillmentSyncedUpdate: " + updSyncSO);
                                            entities.Database.ExecuteSqlCommand(updSyncSO);
                                            rowCount++;
                                            tolFulfillQty = tolFulfillQty + nt2WmsFulfilledQty;//to calculate the totalfulfill qty, if zero will it from billing. - WY-06.MAY.2016
                                        }

                                        //To Update GMYInvoiceProgress is no fulfillment at all for the order - WY-06.MAY.2016
                                        if (tolFulfillQty <= 0)
                                        {
                                            this.DataFromNetsuiteLog.Info("Update GMY Invoice NO-DATA : " + q1.jos_moNo + "rangeFrom:" + convertDateToString(rangeFrom) + "rangeTo" + convertDateToString(rangeTo));

                                            var updGMYInv = "UPDATE wms_jobordscan SET jos_GMYInvoiceProgress = 'NO-DATA' WHERE jos_GMYInvoiceProgress is null " +
                                                             "and jos_moNo = '" + q1.jos_moNo + "' " +
                                                             "and jos_rangeTo > '" + convertDateToString(rangeFrom) + "' " +
                                                             "and jos_rangeTo <= '" + convertDateToString(rangeTo) + "'";
                                            this.DataFromNetsuiteLog.Debug("SOFulfillmentSyncedUpdate: " + updGMYInv);
                                            entities.Database.ExecuteSqlCommand(updGMYInv);
                                        }
                                    }

                                }
                            }
                            else
                            {
                                if (qFulfill.Count() > 0)
                                {
                                    foreach (var q1 in qFulfill)
                                    {
                                        Int32 tolFulfillQty = 0; //to calculate the totalfulfill qty, if zero will it from billing. - WY-06.MAY.2016

                                        var updJobOrdScan = "UPDATE wms_jobordscan SET jos_syncupdate = '" + gjob_id.ToString() + "' WHERE jos_syncupdate is null " +
                                                         "and jos_moNo = '" + q1.jos_moNo + "' " +
                                                         "and jos_rangeTo > '" + convertDateToString(rangeFrom) + "' " +
                                                         "and jos_rangeTo <= '" + convertDateToString(rangeTo) + "'";
                                        this.DataFromNetsuiteLog.Debug("SOFulfillmentSyncedUpdate: " + updJobOrdScan);
                                        entities.Database.ExecuteSqlCommand(updJobOrdScan);

                                        string wmsJobID = string.Empty;
                                        var qFulfillItem = (from josp in entities.wms_jobordscan_pack
                                                            join jomp in entities.netsuite_jobordmaster_pack on josp.josp_pack_ID equals jomp.nsjomp_jobOrdMaster_pack_ID
                                                            join jompd in entities.netsuite_jobordmaster_packdetail on jomp.nsjomp_jobOrdMaster_pack_ID equals jompd.nsjompd_jobOrdMaster_pack_ID
                                                            where josp.josp_moNo == q1.jos_moNo
                                                            && josp.josp_rangeTo > rangeFrom
                                                            && josp.josp_rangeTo <= rangeTo
                                                            && _IDjob.Contains(josp.josp_jobID) //to solve 2 sync per day - WY-10.MAR.2015
                                                            select new { jompd.nsjompd_item_internalID, jomp.nsjomp_job_ID, qty = josp.josp_ordFulFill }).ToList();

                                        foreach (var qItem in qFulfillItem)
                                        {
                                            this.DataFromNetsuiteLog.Debug("SOFulfillmentSyncedUpdate: wms_jobID:" + qItem.nsjomp_job_ID);
                                            this.DataFromNetsuiteLog.Debug("SOFulfillmentSyncedUpdate:      item:" + qItem.nsjompd_item_internalID);
                                            this.DataFromNetsuiteLog.Debug("SOFulfillmentSyncedUpdate:  quantity:" + qItem.qty);

                                            wmsJobID = "wms_jobID: " + qItem.nsjomp_job_ID;
                                            Int32 nt2WmsFulfilledQty = Convert.ToInt32(qItem.qty);
                                            var updSyncSO = "UPDATE netsuite_syncso SET  nt2_unfulfilledqty=nt2_qtyForWMS - " + nt2WmsFulfilledQty + ", nt2_wmsfulfilledqty = IFNULL(nt2_wmsfulfilledqty,0) + " + nt2WmsFulfilledQty + ", nt2_qtyForWMS = " + nt2WmsFulfilledQty + " , nt2_lastfulfilledDate = '" + createdDate + "' " +
                                                            " WHERE nt2_progressStatus = '" + wmsJobID + "' AND nt2_item_internalID = '" + qItem.nsjompd_item_internalID + "' " +
                                                            " AND nt2_moNo = '" + q1.jos_moNo + "' AND nt2_lastfulfilledDate IS NULL  ";
                                            this.DataFromNetsuiteLog.Debug("SOFulfillmentSyncedUpdate: " + updSyncSO);
                                            entities.Database.ExecuteSqlCommand(updSyncSO);
                                            rowCount++;
                                            tolFulfillQty = tolFulfillQty + nt2WmsFulfilledQty;//to calculate the totalfulfill qty, if zero will it from billing. - WY-06.MAY.2016
                                        }

                                        //To Update GMYInvoiceProgress is no fulfillment at all for the order - WY-06.MAY.2016
                                        if (tolFulfillQty <= 0)
                                        {
                                            this.DataFromNetsuiteLog.Info("Update GMY Invoice NO-DATA : " + q1.jos_moNo + "rangeFrom:" + convertDateToString(rangeFrom) + "rangeTo" + convertDateToString(rangeTo));

                                            var updGMYInv = "UPDATE wms_jobordscan SET jos_GMYInvoiceProgress = 'NO-DATA' WHERE jos_GMYInvoiceProgress is null " +
                                                             "and jos_moNo = '" + q1.jos_moNo + "' " +
                                                             "and jos_rangeTo > '" + convertDateToString(rangeFrom) + "' " +
                                                             "and jos_rangeTo <= '" + convertDateToString(rangeTo) + "'";
                                            this.DataFromNetsuiteLog.Debug("SOFulfillmentSyncedUpdate: " + updGMYInv);
                                            entities.Database.ExecuteSqlCommand(updGMYInv);
                                        }
                                    }

                                }
                            }
                            status = true;
                        }
                }
                catch (Exception ex)
                {
                    this.DataFromNetsuiteLog.Error("SOFulfillmentSyncedUpdate Exception: " + ex.ToString());
                    status = false;
                    if (rowCount == 0)
                    {
                        rowCount++;
                    }
                }

                if (status == true)
                {
                    if (rowCount > 0)
                    {
                        var updateRequestNetsuite = "update requestnetsuite set rn_jobID='" + gjob_id.ToString() + "'," +
                            "rn_updatedDate = '" + convertDateToString(DateTime.Now) + "', rn_status='UPLOADED' where rn_id = '" + requestNetsuiteID + "'";
                        this.DataFromNetsuiteLog.Debug("SOFulfillmentSyncedUpdate: " + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                        scope1.Complete();
                    }
                    else if (rowCount == 0)
                    {
                        var updateRequestNetsuite = "update requestnetsuite set rn_jobID='NO-DATA',rn_status='NO-DATA'," +
                            "rn_updatedDate = '" + convertDateToString(DateTime.Now) + "' where rn_id = '" + requestNetsuiteID + "'";
                        this.DataFromNetsuiteLog.Debug("SOFulfillmentSyncedUpdate: " + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                        scope1.Complete();
                    }
                }
                else if (rowCount == 0)
                {
                    var updateRequestNetsuite = "update requestnetsuite set rn_jobID='NO-DATA',rn_status='NO-DATA'," +
                        "rn_updatedDate = '" + convertDateToString(DateTime.Now) + "' where rn_id = '" + requestNetsuiteID + "'";
                    this.DataFromNetsuiteLog.Debug("SOFulfillmentSyncedUpdate: " + updateRequestNetsuite);
                    entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                    scope1.Complete();
                }
            }
            return status;
        }
        //To extract all the forwarder address - WY-05.NOV.2014
        private Boolean ForwarderAddress(sdeEntities entities, RequestNetsuiteEntity r)
        {
            //TBA
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            DataCenterAwareNetSuiteService netsuiteService = new DataCenterAwareNetSuiteService(account);

            this.DataFromNetsuiteLog.Info("ForwarderAddress *********");
            Boolean status = false;
            //Boolean loginStatus = login(@Resource.NETSUITE_LOGIN_EMAIL); 

            //TBA
            netsuiteService.Timeout = 820000000;
            netsuiteService.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();
            //  appinfo.applicationId = appID;
            netsuiteService.applicationInfo = appinfo;

            string loginEmail = "";
            loginEmail = @Resource.NETSUITE_LOGIN_EMAIL;
            tokenId = @Resource.ASIA_WEBSERVICE_TOKEN_ID;
            tokenSecret = @Resource.ASIA_WEBSERVICE_TOKEN_SECRET;

            ItemSearchBasic basic = new ItemSearchBasic()
            {
                internalId = new SearchMultiSelectField()
                {
                    @operator = SearchMultiSelectFieldOperator.anyOf,
                    operatorSpecified = true,
                    searchValue = new RecordRef[] {
                    new RecordRef() {
                    internalId = "14943"
                         }
                    }
                }
            };

            Boolean loginStatus = false;
            try
            {
                Console.WriteLine("Success");
                netsuiteService.tokenPassport = createTokenPassport();
                SearchResult status1 = netsuiteService.search(basic);
                if (status1.status.isSuccess == true)
                {
                    loginStatus = true;
                }
                else
                {
                    loginStatus = false;
                }
            }
            catch (Exception ex)
            {
                loginStatus = false;
                this.DataFromNetsuiteLog.Fatal("SOFulfillmentUpdate: Login Netsuite failed. Exception : " + ex.ToString());

            }
            //
            Record[] forwAddRecord = null;

            if (loginStatus == true)
            {
                this.DataFromNetsuiteLog.Debug("ForwarderAddress: Login Netsuite success.");
                this.DataFromNetsuiteLog.Info("ForwarderAddress: Retrieving Forwarder Address List from Netsuite.");
                //TBA
                netsuiteService.tokenPassport = createTokenPassport();
                AsyncResult forwAddResponse = netsuiteService.getAsyncResult(r.rn_jobID, 1);
                AsyncSearchResult forwAddSearchResult = (AsyncSearchResult)forwAddResponse;
                forwAddRecord = forwAddSearchResult.searchResult.recordList;
                Boolean logoutStatus = logout();
                if (logoutStatus == true)
                {
                    this.DataFromNetsuiteLog.Debug("ForwarderAddress: Logout Netsuite success.");
                }
                else
                {
                    this.DataFromNetsuiteLog.Debug("ForwarderAddress: Logout Netsuite failed.");
                }
            }
            else
            {
                this.DataFromNetsuiteLog.Fatal("ForwarderAddress: Login Netsuite failed.");
            }

            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(2400)
            };

            using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
            {
                if (forwAddRecord != null && forwAddRecord.Count() > 0)
                {
                    try
                    {
                        this.DataFromNetsuiteLog.Info("ForwarderAddress: " + forwAddRecord.Count() + " records is retrieved.");
                        for (int i = 0; i < forwAddRecord.Length; i++)
                        {
                            CustomRecord forwAdd = (CustomRecord)forwAddRecord[i];
                            String forwAddInternalId = forwAdd.internalId;
                            String forwName = string.Empty;
                            String forwLabel = string.Empty;
                            String forwAttention = string.Empty;
                            String forwAddressee = string.Empty;
                            String forwPhone = string.Empty;
                            String forwAdd1 = string.Empty;
                            String forwAdd2 = string.Empty;
                            String forwAdd3 = string.Empty;
                            String forwCity = string.Empty;
                            String forwState = string.Empty;
                            String forwPostCode = string.Empty;
                            String forwCountry = string.Empty;
                            String forwAddress = string.Empty;
                            String forwIsDefault = string.Empty;
                            String forwCustomerName = string.Empty;
                            String forwCustomerInternalID = string.Empty;

                            var deleteForwAdd = "delete from forwarderadd where InternalID = '" + forwAddInternalId + "' ";
                            this.DataFromNetsuiteLog.Debug("ForwarderAddress: " + deleteForwAdd);
                            entities.Database.ExecuteSqlCommand(deleteForwAdd);

                            forwName = forwAdd.name.ToString();

                            foreach (CustomFieldRef cusRef in forwAdd.customFieldList)
                            {
                                if (cusRef.scriptId == @Resource.CUSTOMREC_FORWNAME_SCRIPTID)
                                {
                                    SelectCustomFieldRef selectRef = (SelectCustomFieldRef)cusRef;
                                    forwCustomerName = selectRef.value.name;
                                    forwCustomerInternalID = selectRef.value.internalId;
                                }
                                else
                                    if (cusRef.scriptId == @Resource.CUSTOMREC_FORWLABEL_SCRIPTID)
                                    {
                                        StringCustomFieldRef stringRef = (StringCustomFieldRef)cusRef;
                                        forwLabel = stringRef.value;
                                    }
                                    else
                                        if (cusRef.scriptId == @Resource.CUSTOMREC_FORWATTENTION_SCRIPTID)
                                        {
                                            StringCustomFieldRef stringRef = (StringCustomFieldRef)cusRef;
                                            forwAttention = stringRef.value;
                                        }
                                        else
                                            if (cusRef.scriptId == @Resource.CUSTOMREC_FORWADDRESSEE_SCRIPTID)
                                            {
                                                StringCustomFieldRef stringRef = (StringCustomFieldRef)cusRef;
                                                forwAddressee = stringRef.value;
                                            }
                                            else
                                                if (cusRef.scriptId == @Resource.CUSTOMREC_FORWPHONE_SCRIPTID)
                                                {
                                                    StringCustomFieldRef stringRef = (StringCustomFieldRef)cusRef;
                                                    forwPhone = stringRef.value;
                                                }
                                                else
                                                    if (cusRef.scriptId == @Resource.CUSTOMREC_FORWADD1_SCRIPTID)
                                                    {
                                                        StringCustomFieldRef stringRef = (StringCustomFieldRef)cusRef;
                                                        forwAdd1 = stringRef.value;
                                                    }
                                                    else
                                                        if (cusRef.scriptId == @Resource.CUSTOMREC_FORWADD2_SCRIPTID)
                                                        {
                                                            StringCustomFieldRef stringRef = (StringCustomFieldRef)cusRef;
                                                            forwAdd2 = stringRef.value;
                                                        }
                                                        else
                                                            if (cusRef.scriptId == @Resource.CUSTOMREC_FORWADD3_SCRIPTID)
                                                            {
                                                                StringCustomFieldRef stringRef = (StringCustomFieldRef)cusRef;
                                                                forwAdd3 = stringRef.value;
                                                            }
                                                            else
                                                                if (cusRef.scriptId == @Resource.CUSTOMREC_FORWCITY_SCRIPTID)
                                                                {
                                                                    StringCustomFieldRef stringRef = (StringCustomFieldRef)cusRef;
                                                                    forwCity = stringRef.value;
                                                                }
                                                                else
                                                                    if (cusRef.scriptId == @Resource.CUSTOMREC_FORWSTATE_SCRIPTID)
                                                                    {
                                                                        StringCustomFieldRef stringRef = (StringCustomFieldRef)cusRef;
                                                                        forwState = stringRef.value;
                                                                    }
                                                                    else
                                                                        if (cusRef.scriptId == @Resource.CUSTOMREC_FORWPOSTCODE_SCRIPTID)
                                                                        {
                                                                            LongCustomFieldRef stringRef = (LongCustomFieldRef)cusRef;
                                                                            forwPostCode = Convert.ToString(stringRef.value);
                                                                        }
                                                                        else
                                                                            if (cusRef.scriptId == @Resource.CUSTOMREC_FORWCOUNTRY_SCRIPTID)
                                                                            {
                                                                                SelectCustomFieldRef selectRef = (SelectCustomFieldRef)cusRef;
                                                                                forwCountry = selectRef.value.name;
                                                                            }
                                                                            else
                                                                                if (cusRef.scriptId == @Resource.CUSTOMREC_FORWADDRESS_SCRIPTID)
                                                                                {
                                                                                    StringCustomFieldRef stringRef = (StringCustomFieldRef)cusRef;
                                                                                    forwAddress = stringRef.value;
                                                                                }
                                                                                else
                                                                                    if (cusRef.scriptId == @Resource.CUSTOMREC_FORWISDEFAULT_SCRIPTID)
                                                                                    {
                                                                                        BooleanCustomFieldRef booleanRef = (BooleanCustomFieldRef)cusRef;
                                                                                        Boolean isDefaultVal = booleanRef.value;
                                                                                        if (isDefaultVal == true)
                                                                                        {
                                                                                            forwIsDefault = "Yes";
                                                                                        }
                                                                                        else
                                                                                        {

                                                                                            forwIsDefault = "No";
                                                                                        }
                                                                                    }
                            }

                            var insertForwAdd = "insert into forwarderadd (InternalID,Name,Label,Attention,Addressee,Phone,Address1,Address2,Address3,City,State,Postcode,Country,Address,isDefault,CustomerName,CustomerInternalID) " +
                                                " VALUES ('" + forwAddInternalId + "','" + checkIsNull(forwName).Replace("'", "''") + "','" + checkIsNull(forwLabel).Replace("'", "''") + "','" + checkIsNull(forwAttention).Replace("'", "''") + "','" + checkIsNull(forwAddressee).Replace("'", "''") + "','" + checkIsNull(forwPhone) + "','" + checkIsNull(forwAdd1).Replace("'", "''") + "', " +
                                                "'" + checkIsNull(forwAdd2).Replace("'", "''") + "','" + checkIsNull(forwAdd3).Replace("'", "''") + "','" + checkIsNull(forwCity).Replace("'", "''") + "','" + checkIsNull(forwState).Replace("'", "''") + "','" + checkIsNull(forwPostCode) + "','" + checkIsNull(forwCountry) + "', " +
                                                "'" + checkIsNull(forwAddress).Replace("'", "''") + "','" + forwIsDefault + "','" + checkIsNull(forwCustomerName).Replace("'", "''") + "','" + checkIsNull(forwCustomerInternalID).Replace("'", "''") + "')";
                            this.DataFromNetsuiteLog.Debug("ForwarderAddress: " + insertForwAdd);
                            entities.Database.ExecuteSqlCommand(insertForwAdd);
                        }

                        var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                            "where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("ForwarderAddress: " + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                        scope1.Complete();
                        status = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataFromNetsuiteLog.Error("ForwarderAddress Exception: " + ex.ToString());
                    }
                }
                else
                {
                    var updateRequestNetsuite = "update requestnetsuite set rn_status='NO-DATA', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                        "where rn_jobID = '" + r.rn_jobID + "'";
                    this.DataFromNetsuiteLog.Debug("ForwarderAddress: " + updateRequestNetsuite);
                    entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                    scope1.Complete();
                }
            }
            return status;
        }
        //Not using
        private Boolean Invoices(sdeEntities entities, RequestNetsuiteEntity r)
        {
            this.DataFromNetsuiteLog.Info("Invoices *****************");
            Boolean status = false;

            Boolean loginStatus = login(@Resource.NETSUITE_LOGIN_EMAIL);
            Record[] pffRecord = null;
            if (loginStatus == true)
            {
                this.DataFromNetsuiteLog.Info("Retrieving pending billing from Netsuite.");
                AsyncResult pffResponse = service.getAsyncResult(r.rn_jobID, 1);
                AsyncSearchResult invoiceSearchResult = (AsyncSearchResult)pffResponse;
                pffRecord = invoiceSearchResult.searchResult.recordList;
                logout();
            }
            else
            {
                this.DataFromNetsuiteLog.Fatal("Login Netsuite failed.");
            }

            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(2400)
            };

            //using (TransactionScope scope1 = new TransactionScope()) 
            using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
            {
                this.DataFromNetsuiteLog.Info(pffRecord.Count() + " records is retrieved.");
                for (int g = 0; g < pffRecord.Length; g++)
                {
                    SalesOrder so = (SalesOrder)pffRecord[g];

                    Guid invID = Guid.NewGuid();
                    if (so.location != null)
                    {
                        var insertInvoice = "insert into netsuite_invoice (nsinv_recID,nsinv_moNo,nsinv_moNo_internalID,nsinv_entity,nsinv_entity_internalID,nsinv_location,nsinv_location_internalID,nsinv_createdDate,nsinv_rangeTo) values ('" + invID + "'," +
                            "'" + so.tranId + "','" + so.internalId + "','" + so.entity.name + "','" + so.entity.internalId + "','" + so.location.name + "','" + so.location.internalId + "','" + convertDateToString(DateTime.Now) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                        this.DataFromNetsuiteLog.Debug(insertInvoice);
                        entities.Database.ExecuteSqlCommand(insertInvoice);
                    }
                }

                var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                    "where rn_jobID = '" + r.rn_jobID + "'";
                this.DataFromNetsuiteLog.Debug(updateRequestNetsuite);
                entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                scope1.Complete();
                status = true;
            }
            return status;
        }
        //Extract BOOK CLUB and TRADE purchase request from NetSuite which ready to sync to IMAS to do receiving
        private Boolean PurchaseRequests(sdeEntities entities, RequestNetsuiteEntity r)
        {
            this.DataFromNetsuiteLog.Info("PurchaseRequests *******");
            //TBA
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            DataCenterAwareNetSuiteService netsuiteService = new DataCenterAwareNetSuiteService(account);

            //List<String> updatePOList = new List<String>();

            Boolean status = false;
            //Boolean loginStastus = login(@Resource.NETSUITE_LOGIN_EMAIL);
            Record[] prRecord = null;

            //TBA
            ItemSearchBasic basic = new ItemSearchBasic()
            {
                internalId = new SearchMultiSelectField()
                {
                    @operator = SearchMultiSelectFieldOperator.anyOf,
                    operatorSpecified = true,
                    searchValue = new RecordRef[] {
                    new RecordRef() {
                    internalId = "14943"
                         }
                    }
                }
            };


            netsuiteService.Timeout = 820000000;
            netsuiteService.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();

            //  appinfo.applicationId = appID;
            netsuiteService.applicationInfo = appinfo;
            string loginEmail = "";
            loginEmail = @Resource.NETSUITE_LOGIN_EMAIL;
            tokenId = @Resource.ASIA_WEBSERVICE_TOKEN_ID;
            tokenSecret = @Resource.ASIA_WEBSERVICE_TOKEN_SECRET;


            Boolean loginStatus = false;
            try
            {
                Console.WriteLine("Success");
                netsuiteService.tokenPassport = createTokenPassport();
                SearchResult status1 = netsuiteService.search(basic);
                if (status1.status.isSuccess == true)
                {
                    loginStatus = true;
                }
                else
                {
                    loginStatus = false;
                }
            }
            catch (Exception ex)
            {
                loginStatus = false;
                this.DataFromNetsuiteLog.Fatal("SOFulfillmentUpdate: Login Netsuite failed. Exception : " + ex.ToString());

            }
            //

            if (loginStatus == true)
            {
                this.DataFromNetsuiteLog.Debug("PurchaseRequests: Login Netsuite success.");
                this.DataFromNetsuiteLog.Info("PurchaseRequests: Retrieving purchase request from Netsuite.");
                //TBA
                netsuiteService.tokenPassport = createTokenPassport();
                AsyncResult prResponse = netsuiteService.getAsyncResult(r.rn_jobID, 1);
                AsyncSearchResult prSearchResult = (AsyncSearchResult)prResponse;
                prRecord = prSearchResult.searchResult.recordList;
                //TBA
                //Boolean logoutStatus = logout();
                //if (logoutStatus == true)
                //{
                //    this.DataFromNetsuiteLog.Debug("PurchaseRequests: Logout Netsuite success.");
                //}
                //else
                //{
                //    this.DataFromNetsuiteLog.Debug("PurchaseRequests: Logout Netsuite failed.");
                //}
            }
            else
            {
                this.DataFromNetsuiteLog.Fatal("PurchaseRequests: Login Netsuite failed.");
            }

            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(2400)
            };

            //using (TransactionScope scope1 = new TransactionScope()) 
            using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
            {
                if (prRecord != null && prRecord.Count() > 0)
                {
                    try
                    {
                        this.DataFromNetsuiteLog.Info("PurchaseRequests: " + prRecord.Count() + " records is retrieved.");
                        String createdDate = convertDateToString(DateTime.Now);

                        List<DuplicateItemInPO> duplicateList = new List<DuplicateItemInPO>();

                        for (int i = 0; i < prRecord.Length; i++)
                        {
                            PurchaseOrder pr = (PurchaseOrder)prRecord[i];
                            PurchaseOrderItemList poil = new PurchaseOrderItemList();
                            poil = pr.itemList;

                            if (poil != null)
                            {
                                if (poil.item.Count() > 0)
                                {
                                    Guid prID = Guid.NewGuid();
                                    String prBusinessChannelID = "";
                                    String prBusinessChannelInternalID = checkRecordRefIsNull_internalID(pr.@class);
                                    String prApprovalType = "L";
                                    String prDeliveryMethod = checkRecordRefIsNull(pr.shipMethod);
                                    String prDesc = pr.tranId;
                                    String prDate = convertDateToString(pr.tranDate);
                                    String prDay = pr.tranDate.ToString("dd");
                                    String prMonth = pr.tranDate.ToString("MM");
                                    String prYear = pr.tranDate.ToString("yyyy");
                                    String prNeededDate = convertDateToString(pr.tranDate);
                                    String prNumber = pr.tranId;
                                    String prRequestor = "NETSUITE";
                                    Boolean prStatus = pr.supervisorApproval;
                                    String prNetsuiteStatus = checkIsNull(pr.status);
                                    String prSupplier = checkRecordRefIsNull(pr.entity);
                                    String prSupplierInternalID = checkRecordRefIsNull_internalID(pr.entity);
                                    String prInternalID = pr.internalId;
                                    String prSite = "";
                                    String location = checkRecordRefIsNull(pr.location);
                                    String locationInternalID = checkRecordRefIsNull_internalID(pr.location);

                                    var subsidiary = (from s in entities.map_subsidiary
                                                      where s.ms_subsidiary_internalID == pr.subsidiary.internalId
                                                      select s).FirstOrDefault();

                                    if (prSite != null)
                                    {
                                        prSite = subsidiary.ms_countryName;
                                    }

                                    if (pr.@class != null)
                                    {
                                        var businessChannel = (from b in entities.map_businesschannel
                                                               where b.mb_businessChannel_internalID == pr.@class.internalId
                                                               select b).FirstOrDefault();

                                        if (businessChannel != null)
                                        {
                                            prBusinessChannelID = businessChannel.mb_imas_businessChannel_ID;
                                        }
                                    }

                                    //Check is exist then no need insert - WY-24.OCT.2014
                                    String strChkPR = "select count(*) from netsuite_pr where nspr_pr_desc = '" + prDesc + "' ";
                                    this.DataFromNetsuiteLog.Debug("PurchaseRequests: " + strChkPR);
                                    String _checkPR = "0";
                                    _checkPR = entities.Database.SqlQuery<string>(strChkPR).FirstOrDefault<string>();

                                    if (_checkPR == "0")
                                    {
                                        if (!String.IsNullOrEmpty(prNetsuiteStatus))
                                        {
                                            var insertPR = "insert into netsuite_pr (nspr_pr_ID,nspr_businessChannel_ID,nspr_businessChannel_internalID,nspr_pr_accountClass,nspr_pr_approvalType,nspr_pr_deliveryMethod,nspr_pr_desc,nspr_pr_date,nspr_pr_day," +
                                                "nspr_pr_month,nspr_pr_year,nspr_pr_neededDate,nspr_pr_number,nspr_pr_requestor,nspr_pr_status,nspr_ns_status,nspr_pr_supplier,nspr_pr_supplier_internalID,nspr_pr_internalID,nspr_pr_site,nspr_pr_location,nspr_pr_location_internalID,nspr_createdDate,nspr_rangeTo) " +
                                                "values ('" + prID + "','" + prBusinessChannelID + "','" + prBusinessChannelInternalID + "','','" + prApprovalType + "','" + prDeliveryMethod + "','" + prDesc + "','" + prDate + "','" + prDay + "'," +
                                                "'" + prMonth + "','" + prYear + "','" + prNeededDate + "','" + prNumber + "','" + prRequestor + "'," + prStatus + ",'" + prNetsuiteStatus.ToUpper() + "','" + prSupplier.Replace("'", "''") + "','" + prSupplierInternalID + "','" + prInternalID + "'," +
                                                "'" + prSite + "','" + location + "','" + locationInternalID + "','" + createdDate + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                            this.DataFromNetsuiteLog.Debug("PurchaseRequests: " + insertPR);
                                            entities.Database.ExecuteSqlCommand(insertPR);

                                            for (int j = 0; j < poil.item.Count(); j++)
                                            {
                                                Guid priID = Guid.NewGuid();
                                                String priItemID = SplitItemByISBN(poil.item[j].item.name);
                                                String priItemInternalID = poil.item[j].item.internalId;
                                                Decimal rate = 0;
                                                Boolean isNumeric = Decimal.TryParse(poil.item[j].rate, out rate);
                                                String priItemSalesTerritory = String.Empty;
                                                if (isNumeric == true)
                                                {
                                                    rate = Convert.ToDecimal(poil.item[j].rate);
                                                }

                                                String priPrID = prID.ToString();
                                                Boolean priApproved = true;
                                                String priApprovedBy = "NETSUITE";
                                                String priItemApproveDate = convertDateToString(pr.tranDate);
                                                //String priConverted = null;

                                                //Added #1028 -begin
                                                for (int discTol = 0; discTol < poil.item[j].customFieldList.Count(); discTol++)
                                                {
                                                    if (poil.item[j].customFieldList[discTol].internalId.ToString().Equals(@Resource.CUSTOMFIELD_TRANS_ISBN_INTERNALID))
                                                    {
                                                        SelectCustomFieldRef multiRef = (SelectCustomFieldRef)poil.item[j].customFieldList[discTol];
                                                        if (!String.IsNullOrEmpty(multiRef.value.name))
                                                        {
                                                            priItemID = multiRef.value.name;
                                                        }
                                                    }
                                                    // ANET-32 Intergartion to create PO to include territory rights
                                                    if (poil.item[j].customFieldList[discTol].internalId.ToString().Equals(@Resource.CUSTOMFIELD_SCHO_SALESTERRITORY_INTERNALID))
                                                    {
                                                        SelectCustomFieldRef multiRef = (SelectCustomFieldRef)poil.item[j].customFieldList[discTol];
                                                        if (!String.IsNullOrEmpty(multiRef.value.name))
                                                        {
                                                            priItemSalesTerritory = multiRef.value.internalId;
                                                        }
                                                    }
                                                    // ANET-32 Intergartion to create PO to include territory rights
                                                }
                                                //Added #1028 -end

                                                //Add Checking to get Item ISBN - WY-01.OCT.2014
                                                var qItemIsbn = (from mi in entities.map_item
                                                                 where mi.mi_item_internalID == priItemInternalID
                                                                 select mi.mi_item_isbn).FirstOrDefault();

                                                if (!String.IsNullOrEmpty(qItemIsbn))
                                                {
                                                    priItemID = qItemIsbn;
                                                }

                                                Int32 priQty = Convert.ToInt32(poil.item[j].quantity) - Convert.ToInt32(poil.item[j].quantityReceived);
                                                // ANET-32 Intergartion to create PO to include territory rights
                                                var insertPRItem = "insert into netsuite_pritem (nspi_pritem_ID,nspi_item_ID,nspi_itemBusiness_ID,nspi_nspr_pr_ID,nspi_pritem_approved,nspi_pritem_approvedBy,nspi_pritem_approvedDate," +
                                                "nspi_pritem_qty,nspi_pritem_price,nspi_item_internalID,nspi_createdDate,nspi_salesTerritorySCH) values ('" + priID + "','" + priItemID + "','" + prBusinessChannelID + "','" + prID + "'," + priApproved + ",'" + priApprovedBy + "'," +
                                                "'" + priItemApproveDate + "','" + priQty + "','" + rate + "','" + priItemInternalID + "','" + createdDate + "','" + priItemSalesTerritory + "')";
                                                // ANET-32 Intergartion to create PO to include territory rights
                                                this.DataFromNetsuiteLog.Debug("PurchaseRequests: " + insertPRItem);
                                                entities.Database.ExecuteSqlCommand(insertPRItem);
                                            }
                                            //NO NEED TO UPDATE AGAIN THE ITEMID - WY-18.SEPT.2014
                                            //var updatePRItem = "update netsuite_pritem set nspi_item_ID = (select mi_item_isbn from map_item where mi_item_internalID = nspi_item_internalID) where nspi_createdDate = '" + createdDate + "'";
                                            //this.DataFromNetsuiteLog.Debug("PurchaseRequests: " + updatePRItem);
                                            //entities.Database.ExecuteSqlCommand(updatePRItem);
                                        }
                                        Int32 rowCount = i + 1;
                                        String _refno = "NETSUITE.PO.SELECT." + r.rn_rangeFrom + "-" + r.rn_rangeTo;
                                        var insertTask = "insert into requestnetsuite_task (rnt_task, rnt_description, rnt_refNO, rnt_jobID, rnt_status, rnt_createdDate, " +
                                        "rnt_seqNO, rnt_createdFromInternalID, rnt_nsInternalId, rnt_updatedDate) values ('SELECT', '" + r.rn_sche_transactionType + "', '" + _refno + "', '" + r.rn_jobID + "'," +
                                        "'TRUE', '" + convertDateToString(DateTime.Now) + "', '" + rowCount + "','', '" + prInternalID + "', '" + convertDateToString(DateTime.Now) + "')";
                                        this.DataFromNetsuiteLog.Debug("PurchaseRequests: " + insertTask);
                                        entities.Database.ExecuteSqlCommand(insertTask);
                                    }
                                }
                            }
                            else
                            {
                                this.DataFromNetsuiteLog.Debug("PurchaseRequests: " + pr.tranId + " has 0 item.");
                            }
                        }

                        var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                            "where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("PurchaseRequests: " + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                        //trade.POStatusUpdate(updatePOList);
                        scope1.Complete();
                        status = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataFromNetsuiteLog.Error("PurchaseRequests Exception: " + ex.ToString());
                    }
                }
                else
                {
                    var updateRequestNetsuite = "update requestnetsuite set rn_status='NO-DATA', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                        "where rn_jobID = '" + r.rn_jobID + "'";
                    this.DataFromNetsuiteLog.Debug("PurchaseRequests: " + updateRequestNetsuite);
                    entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                    scope1.Complete();
                }
                //scope1.Complete();
            }
            CheckPODuplicateItem(entities);

            return status;
        }
        private void CheckPODuplicateItem(sdeEntities entities)
        {

            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(2400)
            };

            //using (TransactionScope scope1 = new TransactionScope()) 
            using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
            {
                try
                {
                    string connStr = ConfigurationManager.ConnectionStrings["mysql2"].ConnectionString;
                    MySqlConnection mysqlCon = new MySqlConnection(connStr);
                    mysqlCon.Open();

                    var query1 = "SELECT p.nspr_pr_ID, p.nspr_pr_desc, p.nspr_pr_internalID, pri.nspi_item_ID, p.nspr_pr_site " +
                        "FROM netsuite_pr p join netsuite_pritem pri on p.nspr_pr_ID = pri.nspi_nspr_pr_ID " +
                        "group by nspi_nspr_pr_ID, nspi_item_ID " +
                        "having count(nspi_item_ID) > 1";
                    MySqlCommand cmd4 = new MySqlCommand(query1, mysqlCon);
                    MySqlDataReader dtr4 = cmd4.ExecuteReader();

                    List<DuplicateItemInPO> duplicateList = new List<DuplicateItemInPO>();
                    while (dtr4.Read())
                    {
                        DuplicateItemInPO duplicate = new DuplicateItemInPO();
                        duplicate.prID = (dtr4.GetValue(0) == DBNull.Value) ? String.Empty : dtr4.GetString(0);
                        duplicate.prNo = (dtr4.GetValue(1) == DBNull.Value) ? String.Empty : dtr4.GetString(1);
                        duplicate.prInternalID = (dtr4.GetValue(2) == DBNull.Value) ? String.Empty : dtr4.GetString(2);
                        duplicate.item = (dtr4.GetValue(3) == DBNull.Value) ? String.Empty : dtr4.GetString(3);
                        duplicate.subsidiary = (dtr4.GetValue(4) == DBNull.Value) ? String.Empty : dtr4.GetString(4);
                        duplicateList.Add(duplicate);
                    }
                    cmd4.Dispose();
                    dtr4.Close();
                    mysqlCon.Close();

                    for (int i = 0; i < duplicateList.Count(); i++)
                    {
                        var query5 = "delete from netsuite_pritem where nspi_nspr_pr_ID ='" + duplicateList[i].prID + "'";
                        this.DataFromNetsuiteLog.Debug(query5);
                        entities.Database.ExecuteSqlCommand(query5);

                        var query6 = "delete from netsuite_pr where nspr_pr_ID ='" + duplicateList[i].prID + "'";
                        this.DataFromNetsuiteLog.Debug(query6);
                        entities.Database.ExecuteSqlCommand(query6);
                        this.DataFromNetsuiteLog.Fatal("This " + duplicateList[i].item + " is duplicate in " + duplicateList[i].subsidiary + " Purchase Order:" + duplicateList[i].prNo + " " + duplicateList[i].prInternalID);
                    }
                    scope1.Complete();
                }
                catch (Exception ex)
                {
                    this.DataFromNetsuiteLog.Error("CheckPODuplicateItem Exception: " + ex.ToString());
                }
            }
        }
        //Extract item from NetSuite
        private Boolean ConfItem(sdeEntities entities, RequestNetsuiteEntity r)
        {
            //TBA
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            DataCenterAwareNetSuiteService netsuiteService = new DataCenterAwareNetSuiteService(account);

            this.DataFromNetsuiteLog.Info("ConfItem *********");
            Boolean status = false;
            //Boolean loginStastus = login(@Resource.NETSUITE_LOGIN_EMAIL);
            Record[] itemRecord = null;
            //TBA
            ItemSearchBasic basic = new ItemSearchBasic()
            {
                internalId = new SearchMultiSelectField()
                {
                    @operator = SearchMultiSelectFieldOperator.anyOf,
                    operatorSpecified = true,
                    searchValue = new RecordRef[] {
                    new RecordRef() {
                    internalId = "14943"
                         }
                    }
                }
            };


            netsuiteService.Timeout = 820000000;
            netsuiteService.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();

            //  appinfo.applicationId = appID;
            netsuiteService.applicationInfo = appinfo;
            string loginEmail = "";
            loginEmail = @Resource.NETSUITE_LOGIN_EMAIL;
            tokenId = @Resource.ASIA_WEBSERVICE_TOKEN_ID;
            tokenSecret = @Resource.ASIA_WEBSERVICE_TOKEN_SECRET;


            Boolean loginStatus = false;
            try
            {
                Console.WriteLine("Success");
                netsuiteService.tokenPassport = createTokenPassport();
                SearchResult status1 = netsuiteService.search(basic);
                if (status1.status.isSuccess == true)
                {
                    loginStatus = true;
                }
                else
                {
                    loginStatus = false;
                }
            }
            catch (Exception ex)
            {
                loginStatus = false;
                this.DataFromNetsuiteLog.Fatal("SOFulfillmentUpdate: Login Netsuite failed. Exception : " + ex.ToString());

            }
            //

            if (loginStatus == true)
            {
                this.DataFromNetsuiteLog.Debug("ConfItem: Login Netsuite success.");
                this.DataFromNetsuiteLog.Info("ConfItem: Retrieving new item from Netsuite.");

                var updateRequestNetsuitePulling = "update requestnetsuite set rn_status='PULLING' " +
                          "where rn_jobID = '" + r.rn_jobID + "'";
                this.DataFromNetsuiteLog.Debug("ConfItem: " + updateRequestNetsuitePulling);
                entities.Database.ExecuteSqlCommand(updateRequestNetsuitePulling);

                //TBA
                netsuiteService.tokenPassport = createTokenPassport();
                AsyncResult itemResponse = netsuiteService.getAsyncResult(r.rn_jobID, 1);
                AsyncSearchResult itemSearchResult = (AsyncSearchResult)itemResponse;
                itemRecord = itemSearchResult.searchResult.recordList;
                while (itemSearchResult.searchResult.totalRecords > (itemSearchResult.searchResult.pageSize * itemSearchResult.searchResult.pageIndex))
                {
                    //TBA
                    netsuiteService.tokenPassport = createTokenPassport();
                    itemResponse = netsuiteService.getAsyncResult(r.rn_jobID, itemSearchResult.searchResult.pageIndex + 1);
                    itemSearchResult = (AsyncSearchResult)itemResponse;
                    itemRecord = itemRecord.Concat(itemSearchResult.searchResult.recordList).ToArray();

                }
                //TBA
                //Boolean logoutStatus = logout();
                //if (logoutStatus == true)
                //{
                //    this.DataFromNetsuiteLog.Debug("ConfItem: Logout Netsuite success.");
                //}
                //else
                //{
                //    this.DataFromNetsuiteLog.Debug("ConfItem: Logout Netsuite failed.");
                //}
            }
            else
            {
                this.DataFromNetsuiteLog.Fatal("ConfItem: Login Netsuite failed.");
            }

            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(2400)
            };

            //using (TransactionScope scope1 = new TransactionScope()) 
            using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
            {
                if (itemRecord != null && itemRecord.Count() > 0)
                {
                    try
                    {
                        this.DataFromNetsuiteLog.Info("ConfItem: " + itemRecord.Count() + " records is retrieved.");
                        for (int i = 0; i < itemRecord.Length; i++)
                        {
                            if (itemRecord[i].ToString().Contains("InventoryItem"))
                            {
                                InventoryItem ii = (InventoryItem)itemRecord[i];
                                Guid itemID = Guid.NewGuid();

                                string userName = @Resource.NETSUITE_LOGIN_EMAIL;

                                //MultiSelectCustomFieldRef reff = (MultiSelectCustomFieldRef)ii.customFieldList[0];
                                string accountRoyalty = "";
                                string uom = "";
                                string isbn10 = "";
                                string bussinessChannelName = string.Empty;
                                string bussinessChannelInternalID = string.Empty;
                                string productFamily = string.Empty;

                                string isbnNew = string.Empty;      //#1028
                                isbnNew = ii.itemId;                //#1028 
                                string itemRunningNo = string.Empty;//#1028
                                itemRunningNo = ii.itemId;          //#1028

                                Int32 countLOB = 0;
                                Int32 tolLOB = 0;
                                Boolean isValid = true;
                                Double itemWeight = 0;
                                string taxSchedule = string.Empty;
                                string taxCode = string.Empty;
                                if (ii.taxSchedule != null)
                                {
                                    taxSchedule = ii.taxSchedule.name;
                                    if ((taxSchedule == @Resource.TAXABLE_TAXSCHEDULE) || (taxSchedule == @Resource.TAXABLE_TAXSCHEDULE4))//SCH3 || SCH4
                                    {
                                        taxCode = @Resource.TAXABLE_TAXCODE; //SR-0%
                                    }
                                    else if ((taxSchedule == @Resource.NON_TAXABLE_TAXSCHEDULE) || (taxSchedule == @Resource.NON_TAXABLE_TAXSCHEDULE5))//SCH2 || SCH5
                                    {
                                        taxCode = @Resource.NON_TAXABLE_TAXCODE;//ZRL
                                    }
                                }


                                foreach (CustomFieldRef cusRef in ii.customFieldList)
                                {
                                    if (cusRef.internalId == "1568")
                                    {
                                        SelectCustomFieldRef multiRef = (SelectCustomFieldRef)cusRef;
                                        accountRoyalty = multiRef.internalId;
                                    }
                                    else if (cusRef.internalId == "564")//scriptId = custitem_invtyitem_isbn10
                                    {
                                        StringCustomFieldRef stringRef = (StringCustomFieldRef)cusRef;
                                        isbn10 = stringRef.value;
                                    }
                                    else if (cusRef.internalId == "1572")
                                    {
                                        SelectCustomFieldRef multiRef = (SelectCustomFieldRef)cusRef;
                                        uom = multiRef.internalId;
                                    }
                                    //Get Line of Bussiness Rights - WY-08.OCT.2014
                                    else if (cusRef.internalId == "1562")
                                    {
                                        MultiSelectCustomFieldRef multiRef = (MultiSelectCustomFieldRef)cusRef;
                                        tolLOB = multiRef.value.Count();
                                        foreach (var a in multiRef.value)
                                        {
                                            countLOB++;
                                            bussinessChannelName = bussinessChannelName + a.name;
                                            bussinessChannelInternalID = bussinessChannelInternalID + a.internalId;
                                            if (tolLOB != countLOB)
                                            {
                                                bussinessChannelName = bussinessChannelName + ";";
                                                bussinessChannelInternalID = bussinessChannelInternalID + ";";
                                            }
                                        }
                                        //if (tolLOB == 1 && bussinessChannelInternalID == @Resource.LOB_EDUCATIONGENERAL_INTERNALID)
                                        //{
                                        //    isValid = false; //LOB is Education - General no need to insert
                                        //}
                                    }
                                    //Added item weight in KG - WY-17.OCT.2014
                                    else if (cusRef.internalId == "2243")//scriptId = custitem_weight_kg
                                    {
                                        DoubleCustomFieldRef doubleRef = (DoubleCustomFieldRef)cusRef;
                                        itemWeight = doubleRef.value;
                                        if (itemWeight == 0 || itemWeight == null)
                                        {
                                            itemWeight = 0.01; //Default to 0.01KG
                                        }
                                    }
                                    //Added Product Family- WY-24.OCT.2014
                                    else if (cusRef.internalId == "568")//scriptId = custitem_item_productseries
                                    {
                                        SelectCustomFieldRef multiRef = (SelectCustomFieldRef)cusRef;
                                        productFamily = multiRef.value.name;
                                    }
                                    //Added #1028
                                    else if (cusRef.internalId == @Resource.CUSTOMFIELD_INVENTORY_ISBN_INTERNALID) //scriptId = custitem_isbn
                                    {
                                        SelectCustomFieldRef multiRef = (SelectCustomFieldRef)cusRef;
                                        if (!string.IsNullOrEmpty(multiRef.value.name))
                                        {
                                            isbnNew = multiRef.value.name;
                                        }
                                    }
                                    else if (cusRef.internalId == @Resource.CUSTOMFIELD_INVENTORY_LEGACY_CODE_INTERNALID) //scriptId = custitem_legacy_code
                                    {
                                        SelectCustomFieldRef multiRef = (SelectCustomFieldRef)cusRef;
                                        if (!string.IsNullOrEmpty(multiRef.value.name))
                                        {
                                            isbnNew = multiRef.value.name;
                                        }
                                    }
                                }

                                //String strChkItem = "select count(*) from map_item where mi_item_isbn = '" + ii.itemId + "' or mi_item_internalID = '" + ii.internalId + "'";
                                String strChkItem = "select count(*) from map_item where mi_item_internalID = '" + ii.internalId + "' ";
                                this.DataFromNetsuiteLog.Debug("ConfItem: " + strChkItem);

                                String _checkItem = "0";
                                _checkItem = entities.Database.SqlQuery<string>(strChkItem).FirstOrDefault<string>();
                                //this.DataFromNetsuiteLog.Info("ConfItem: Total Record: " + _checkItem);

                                if (_checkItem == "0")
                                {
                                    if (isValid == true)
                                    {
                                        //var insertItem = String.Format("insert into map_item (mi_item_ID,mi_item_description,mi_item_title,mi_item_uom,mi_item_isbn,mi_isbn_secondary,mi_lastModifiedDate,mi_createdDate," +
                                        //        "mi_item_reorder_level,mi_reorder_qty,mi_reorder_date,mi_createdBy,mi_item_weight,mi_accountClassID,mi_item_internalID,mi_rangeTo,mi_businesschannel_name,mi_businesschannel_InternalID,mi_prodfamily) " +
                                        //        " values('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}','{17}','{18}')"
                                        //        , itemID, checkIsNull(ii.displayName).Replace("'", "''"), "", uom, ii.itemId, isbn10, convertDateToString(DateTime.Now), convertDateToString(ii.createdDate), 0, 0, convertDateToString(DateTime.Now), userName
                                        //        , itemWeight, accountRoyalty, ii.internalId, convertDateToString(Convert.ToDateTime(r.rn_rangeTo)), checkIsNull(bussinessChannelName).Replace("'", "''")
                                        //        , checkIsNull(bussinessChannelInternalID).Replace("'", "''"), checkIsNull(productFamily).Replace("'", "''"));

                                        //check duplicate isbn
                                        String strChkItemISBN = "select count(*) from map_item where mi_item_isbn = '" + isbnNew + "' ";
                                        this.DataFromNetsuiteLog.Debug("ConfItemISBN: " + strChkItemISBN);

                                        int _checkItemISBN = 0;
                                        _checkItemISBN = entities.Database.SqlQuery<int>(strChkItemISBN).FirstOrDefault<int>();
                                        if (_checkItemISBN > 0)
                                        {
                                            this.DataFromNetsuiteLog.Fatal("ConfItem Exception: " + isbnNew + " is duplicate in SDE");
                                        }

                                        var insertItem = String.Format("insert into map_item (mi_item_ID,mi_item_description,mi_item_title,mi_item_uom,mi_item_isbn,mi_isbn_secondary,mi_lastModifiedDate,mi_createdDate," +
                                                "mi_item_reorder_level,mi_reorder_qty,mi_reorder_date,mi_createdBy,mi_item_weight,mi_accountClassID,mi_item_internalID,mi_rangeTo,mi_businesschannel_name,mi_businesschannel_InternalID,mi_prodfamily, " +
                                                " mi_tax_schedule,mi_tax_code,mi_ns_itemID) " +
                                                " values('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}','{17}','{18}','{19}','{20}','{21}')"
                                                , itemID, checkIsNull(ii.displayName).Replace("'", "''"), "", uom, isbnNew, isbn10, convertDateToString(DateTime.Now), convertDateToString(ii.createdDate), 0, 0, convertDateToString(DateTime.Now), userName
                                                , itemWeight, accountRoyalty, ii.internalId, convertDateToString(Convert.ToDateTime(r.rn_rangeTo)), checkIsNull(bussinessChannelName).Replace("'", "''")
                                                , checkIsNull(bussinessChannelInternalID).Replace("'", "''"), checkIsNull(productFamily).Replace("'", "''"), checkIsNull(taxSchedule).Replace("'", "''"), checkIsNull(taxCode).Replace("'", "''")
                                                , itemRunningNo);

                                        this.DataFromNetsuiteLog.Debug("ConfItem: " + insertItem);
                                        entities.Database.ExecuteSqlCommand(insertItem);
                                    }
                                }
                                else
                                {
                                    if (isValid == true)
                                    {
                                        //var updateItem = "update map_item set mi_item_description='" + checkIsNull(ii.displayName).Replace("'", "''") + "', mi_item_uom = '" + uom + "', " +
                                        //                 "mi_isbn_secondary = '" + isbn10 + "', mi_lastModifiedDate = '" + convertDateToString(DateTime.Now) + "', mi_item_weight = '" + itemWeight + "', " +
                                        //                 "mi_accountClassID = '" + accountRoyalty + "', mi_rangeTo = '" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "', " +
                                        //                 "mi_businesschannel_name = '" + checkIsNull(bussinessChannelName).Replace("'", "''") + "',mi_businesschannel_InternalID = '" + checkIsNull(bussinessChannelInternalID).Replace("'", "''") + "', " +
                                        //                 "mi_prodfamily = '" + checkIsNull(productFamily).Replace("'", "''") + "' " +
                                        //                 "where mi_item_isbn = '" + ii.itemId + "' or mi_item_internalID = '" + ii.internalId + "'";
                                        //check duplicate isbn
                                        String strChkItemISBN = "select count(*) from map_item where mi_item_isbn = '" + isbnNew + "' and mi_item_internalID != '" + ii.internalId + "' ";
                                        this.DataFromNetsuiteLog.Debug("ConfItemISBN: " + strChkItemISBN);

                                        int _checkItemISBN = 0;
                                        _checkItemISBN = entities.Database.SqlQuery<int>(strChkItemISBN).FirstOrDefault<int>();
                                        if (_checkItemISBN > 0)
                                        {
                                            this.DataFromNetsuiteLog.Fatal("ConfItem Exception: " + isbnNew + " is duplicate in SDE");
                                        }

                                        var updateItem = "update map_item set mi_item_description='" + checkIsNull(ii.displayName).Replace("'", "''") + "', mi_item_uom = '" + uom + "', " +
                                                         "mi_isbn_secondary = '" + isbn10 + "', mi_lastModifiedDate = '" + convertDateToString(DateTime.Now) + "', mi_item_weight = '" + itemWeight + "', " +
                                                         "mi_accountClassID = '" + accountRoyalty + "', mi_rangeTo = '" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "', " +
                                                         "mi_businesschannel_name = '" + checkIsNull(bussinessChannelName).Replace("'", "''") + "',mi_businesschannel_InternalID = '" + checkIsNull(bussinessChannelInternalID).Replace("'", "''") + "', " +
                                                         "mi_prodfamily = '" + checkIsNull(productFamily).Replace("'", "''") + "', mi_tax_schedule = '" + checkIsNull(taxSchedule).Replace("'", "''") + "', " +
                                                         "mi_tax_code = '" + checkIsNull(taxCode).Replace("'", "''") + "', mi_ns_itemID = '" + itemRunningNo + "' " + ", mi_item_isbn = '" + isbnNew + "' " + ", mi_pmd_id = NULL , mi_pmd_sync = 0 " +
                                                         "where mi_item_internalID = '" + ii.internalId + "' ";
                                        this.DataFromNetsuiteLog.Debug("ConfItem: " + updateItem);
                                        entities.Database.ExecuteSqlCommand(updateItem);
                                    }
                                }

                                #region To Add for item Pricing - WY-25.MAR.2015
                                if (isValid == true)
                                {
                                    if (ii.pricingMatrix != null)
                                    {
                                        String myCurrency = "Malaysian Ringgit";
                                        foreach (Pricing itemPrice in ii.pricingMatrix.pricing)
                                        {
                                            if (itemPrice.currency.name == myCurrency)
                                            {
                                                Double price = 0;
                                                String priceLevel = string.Empty;

                                                priceLevel = itemPrice.priceLevel.name;
                                                switch (priceLevel)
                                                {
                                                    case "RRP": //For Bcas Free Gift Item use 
                                                    case "Intercompany Selling Price": //For Bcas Sales Order Use
                                                        price = itemPrice.priceList[0].value;

                                                        String strChkItemPrice = "select count(*) from map_itemprice where (mip_item_internalID = '" + ii.internalId + "') and mip_item_pricelevel = '" + priceLevel + "' " +
                                                                                 " and mip_item_currency = '" + myCurrency + "' ";
                                                        String _checkItemPrice = "0";
                                                        _checkItemPrice = entities.Database.SqlQuery<string>(strChkItemPrice).FirstOrDefault<string>();

                                                        if (_checkItemPrice == "0")
                                                        {
                                                            var insertItemPrice = String.Format("insert into map_itemprice (mip_item_isbn,mip_item_internalID,mip_item_pricelevel,mip_item_price,mip_item_currency) " +
                                                                                                " values('{0}','{1}','{2}','{3}','{4}')"
                                                                                                , isbnNew, ii.internalId, checkIsNull(priceLevel).Replace("'", "''"), price, myCurrency);
                                                            this.DataFromNetsuiteLog.Debug("ConfItem: " + insertItemPrice);
                                                            entities.Database.ExecuteSqlCommand(insertItemPrice);
                                                        }
                                                        else
                                                        {
                                                            var updItemPrice = "update map_itemprice set mip_item_isbn = '" + isbnNew + "', mip_item_price = '" + price + "' where (mip_item_internalID = '" + ii.internalId + "') and mip_item_pricelevel = '" + priceLevel + "' " +
                                                                               " and mip_item_currency = '" + myCurrency + "' ";
                                                            this.DataFromNetsuiteLog.Debug("ConfItem: " + updItemPrice);
                                                            entities.Database.ExecuteSqlCommand(updItemPrice);

                                                        }
                                                        break;
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion
                            }
                        }

                        var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                            "where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("ConfItem: " + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                        scope1.Complete();
                        status = true;
                    }
                    catch (Exception ex)
                    {
                        var updateRequestNetsuite7 = "update requestnetsuite set rn_status = 'FINISHED' where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("PullNetsuite: " + updateRequestNetsuite7);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite7);
                        scope1.Complete();
                        this.DataFromNetsuiteLog.Error("ConfItem Exception: " + ex.ToString());
                    }
                }
                else
                {
                    var updateRequestNetsuite = "update requestnetsuite set rn_status='NO-DATA', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                        "where rn_jobID = '" + r.rn_jobID + "'";
                    this.DataFromNetsuiteLog.Debug("ConfItem: " + updateRequestNetsuite);
                    entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                    scope1.Complete();
                }
                ////scope1.Complete();
            }
            return status;
        }
        //Added to get daily created items - WY-17.OCT.2014
        private Boolean ConfNewItem(sdeEntities entities, RequestNetsuiteEntity r)
        {
            //TBA
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            DataCenterAwareNetSuiteService netsuiteService = new DataCenterAwareNetSuiteService(account);

            this.DataFromNetsuiteLog.Info("ConfNewItem *********");
            Boolean status = false;
            //Boolean loginStastus = login(@Resource.NETSUITE_LOGIN_EMAIL);
            Record[] itemRecord = null;
            //TBA
            ItemSearchBasic basic = new ItemSearchBasic()
            {
                internalId = new SearchMultiSelectField()
                {
                    @operator = SearchMultiSelectFieldOperator.anyOf,
                    operatorSpecified = true,
                    searchValue = new RecordRef[] {
                    new RecordRef() {
                    internalId = "14943"
                         }
                    }
                }
            };


            netsuiteService.Timeout = 820000000;
            netsuiteService.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();

            //  appinfo.applicationId = appID;
            netsuiteService.applicationInfo = appinfo;
            string loginEmail = "";
            loginEmail = @Resource.NETSUITE_LOGIN_EMAIL;
            tokenId = @Resource.ASIA_WEBSERVICE_TOKEN_ID;
            tokenSecret = @Resource.ASIA_WEBSERVICE_TOKEN_SECRET;


            Boolean loginStatus = false;
            try
            {
                Console.WriteLine("Success");
                netsuiteService.tokenPassport = createTokenPassport();
                SearchResult status1 = netsuiteService.search(basic);
                if (status1.status.isSuccess == true)
                {
                    this.DataFromNetsuiteLog.Debug("ConfNewItem: Login Netsuite success.");
                    loginStatus = true;
                }
                else
                {
                    loginStatus = false;
                    this.DataFromNetsuiteLog.Debug("SOFulfillmentUpdate: Login Netsuite success.");

                }
            }
            catch (Exception ex)
            {
                loginStatus = false;
                this.DataFromNetsuiteLog.Fatal("SOFulfillmentUpdate: Login Netsuite failed. Exception : " + ex.ToString());

            }
            //

            if (loginStatus == true)
            {
                this.DataFromNetsuiteLog.Debug("ConfNewItem: Login Netsuite success.");
                this.DataFromNetsuiteLog.Info("ConfNewItem: Retrieving new item from Netsuite.");

                var updateRequestNetsuitePulling = "update requestnetsuite set rn_status='PULLING' " +
                          "where rn_jobID = '" + r.rn_jobID + "'";
                this.DataFromNetsuiteLog.Debug("ConfNewItem: " + updateRequestNetsuitePulling);
                entities.Database.ExecuteSqlCommand(updateRequestNetsuitePulling);

                //TBA
                netsuiteService.tokenPassport = createTokenPassport();
                AsyncResult itemResponse = netsuiteService.getAsyncResult(r.rn_jobID, 1);
                AsyncSearchResult itemSearchResult = (AsyncSearchResult)itemResponse;
                itemRecord = itemSearchResult.searchResult.recordList;
                while (itemSearchResult.searchResult.totalRecords > (itemSearchResult.searchResult.pageSize * itemSearchResult.searchResult.pageIndex))
                {
                    //TBA
                    netsuiteService.tokenPassport = createTokenPassport();
                    itemResponse = netsuiteService.getAsyncResult(r.rn_jobID, itemSearchResult.searchResult.pageIndex + 1);
                    itemSearchResult = (AsyncSearchResult)itemResponse;
                    itemRecord = itemRecord.Concat(itemSearchResult.searchResult.recordList).ToArray();

                }
                //TBA
                //Boolean logoutStatus = logout();
                //if (logoutStatus == true)
                //{
                //    this.DataFromNetsuiteLog.Debug("ConfNewItem: Logout Netsuite success.");
                //}
                //else
                //{
                //    this.DataFromNetsuiteLog.Debug("ConfNewItem: Logout Netsuite failed.");
                //}
            }
            else
            {
                this.DataFromNetsuiteLog.Fatal("ConfNewItem: Login Netsuite failed.");
            }

            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(2400)
            };

            using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
            {
                if (itemRecord != null && itemRecord.Count() > 0)
                {
                    try
                    {
                        this.DataFromNetsuiteLog.Info("ConfNewItem: " + itemRecord.Count() + " records is retrieved.");
                        for (int i = 0; i < itemRecord.Length; i++)
                        {
                            if (itemRecord[i].ToString().Contains("InventoryItem"))
                            {
                                InventoryItem ii = (InventoryItem)itemRecord[i];
                                Guid itemID = Guid.NewGuid();

                                string userName = @Resource.NETSUITE_LOGIN_EMAIL;
                                string accountRoyalty = "";
                                string uom = "";
                                string isbn10 = "";
                                string bussinessChannelName = string.Empty;
                                string bussinessChannelInternalID = string.Empty;
                                string productFamily = string.Empty;

                                string isbnNew = string.Empty;      //#1028
                                isbnNew = ii.itemId;                //#1028 
                                string itemRunningNo = string.Empty;//#1028
                                itemRunningNo = ii.itemId;          //#1028

                                Int32 countLOB = 0;
                                Int32 tolLOB = 0;
                                Boolean isValid = true;
                                Double itemWeight = 0;
                                string taxSchedule = string.Empty;
                                string taxCode = string.Empty;
                                if (ii.taxSchedule != null)
                                {
                                    taxSchedule = ii.taxSchedule.name;
                                    if ((taxSchedule == @Resource.TAXABLE_TAXSCHEDULE) || (taxSchedule == @Resource.TAXABLE_TAXSCHEDULE4))//SCH3 || SCH4
                                    {
                                        taxCode = @Resource.TAXABLE_TAXCODE; //SR-0%
                                    }
                                    else if ((taxSchedule == @Resource.NON_TAXABLE_TAXSCHEDULE) || (taxSchedule == @Resource.NON_TAXABLE_TAXSCHEDULE5))//SCH2 || SCH5
                                    {
                                        taxCode = @Resource.NON_TAXABLE_TAXCODE;//ZRL
                                    }
                                }

                                foreach (CustomFieldRef cusRef in ii.customFieldList)
                                {
                                    if (cusRef.internalId == "1568")
                                    {
                                        SelectCustomFieldRef multiRef = (SelectCustomFieldRef)cusRef;
                                        accountRoyalty = multiRef.internalId;
                                    }
                                    else if (cusRef.internalId == "564")//scriptId = custitem_invtyitem_isbn10
                                    {
                                        StringCustomFieldRef stringRef = (StringCustomFieldRef)cusRef;
                                        isbn10 = stringRef.value;
                                    }
                                    else if (cusRef.internalId == "1572")
                                    {
                                        SelectCustomFieldRef multiRef = (SelectCustomFieldRef)cusRef;
                                        uom = multiRef.internalId;
                                    }
                                    else if (cusRef.internalId == "1562")
                                    {
                                        MultiSelectCustomFieldRef multiRef = (MultiSelectCustomFieldRef)cusRef;
                                        tolLOB = multiRef.value.Count();
                                        foreach (var a in multiRef.value)
                                        {
                                            countLOB++;
                                            bussinessChannelName = bussinessChannelName + a.name;
                                            bussinessChannelInternalID = bussinessChannelInternalID + a.internalId;
                                            if (tolLOB != countLOB)
                                            {
                                                bussinessChannelName = bussinessChannelName + ";";
                                                bussinessChannelInternalID = bussinessChannelInternalID + ";";
                                            }
                                        }
                                        //if (tolLOB == 1 && bussinessChannelInternalID == @Resource.LOB_EDUCATIONGENERAL_INTERNALID)
                                        //{
                                        //    isValid = false; //LOB is Education - General no need to insert
                                        //}
                                    }
                                    //Added item weight in KG - WY-17.OCT.2014
                                    else if (cusRef.internalId == "2243")//scriptId = custitem_weight_kg"
                                    {
                                        DoubleCustomFieldRef doubleRef = (DoubleCustomFieldRef)cusRef;
                                        itemWeight = doubleRef.value;
                                        if (itemWeight == 0 || itemWeight == null)
                                        {
                                            itemWeight = 0.01; //Default to 0.01KG
                                        }
                                    }
                                    //Added Product Family- WY-24.OCT.2014
                                    else if (cusRef.internalId == "568")//scriptId = custitem_item_productseries
                                    {
                                        SelectCustomFieldRef multiRef = (SelectCustomFieldRef)cusRef;
                                        productFamily = multiRef.value.name;
                                    }
                                    //Added #1028
                                    else if (cusRef.internalId == @Resource.CUSTOMFIELD_INVENTORY_ISBN_INTERNALID) //scriptId = custitem_isbn
                                    {
                                        SelectCustomFieldRef multiRef = (SelectCustomFieldRef)cusRef;
                                        if (!string.IsNullOrEmpty(multiRef.value.name))
                                        {
                                            isbnNew = multiRef.value.name;
                                        }
                                    }
                                    else if (cusRef.internalId == @Resource.CUSTOMFIELD_INVENTORY_LEGACY_CODE_INTERNALID) //scriptId = custitem_legacy_code
                                    {
                                        SelectCustomFieldRef multiRef = (SelectCustomFieldRef)cusRef;
                                        if (!string.IsNullOrEmpty(multiRef.value.name))
                                        {
                                            isbnNew = multiRef.value.name;
                                        }
                                    }
                                }

                                String strChkItem = "select count(*) from map_item where mi_item_internalID = '" + ii.internalId + "' ";
                                this.DataFromNetsuiteLog.Debug("ConfNewItem: " + strChkItem);

                                String _checkItem = "0";
                                _checkItem = entities.Database.SqlQuery<string>(strChkItem).FirstOrDefault<string>();

                                if (_checkItem == "0")
                                {
                                    if (isValid == true)
                                    {
                                        //var insertItem = String.Format("insert into map_item (mi_item_ID,mi_item_description,mi_item_title,mi_item_uom,mi_item_isbn,mi_isbn_secondary,mi_lastModifiedDate,mi_createdDate," +
                                        //        "mi_item_reorder_level,mi_reorder_qty,mi_reorder_date,mi_createdBy,mi_item_weight,mi_accountClassID,mi_item_internalID,mi_rangeTo,mi_businesschannel_name,mi_businesschannel_InternalID,mi_prodfamily) " +
                                        //        " values('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}','{17}','{18}')"
                                        //        , itemID, checkIsNull(ii.displayName).Replace("'", "''"), "", uom, ii.itemId, isbn10, convertDateToString(DateTime.Now), convertDateToString(ii.createdDate), 0, 0, convertDateToString(DateTime.Now), userName
                                        //        , itemWeight, accountRoyalty, ii.internalId, convertDateToString(Convert.ToDateTime(r.rn_rangeTo)), checkIsNull(bussinessChannelName).Replace("'", "''")
                                        //        , checkIsNull(bussinessChannelInternalID).Replace("'", "''"), checkIsNull(productFamily).Replace("'", "''"));

                                        var insertItem = String.Format("insert into map_item (mi_item_ID,mi_item_description,mi_item_title,mi_item_uom,mi_item_isbn,mi_isbn_secondary,mi_lastModifiedDate,mi_createdDate," +
                                                "mi_item_reorder_level,mi_reorder_qty,mi_reorder_date,mi_createdBy,mi_item_weight,mi_accountClassID,mi_item_internalID,mi_rangeTo,mi_businesschannel_name,mi_businesschannel_InternalID,mi_prodfamily, " +
                                                " mi_tax_schedule,mi_tax_code,mi_ns_itemID) " +
                                                " values('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}','{17}','{18}','{19}','{20}','{21}')"
                                                , itemID, checkIsNull(ii.displayName).Replace("'", "''"), "", uom, isbnNew, isbn10, convertDateToString(DateTime.Now), convertDateToString(ii.createdDate), 0, 0, convertDateToString(DateTime.Now), userName
                                                , itemWeight, accountRoyalty, ii.internalId, convertDateToString(Convert.ToDateTime(r.rn_rangeTo)), checkIsNull(bussinessChannelName).Replace("'", "''")
                                                , checkIsNull(bussinessChannelInternalID).Replace("'", "''"), checkIsNull(productFamily).Replace("'", "''"), checkIsNull(taxSchedule).Replace("'", "''"), checkIsNull(taxCode).Replace("'", "''")
                                                , itemRunningNo);

                                        this.DataFromNetsuiteLog.Debug("ConfNewItem: " + insertItem);
                                        entities.Database.ExecuteSqlCommand(insertItem);
                                    }
                                }
                                else
                                {
                                    if (isValid == true)
                                    {
                                        //var updateItem = "update map_item set mi_item_description='" + checkIsNull(ii.displayName).Replace("'", "''") + "', mi_item_uom = '" + uom + "', " +
                                        //                 "mi_isbn_secondary = '" + isbn10 + "', mi_lastModifiedDate = '" + convertDateToString(DateTime.Now) + "', mi_item_weight = '" + itemWeight + "', " +
                                        //                 "mi_accountClassID = '" + accountRoyalty + "', mi_rangeTo = '" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "', " +
                                        //                 "mi_businesschannel_name = '" + checkIsNull(bussinessChannelName).Replace("'", "''") + "',mi_businesschannel_InternalID = '" + checkIsNull(bussinessChannelInternalID).Replace("'", "''") + "', " +
                                        //                 "mi_prodfamily = '" + checkIsNull(productFamily).Replace("'", "''") + "' " +
                                        //                 "where mi_item_isbn = '" + ii.itemId + "' or mi_item_internalID = '" + ii.internalId + "'";
                                        var updateItem = "update map_item set mi_item_description='" + checkIsNull(ii.displayName).Replace("'", "''") + "', mi_item_uom = '" + uom + "', " +
                                                         "mi_isbn_secondary = '" + isbn10 + "', mi_lastModifiedDate = '" + convertDateToString(DateTime.Now) + "', mi_item_weight = '" + itemWeight + "', " +
                                                         "mi_accountClassID = '" + accountRoyalty + "', mi_rangeTo = '" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "', " +
                                                         "mi_businesschannel_name = '" + checkIsNull(bussinessChannelName).Replace("'", "''") + "',mi_businesschannel_InternalID = '" + checkIsNull(bussinessChannelInternalID).Replace("'", "''") + "', " +
                                                         "mi_prodfamily = '" + checkIsNull(productFamily).Replace("'", "''") + "', mi_tax_schedule = '" + checkIsNull(taxSchedule).Replace("'", "''") + "', " +
                                                         "mi_tax_code = '" + checkIsNull(taxCode).Replace("'", "''") + "', mi_ns_itemID = '" + itemRunningNo + "' " + ", mi_item_isbn = '" + isbnNew + "' " + ", mi_pmd_id = NULL , mi_pmd_sync = 0 " +
                                                         "where mi_item_internalID = '" + ii.internalId + "' ";
                                        this.DataFromNetsuiteLog.Debug("ConfNewItem: " + updateItem);
                                        entities.Database.ExecuteSqlCommand(updateItem);
                                    }
                                }

                                #region To Add for item Pricing - WY-25.MAR.2015
                                if (isValid == true)
                                {
                                    if (ii.pricingMatrix != null)
                                    {
                                        String myCurrency = "Malaysian Ringgit";
                                        foreach (Pricing itemPrice in ii.pricingMatrix.pricing)
                                        {
                                            if (itemPrice.currency.name == myCurrency)
                                            {
                                                Double price = 0;
                                                String priceLevel = string.Empty;

                                                priceLevel = itemPrice.priceLevel.name;
                                                switch (priceLevel)
                                                {
                                                    case "RRP": //For Bcas Free Gift Item use 
                                                    case "Intercompany Selling Price": //For Bcas Sales Order Use
                                                        price = itemPrice.priceList[0].value;

                                                        String strChkItemPrice = "select count(*) from map_itemprice where (mip_item_internalID = '" + ii.internalId + "') and mip_item_pricelevel = '" + priceLevel + "' " +
                                                                                 " and mip_item_currency = '" + myCurrency + "' ";
                                                        String _checkItemPrice = "0";
                                                        _checkItemPrice = entities.Database.SqlQuery<string>(strChkItemPrice).FirstOrDefault<string>();

                                                        if (_checkItemPrice == "0")
                                                        {
                                                            var insertItemPrice = String.Format("insert into map_itemprice (mip_item_isbn,mip_item_internalID,mip_item_pricelevel,mip_item_price,mip_item_currency) " +
                                                                                                " values('{0}','{1}','{2}','{3}','{4}')"
                                                                                                , isbnNew, ii.internalId, checkIsNull(priceLevel).Replace("'", "''"), price, myCurrency);
                                                            this.DataFromNetsuiteLog.Debug("ConfItem: " + insertItemPrice);
                                                            entities.Database.ExecuteSqlCommand(insertItemPrice);
                                                        }
                                                        else
                                                        {
                                                            var updItemPrice = "update map_itemprice set mip_item_isbn = '" + isbnNew + "', mip_item_price = '" + price + "' where (mip_item_internalID = '" + ii.internalId + "') and mip_item_pricelevel = '" + priceLevel + "' " +
                                                                               " and mip_item_currency = '" + myCurrency + "' ";
                                                            this.DataFromNetsuiteLog.Debug("ConfItem: " + updItemPrice);
                                                            entities.Database.ExecuteSqlCommand(updItemPrice);

                                                        }
                                                        break;
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion
                            }
                        }
                        var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                            "where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("ConfNewItem: " + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                        scope1.Complete();
                        status = true;
                    }
                    catch (Exception ex)
                    {
                        var updateRequestNetsuite7 = "update requestnetsuite set rn_status = 'FINISHED' where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("PullNetsuite: " + updateRequestNetsuite7);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite7);
                        scope1.Complete();
                        this.DataFromNetsuiteLog.Error("ConfNewItem Exception: " + ex.ToString());
                    }
                }
                else
                {
                    var updateRequestNetsuite = "update requestnetsuite set rn_status='NO-DATA', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                        "where rn_jobID = '" + r.rn_jobID + "'";
                    this.DataFromNetsuiteLog.Debug("ConfNewItem: " + updateRequestNetsuite);
                    entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                    scope1.Complete();
                }
            }
            return status;
        }
        //To search null item at netsuite_pritem - WY-26.NOV.2014 
        //Extract item from NetSuite
        private Boolean ConfNullItem(sdeEntities entities, RequestNetsuiteEntity r)
        {
            this.DataFromNetsuiteLog.Info("ConfNullItem *********");
            //TBA
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            DataCenterAwareNetSuiteService netsuiteService = new DataCenterAwareNetSuiteService(account);

            Boolean status = false;
            //Boolean loginStastus = login(@Resource.NETSUITE_LOGIN_EMAIL);
            Record[] itemRecord = null;
            //TBA
            ItemSearchBasic basic = new ItemSearchBasic()
            {
                internalId = new SearchMultiSelectField()
                {
                    @operator = SearchMultiSelectFieldOperator.anyOf,
                    operatorSpecified = true,
                    searchValue = new RecordRef[] {
                    new RecordRef() {
                    internalId = "14943"
                         }
                    }
                }
            };


            netsuiteService.Timeout = 820000000;
            netsuiteService.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();


            //  appinfo.applicationId = appID;
            netsuiteService.applicationInfo = appinfo;
            string loginEmail = "";
            loginEmail = @Resource.NETSUITE_LOGIN_EMAIL;
            tokenId = @Resource.ASIA_WEBSERVICE_TOKEN_ID;
            tokenSecret = @Resource.ASIA_WEBSERVICE_TOKEN_SECRET;


            Boolean loginStatus = false;
            try
            {
                Console.WriteLine("Success");
                netsuiteService.tokenPassport = createTokenPassport();
                SearchResult status1 = netsuiteService.search(basic);
                if (status1.status.isSuccess == true)
                {
                    this.DataFromNetsuiteLog.Debug("ConfNullItem: Login Netsuite success.");
                    loginStatus = true;
                }
                else
                {
                    loginStatus = false;
                }
            }
            catch (Exception ex)
            {
                loginStatus = false;
                this.DataFromNetsuiteLog.Fatal("SOFulfillmentUpdate: Login Netsuite failed. Exception : " + ex.ToString());

            }
            //
            if (loginStatus == true)
            {
                this.DataFromNetsuiteLog.Debug("ConfNullItem: Login Netsuite success.");
                this.DataFromNetsuiteLog.Info("ConfNullItem: Retrieving new item from Netsuite.");

                var updateRequestNetsuitePulling = "update requestnetsuite set rn_status='PULLING' " +
                          "where rn_jobID = '" + r.rn_jobID + "'";
                this.DataFromNetsuiteLog.Debug("ConfNullItem: " + updateRequestNetsuitePulling);
                entities.Database.ExecuteSqlCommand(updateRequestNetsuitePulling);

                //TBA
                netsuiteService.tokenPassport = createTokenPassport();
                AsyncResult itemResponse = netsuiteService.getAsyncResult(r.rn_jobID, 1);
                AsyncSearchResult itemSearchResult = (AsyncSearchResult)itemResponse;
                itemRecord = itemSearchResult.searchResult.recordList;
                while (itemSearchResult.searchResult.totalRecords > (itemSearchResult.searchResult.pageSize * itemSearchResult.searchResult.pageIndex))
                {
                    //TBA
                    netsuiteService.tokenPassport = createTokenPassport();
                    itemResponse = netsuiteService.getAsyncResult(r.rn_jobID, itemSearchResult.searchResult.pageIndex + 1);
                    itemSearchResult = (AsyncSearchResult)itemResponse;
                    itemRecord = itemRecord.Concat(itemSearchResult.searchResult.recordList).ToArray();

                }
                //TBA
                //Boolean logoutStatus = logout();
                //if (logoutStatus == true)
                //{
                //    this.DataFromNetsuiteLog.Debug("ConfNullItem: Logout Netsuite success.");
                //}
                //else
                //{
                //    this.DataFromNetsuiteLog.Debug("ConfNullItem: Logout Netsuite failed.");
                //}
            }
            else
            {
                this.DataFromNetsuiteLog.Fatal("ConfNullItem: Login Netsuite failed.");
            }

            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(2400)
            };

            using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
            {
                if (itemRecord != null && itemRecord.Count() > 0)
                {
                    try
                    {
                        this.DataFromNetsuiteLog.Info("ConfNullItem: " + itemRecord.Count() + " records is retrieved.");
                        for (int i = 0; i < itemRecord.Length; i++)
                        {
                            if (itemRecord[i].ToString().Contains("InventoryItem"))
                            {
                                InventoryItem ii = (InventoryItem)itemRecord[i];
                                Guid itemID = Guid.NewGuid();

                                string userName = @Resource.NETSUITE_LOGIN_EMAIL;

                                string accountRoyalty = "";
                                string uom = "";
                                string isbn10 = "";
                                string bussinessChannelName = string.Empty;
                                string bussinessChannelInternalID = string.Empty;
                                string productFamily = string.Empty;

                                string isbnNew = string.Empty;      //#1028
                                isbnNew = ii.itemId;                //#1028 
                                string itemRunningNo = string.Empty;//#1028
                                itemRunningNo = ii.itemId;          //#1028

                                Int32 countLOB = 0;
                                Int32 tolLOB = 0;
                                Boolean isValid = true;
                                Double itemWeight = 0;
                                string taxSchedule = string.Empty;
                                string taxCode = string.Empty;
                                if (ii.taxSchedule != null)
                                {
                                    taxSchedule = ii.taxSchedule.name;
                                    if ((taxSchedule == @Resource.TAXABLE_TAXSCHEDULE) || (taxSchedule == @Resource.TAXABLE_TAXSCHEDULE4))//SCH3 || SCH4
                                    {
                                        taxCode = @Resource.TAXABLE_TAXCODE; //SR-0%
                                    }
                                    else if ((taxSchedule == @Resource.NON_TAXABLE_TAXSCHEDULE) || (taxSchedule == @Resource.NON_TAXABLE_TAXSCHEDULE5))//SCH2 || SCH5
                                    {
                                        taxCode = @Resource.NON_TAXABLE_TAXCODE;//ZRL
                                    }
                                }

                                foreach (CustomFieldRef cusRef in ii.customFieldList)
                                {
                                    if (cusRef.internalId == "1568")
                                    {
                                        SelectCustomFieldRef multiRef = (SelectCustomFieldRef)cusRef;
                                        accountRoyalty = multiRef.internalId;
                                    }
                                    else if (cusRef.internalId == "564")//scriptId = custitem_invtyitem_isbn10
                                    {
                                        StringCustomFieldRef stringRef = (StringCustomFieldRef)cusRef;
                                        isbn10 = stringRef.value;
                                    }
                                    else if (cusRef.internalId == "1572")
                                    {
                                        SelectCustomFieldRef multiRef = (SelectCustomFieldRef)cusRef;
                                        uom = multiRef.internalId;
                                    }
                                    //Get Line of Bussiness Rights 
                                    else if (cusRef.internalId == "1562")
                                    {
                                        MultiSelectCustomFieldRef multiRef = (MultiSelectCustomFieldRef)cusRef;
                                        tolLOB = multiRef.value.Count();
                                        foreach (var a in multiRef.value)
                                        {
                                            countLOB++;
                                            bussinessChannelName = bussinessChannelName + a.name;
                                            bussinessChannelInternalID = bussinessChannelInternalID + a.internalId;
                                            if (tolLOB != countLOB)
                                            {
                                                bussinessChannelName = bussinessChannelName + ";";
                                                bussinessChannelInternalID = bussinessChannelInternalID + ";";
                                            }
                                        }
                                        //if (tolLOB == 1 && bussinessChannelInternalID == @Resource.LOB_EDUCATIONGENERAL_INTERNALID)
                                        //{
                                        //    isValid = false; //LOB is Education - General no need to insert
                                        //}
                                    }
                                    //Added item weight in KG 
                                    else if (cusRef.internalId == "2243")//scriptId = custitem_weight_kg
                                    {
                                        DoubleCustomFieldRef doubleRef = (DoubleCustomFieldRef)cusRef;
                                        itemWeight = doubleRef.value;
                                        if (itemWeight == 0 || itemWeight == null)
                                        {
                                            itemWeight = 0.01; //Default to 0.01KG
                                        }
                                    }
                                    //Added Product Family
                                    else if (cusRef.internalId == "568")//scriptId = custitem_item_productseries
                                    {
                                        SelectCustomFieldRef multiRef = (SelectCustomFieldRef)cusRef;
                                        productFamily = multiRef.value.name;
                                    }
                                    //Added #1028
                                    else if (cusRef.internalId == @Resource.CUSTOMFIELD_INVENTORY_ISBN_INTERNALID) //scriptId = custitem_isbn
                                    {
                                        SelectCustomFieldRef multiRef = (SelectCustomFieldRef)cusRef;
                                        if (!string.IsNullOrEmpty(multiRef.value.name))
                                        {
                                            isbnNew = multiRef.value.name;
                                        }
                                    }
                                    else if (cusRef.internalId == @Resource.CUSTOMFIELD_INVENTORY_LEGACY_CODE_INTERNALID) //scriptId = custitem_legacy_code
                                    {
                                        SelectCustomFieldRef multiRef = (SelectCustomFieldRef)cusRef;
                                        if (!string.IsNullOrEmpty(multiRef.value.name))
                                        {
                                            isbnNew = multiRef.value.name;
                                        }
                                    }
                                }

                                String strChkItem = "select count(*) from map_item where mi_item_internalID = '" + ii.internalId + "' ";
                                this.DataFromNetsuiteLog.Debug("ConfNullItem: " + strChkItem);

                                String _checkItem = "0";
                                _checkItem = entities.Database.SqlQuery<string>(strChkItem).FirstOrDefault<string>();

                                if (_checkItem == "0")
                                {
                                    if (isValid == true)
                                    {
                                        //var insertItem = String.Format("insert into map_item (mi_item_ID,mi_item_description,mi_item_title,mi_item_uom,mi_item_isbn,mi_isbn_secondary,mi_lastModifiedDate,mi_createdDate," +
                                        //           "mi_item_reorder_level,mi_reorder_qty,mi_reorder_date,mi_createdBy,mi_item_weight,mi_accountClassID,mi_item_internalID,mi_rangeTo,mi_businesschannel_name,mi_businesschannel_InternalID,mi_prodfamily) " +
                                        //           " values('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}','{17}','{18}')"
                                        //           , itemID, checkIsNull(ii.displayName).Replace("'", "''"), "", uom, ii.itemId, isbn10, convertDateToString(DateTime.Now), convertDateToString(ii.createdDate), 0, 0, convertDateToString(DateTime.Now), userName
                                        //           , itemWeight, accountRoyalty, ii.internalId, convertDateToString(Convert.ToDateTime(r.rn_rangeTo)), checkIsNull(bussinessChannelName).Replace("'", "''")
                                        //           , checkIsNull(bussinessChannelInternalID).Replace("'", "''"), checkIsNull(productFamily).Replace("'", "''"));

                                        var insertItem = String.Format("insert into map_item (mi_item_ID,mi_item_description,mi_item_title,mi_item_uom,mi_item_isbn,mi_isbn_secondary,mi_lastModifiedDate,mi_createdDate," +
                                                "mi_item_reorder_level,mi_reorder_qty,mi_reorder_date,mi_createdBy,mi_item_weight,mi_accountClassID,mi_item_internalID,mi_rangeTo,mi_businesschannel_name,mi_businesschannel_InternalID,mi_prodfamily, " +
                                                " mi_tax_schedule,mi_tax_code,mi_ns_itemID) " +
                                                " values('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}','{17}','{18}','{19}','{20}','{21}')"
                                                , itemID, checkIsNull(ii.displayName).Replace("'", "''"), "", uom, isbnNew, isbn10, convertDateToString(DateTime.Now), convertDateToString(ii.createdDate), 0, 0, convertDateToString(DateTime.Now), userName
                                                , itemWeight, accountRoyalty, ii.internalId, convertDateToString(Convert.ToDateTime(r.rn_rangeTo)), checkIsNull(bussinessChannelName).Replace("'", "''")
                                                , checkIsNull(bussinessChannelInternalID).Replace("'", "''"), checkIsNull(productFamily).Replace("'", "''"), checkIsNull(taxSchedule).Replace("'", "''"), checkIsNull(taxCode).Replace("'", "''")
                                                , itemRunningNo);

                                        this.DataFromNetsuiteLog.Debug("ConfNullItem: " + insertItem);
                                        entities.Database.ExecuteSqlCommand(insertItem);
                                    }
                                }
                                else
                                {
                                    if (isValid == true)
                                    {
                                        //var updateItem = "update map_item set mi_item_description='" + checkIsNull(ii.displayName).Replace("'", "''") + "', mi_item_uom = '" + uom + "', " +
                                        //                 "mi_isbn_secondary = '" + isbn10 + "', mi_lastModifiedDate = '" + convertDateToString(DateTime.Now) + "', mi_item_weight = '" + itemWeight + "', " +
                                        //                 "mi_accountClassID = '" + accountRoyalty + "', mi_rangeTo = '" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "', " +
                                        //                 "mi_businesschannel_name = '" + checkIsNull(bussinessChannelName).Replace("'", "''") + "',mi_businesschannel_InternalID = '" + checkIsNull(bussinessChannelInternalID).Replace("'", "''") + "', " +
                                        //                 "mi_prodfamily = '" + checkIsNull(productFamily).Replace("'", "''") + "' " +
                                        //                 "where mi_item_isbn = '" + ii.itemId + "' or mi_item_internalID = '" + ii.internalId + "'";
                                        var updateItem = "update map_item set mi_item_description='" + checkIsNull(ii.displayName).Replace("'", "''") + "', mi_item_uom = '" + uom + "', " +
                                                         "mi_isbn_secondary = '" + isbn10 + "', mi_lastModifiedDate = '" + convertDateToString(DateTime.Now) + "', mi_item_weight = '" + itemWeight + "', " +
                                                         "mi_accountClassID = '" + accountRoyalty + "', mi_rangeTo = '" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "', " +
                                                         "mi_businesschannel_name = '" + checkIsNull(bussinessChannelName).Replace("'", "''") + "',mi_businesschannel_InternalID = '" + checkIsNull(bussinessChannelInternalID).Replace("'", "''") + "', " +
                                                         "mi_prodfamily = '" + checkIsNull(productFamily).Replace("'", "''") + "', mi_tax_schedule = '" + checkIsNull(taxSchedule).Replace("'", "''") + "', " +
                                                         "mi_tax_code = '" + checkIsNull(taxCode).Replace("'", "''") + "', mi_ns_itemID = '" + itemRunningNo + "' " + ", mi_item_isbn = '" + isbnNew + "' " + ", mi_pmd_id = NULL , mi_pmd_sync = 0 " +
                                                         "where mi_item_internalID = '" + ii.internalId + "' ";
                                        this.DataFromNetsuiteLog.Debug("ConfNullItem: " + updateItem);
                                        entities.Database.ExecuteSqlCommand(updateItem);
                                    }
                                }

                                //Update netsuite_pritem
                                this.DataFromNetsuiteLog.Info("ConfNullItem: Update netsuite_pritem with null ISBN records.");
                                var updatePRItem = "update netsuite_pritem set nspi_item_ID = '" + isbnNew + "' " +
                                                   "where nspi_item_internalID = '" + ii.internalId + "' and nspi_item_ID is null ";
                                this.DataFromNetsuiteLog.Debug("ConfNullItem: " + updatePRItem);
                                entities.Database.ExecuteSqlCommand(updatePRItem);

                                #region To Add for item Pricing - WY-25.MAR.2015
                                if (isValid == true)
                                {
                                    if (ii.pricingMatrix != null)
                                    {
                                        String myCurrency = "Malaysian Ringgit";
                                        foreach (Pricing itemPrice in ii.pricingMatrix.pricing)
                                        {
                                            if (itemPrice.currency.name == myCurrency)
                                            {
                                                Double price = 0;
                                                String priceLevel = string.Empty;

                                                priceLevel = itemPrice.priceLevel.name;
                                                switch (priceLevel)
                                                {
                                                    case "RRP": //For Bcas Free Gift Item use 
                                                    case "Intercompany Selling Price": //For Bcas Sales Order Use
                                                        price = itemPrice.priceList[0].value;

                                                        String strChkItemPrice = "select count(*) from map_itemprice where (mip_item_internalID = '" + ii.internalId + "') and mip_item_pricelevel = '" + priceLevel + "' " +
                                                                                 " and mip_item_currency = '" + myCurrency + "' ";
                                                        String _checkItemPrice = "0";
                                                        _checkItemPrice = entities.Database.SqlQuery<string>(strChkItemPrice).FirstOrDefault<string>();

                                                        if (_checkItemPrice == "0")
                                                        {
                                                            var insertItemPrice = String.Format("insert into map_itemprice (mip_item_isbn,mip_item_internalID,mip_item_pricelevel,mip_item_price,mip_item_currency) " +
                                                                                                " values('{0}','{1}','{2}','{3}','{4}')"
                                                                                                , isbnNew, ii.internalId, checkIsNull(priceLevel).Replace("'", "''"), price, myCurrency);
                                                            this.DataFromNetsuiteLog.Debug("ConfItem: " + insertItemPrice);
                                                            entities.Database.ExecuteSqlCommand(insertItemPrice);
                                                        }
                                                        else
                                                        {
                                                            var updItemPrice = "update map_itemprice set mip_item_isbn = '" + isbnNew + "', mip_item_price = '" + price + "' where (mip_item_internalID = '" + ii.internalId + "') and mip_item_pricelevel = '" + priceLevel + "' " +
                                                                               " and mip_item_currency = '" + myCurrency + "' ";
                                                            this.DataFromNetsuiteLog.Debug("ConfItem: " + updItemPrice);
                                                            entities.Database.ExecuteSqlCommand(updItemPrice);

                                                        }
                                                        break;
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion
                            }
                        }

                        var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                            "where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("ConfNullItem: " + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                        scope1.Complete();
                        status = true;
                    }
                    catch (Exception ex)
                    {
                        var updateRequestNetsuite7 = "update requestnetsuite set rn_status = 'FINISHED' where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("PullNetsuite: " + updateRequestNetsuite7);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite7);
                        scope1.Complete();
                        this.DataFromNetsuiteLog.Error("ConfNullItem Exception: " + ex.ToString());
                    }
                }
                else
                {
                    var updateRequestNetsuite = "update requestnetsuite set rn_status='NO-DATA', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                        "where rn_jobID = '" + r.rn_jobID + "'";
                    this.DataFromNetsuiteLog.Debug("ConfNullItem: " + updateRequestNetsuite);
                    entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                    scope1.Complete();
                }
            }
            return status;
        }
        private Boolean ConfBusinessChannel(sdeEntities entities, RequestNetsuiteEntity r)
        {
            //TBA
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            DataCenterAwareNetSuiteService netsuiteService = new DataCenterAwareNetSuiteService(account);

            //Extract business channel from NetSuite
            this.DataFromNetsuiteLog.Info("ConfBusinessChannel *********");

            Boolean status = false;
            //Boolean loginStastus = login(@Resource.NETSUITE_LOGIN_EMAIL);
            Record[] businessChannelRecord = null;

            //TBA
            ItemSearchBasic basic = new ItemSearchBasic()
            {
                internalId = new SearchMultiSelectField()
                {
                    @operator = SearchMultiSelectFieldOperator.anyOf,
                    operatorSpecified = true,
                    searchValue = new RecordRef[] {
                    new RecordRef() {
                    internalId = "14943"
                         }
                    }
                }
            };


            netsuiteService.Timeout = 820000000;
            netsuiteService.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();

            //  appinfo.applicationId = appID;
            netsuiteService.applicationInfo = appinfo;
            string loginEmail = "";
            loginEmail = @Resource.NETSUITE_LOGIN_EMAIL;
            tokenId = @Resource.ASIA_WEBSERVICE_TOKEN_ID;
            tokenSecret = @Resource.ASIA_WEBSERVICE_TOKEN_SECRET;


            Boolean loginStatus = false;
            try
            {
                Console.WriteLine("Success");
                netsuiteService.tokenPassport = createTokenPassport();
                SearchResult status1 = netsuiteService.search(basic);
                if (status1.status.isSuccess == true)
                {
                    this.DataFromNetsuiteLog.Debug("ConfBusinessChannel: Login Netsuite success.");
                    loginStatus = true;
                }
                else
                {
                    loginStatus = false;
                }
            }
            catch (Exception ex)
            {
                loginStatus = false;
                this.DataFromNetsuiteLog.Fatal("SOFulfillmentUpdate: Login Netsuite failed. Exception : " + ex.ToString());

            }
            //
            if (loginStatus == true)
            {
                this.DataFromNetsuiteLog.Debug("ConfBusinessChannel: Login Netsuite success.");
                this.DataFromNetsuiteLog.Info("ConfBusinessChannel: Retrieving business channel from Netsuite.");
                //TBA
                netsuiteService.tokenPassport = createTokenPassport();
                AsyncResult businessChannelResponse = netsuiteService.getAsyncResult(r.rn_jobID, 1);
                AsyncSearchResult businessChannelSearchResult = (AsyncSearchResult)businessChannelResponse;
                businessChannelRecord = businessChannelSearchResult.searchResult.recordList;
                //Boolean logoutStatus = logout();
                //if (logoutStatus == true)
                //{
                //    this.DataFromNetsuiteLog.Debug("ConfBusinessChannel: Logout Netsuite success.");
                //}
                //else
                //{
                //    this.DataFromNetsuiteLog.Debug("ConfBusinessChannel: Logout Netsuite failed.");
                //}
            }
            else
            {
                this.DataFromNetsuiteLog.Fatal("ConfBusinessChannel: Login Netsuite failed.");
            }

            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(2400)
            };

            //using (TransactionScope scope1 = new TransactionScope()) 
            using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
            {
                if (businessChannelRecord != null && businessChannelRecord.Count() > 0)
                {
                    try
                    {
                        this.DataFromNetsuiteLog.Info("ConfBusinessChannel: " + businessChannelRecord.Count() + " records is retrieved.");
                        for (int i = 0; i < businessChannelRecord.Length; i++)
                        {
                            Classification bc = (Classification)businessChannelRecord[i];

                            var deleteBusinessChannel = "delete from map_businesschannel where mb_businessChannel_internalID = '" + bc.internalId + "'";
                            this.DataFromNetsuiteLog.Debug("ConfBusinessChannel" + deleteBusinessChannel);
                            entities.Database.ExecuteSqlCommand(deleteBusinessChannel);

                            var insertBC = "insert into map_businesschannel (mb_businesschannel_internalID,mb_businesschannel_name,mb_businesschannel_parent,mb_businesschannel_includeChild," +
                                "mb_businesschannel_isInactive) values ('" + bc.internalId + "','" + bc.name.Replace("'", "''") + "','" + checkRecordRefIsNull(bc.parent).Replace("'", "''") + "'," + bc.includeChildren + "," + bc.isInactive + ")";
                            this.DataFromNetsuiteLog.Debug("ConfBusinessChannel" + insertBC);
                            entities.Database.ExecuteSqlCommand(insertBC);
                        }

                        var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                            "where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("ConfBusinessChannel" + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                        scope1.Complete();
                        status = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataFromNetsuiteLog.Error("ConfBusinessChannel Exception: " + ex.ToString());
                    }
                }
                else
                {
                    var updateRequestNetsuite = "update requestnetsuite set rn_status='NO-DATA', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                        "where rn_jobID = '" + r.rn_jobID + "'";
                    this.DataFromNetsuiteLog.Debug("ConfBusinessChannel: " + updateRequestNetsuite);
                    entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                    scope1.Complete();
                }
                //scope1.Complete();
            }
            return status;
        }
        private Boolean ConfSubsidiary(sdeEntities entities, RequestNetsuiteEntity r)
        {

            //TBA
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            DataCenterAwareNetSuiteService netsuiteService = new DataCenterAwareNetSuiteService(account);

            //Extract subsidiary from NetSuite
            this.DataFromNetsuiteLog.Info("ConfSubsidiary *********");
            Boolean status = false;

            //Boolean loginStastus = login(@Resource.NETSUITE_LOGIN_EMAIL);
            Record[] subRecord = null;
            //TBA
            ItemSearchBasic basic = new ItemSearchBasic()
            {
                internalId = new SearchMultiSelectField()
                {
                    @operator = SearchMultiSelectFieldOperator.anyOf,
                    operatorSpecified = true,
                    searchValue = new RecordRef[] {
                    new RecordRef() {
                    internalId = "14943"
                         }
                    }
                }
            };


            netsuiteService.Timeout = 820000000;
            netsuiteService.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();

            //  appinfo.applicationId = appID;
            netsuiteService.applicationInfo = appinfo;
            string loginEmail = "";
            loginEmail = @Resource.NETSUITE_LOGIN_EMAIL;
            tokenId = @Resource.ASIA_WEBSERVICE_TOKEN_ID;
            tokenSecret = @Resource.ASIA_WEBSERVICE_TOKEN_SECRET;


            Boolean loginStatus = false;
            try
            {
                Console.WriteLine("Success");
                netsuiteService.tokenPassport = createTokenPassport();
                SearchResult status1 = netsuiteService.search(basic);
                if (status1.status.isSuccess == true)
                {
                    this.DataFromNetsuiteLog.Debug("ConfSubsidiary: Login Netsuite success.");
                    loginStatus = true;
                }
                else
                {
                    loginStatus = false;
                }
            }
            catch (Exception ex)
            {
                loginStatus = false;
                this.DataFromNetsuiteLog.Fatal("SOFulfillmentUpdate: Login Netsuite failed. Exception : " + ex.ToString());

            }
            //

            if (loginStatus == true)
            {
                this.DataFromNetsuiteLog.Debug("ConfSubsidiary: Login Netsuite success.");
                this.DataFromNetsuiteLog.Info("ConfSubsidiary: Retrieving subsidiary from Netsuite.");
                //TBA
                netsuiteService.tokenPassport = createTokenPassport();
                AsyncResult subResponse = netsuiteService.getAsyncResult(r.rn_jobID, 1);
                AsyncSearchResult subSearchResult = (AsyncSearchResult)subResponse;
                subRecord = subSearchResult.searchResult.recordList;
                //Boolean logoutStatus = logout();
                //if (logoutStatus == true)
                //{
                //    this.DataFromNetsuiteLog.Debug("ConfSubsidiary: Logout Netsuite success.");
                //}
                //else
                //{
                //    this.DataFromNetsuiteLog.Debug("ConfSubsidiary: Logout Netsuite failed.");
                //}
            }
            else
            {
                this.DataFromNetsuiteLog.Fatal("ConfSubsidiary: Login Netsuite failed.");
            }

            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(2400)
            };

            //using (TransactionScope scope1 = new TransactionScope()) 
            using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
            {
                if (subRecord != null && subRecord.Count() > 0)
                {
                    try
                    {
                        this.DataFromNetsuiteLog.Info("ConfSubsidiary: " + subRecord.Count() + " records is retrieved.");
                        for (int i = 0; i < subRecord.Length; i++)
                        {
                            Subsidiary sub = (Subsidiary)subRecord[i];
                            var deleteSubsidiary = "delete from map_subsidiary where ms_subsidiary_internalID = '" + sub.internalId + "'";
                            this.DataFromNetsuiteLog.Debug("ConfSubsidiary: " + deleteSubsidiary);
                            entities.Database.ExecuteSqlCommand(deleteSubsidiary);

                            var insertSub = "insert into map_subsidiary (ms_subsidiary_internalID,ms_subsidiary_name,ms_subsidiary_parent,ms_subsidiary_country," +
                                "ms_subsidiary_isInactive,ms_currency) values ('" + sub.internalId + "','" + sub.name + "','" + checkRecordRefIsNull(sub.parent) + "','" + sub.country + "'," + sub.isInactive + ",'" + sub.currency.name + "')";
                            this.DataFromNetsuiteLog.Debug("ConfSubsidiary: " + insertSub);
                            entities.Database.ExecuteSqlCommand(insertSub);
                        }

                        var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                            "where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("ConfSubsidiary: " + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                        scope1.Complete();

                        status = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataFromNetsuiteLog.Error("ConfSubsidiary Exception: " + ex.ToString());
                    }
                }
                else
                {
                    var updateRequestNetsuite = "update requestnetsuite set rn_status='NO-DATA', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                        "where rn_jobID = '" + r.rn_jobID + "'";
                    this.DataFromNetsuiteLog.Debug("ConfSubsidiary: " + updateRequestNetsuite);
                    entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                    scope1.Complete();
                }
                // scope1.Complete();
            }
            return status;
        }
        private Boolean ConfLocation(sdeEntities entities, RequestNetsuiteEntity r)
        {
            //TBA
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            DataCenterAwareNetSuiteService netsuiteService = new DataCenterAwareNetSuiteService(account);

            //Extract location from NetSuite
            this.DataFromNetsuiteLog.Info("ConfLocation *********");
            Boolean status = false;

            //Boolean loginStastus = login(@Resource.NETSUITE_LOGIN_EMAIL);
            Record[] locRecord = null;
            //TBA
            ItemSearchBasic basic = new ItemSearchBasic()
            {
                internalId = new SearchMultiSelectField()
                {
                    @operator = SearchMultiSelectFieldOperator.anyOf,
                    operatorSpecified = true,
                    searchValue = new RecordRef[] {
                    new RecordRef() {
                    internalId = "14943"
                         }
                    }
                }
            };


            netsuiteService.Timeout = 820000000;
            netsuiteService.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();

            //  appinfo.applicationId = appID;
            netsuiteService.applicationInfo = appinfo;
            string loginEmail = "";
            loginEmail = @Resource.NETSUITE_LOGIN_EMAIL;
            tokenId = @Resource.ASIA_WEBSERVICE_TOKEN_ID;
            tokenSecret = @Resource.ASIA_WEBSERVICE_TOKEN_SECRET;


            Boolean loginStatus = false;
            try
            {
                Console.WriteLine("Success");
                netsuiteService.tokenPassport = createTokenPassport();
                SearchResult status1 = netsuiteService.search(basic);
                if (status1.status.isSuccess == true)
                {
                    this.DataFromNetsuiteLog.Debug("ConfLocation: Login Netsuite success.");
                    this.DataFromNetsuiteLog.Info("ConfLocation: Retrieving location from Netsuite.");
                    loginStatus = true;
                }
                else
                {
                    loginStatus = false;
                }
            }
            catch (Exception ex)
            {
                loginStatus = false;
                this.DataFromNetsuiteLog.Fatal("SOFulfillmentUpdate: Login Netsuite failed. Exception : " + ex.ToString());

            }
            //

            if (loginStatus == true)
            {
                this.DataFromNetsuiteLog.Debug("ConfLocation: Login Netsuite success.");
                this.DataFromNetsuiteLog.Info("ConfLocation: Retrieving location from Netsuite.");
                //TBA
                netsuiteService.tokenPassport = createTokenPassport();
                AsyncResult locResponse = netsuiteService.getAsyncResult(r.rn_jobID, 1);
                AsyncSearchResult locSearchResult = (AsyncSearchResult)locResponse;
                locRecord = locSearchResult.searchResult.recordList;
                //Boolean logoutStatus = logout();
                //if (logoutStatus == true)
                //{
                //    this.DataFromNetsuiteLog.Debug("ConfLocation: Logout Netsuite success.");
                //}
                //else
                //{
                //    this.DataFromNetsuiteLog.Debug("ConfLocation: Logout Netsuite failed.");
                //}
            }
            else
            {
                this.DataFromNetsuiteLog.Fatal("ConfLocation: Login Netsuite failed.");
            }

            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(2400)
            };

            //using (TransactionScope scope1 = new TransactionScope()) 
            using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
            {
                if (locRecord != null && locRecord.Count() > 0)
                {
                    try
                    {
                        this.DataFromNetsuiteLog.Info("ConfLocation: " + locRecord.Count() + " records is retrieved.");
                        for (int i = 0; i < locRecord.Length; i++)
                        {
                            Location loc = (Location)locRecord[i];
                            Address addr = loc.mainAddress;
                            var deleteLocation = "delete from map_location where ml_location_internalID = '" + loc.internalId + "'";
                            this.DataFromNetsuiteLog.Debug("ConfLocation: " + deleteLocation);
                            entities.Database.ExecuteSqlCommand(deleteLocation);

                            var insertLoc = "insert into map_location (ml_location_internalID,ml_location_name,ml_location_parent,ml_location_country," +
                                "ml_location_isInactive) values ('" + loc.internalId + "','" + loc.name + "','" + checkRecordRefIsNull(loc.parent) + "','" + addr.country + "'," + loc.isInactive + ")";
                            this.DataFromNetsuiteLog.Debug("ConfLocation: " + insertLoc);
                            entities.Database.ExecuteSqlCommand(insertLoc);
                        }

                        var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                            "where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("ConfLocation: " + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                        scope1.Complete();

                        status = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataFromNetsuiteLog.Error("ConfLocation Exception: " + ex.ToString());
                    }
                }
                else
                {
                    var updateRequestNetsuite = "update requestnetsuite set rn_status='NO-DATA', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                        "where rn_jobID = '" + r.rn_jobID + "'";
                    this.DataFromNetsuiteLog.Debug("ConfLocation: " + updateRequestNetsuite);
                    entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                    scope1.Complete();

                }
                //scope1.Complete();
            }
            return status;
        }
        //Not using
        private Boolean ConfCustomer(sdeEntities entities, RequestNetsuiteEntity r)
        {
            this.DataFromNetsuiteLog.Info("ConfCustomer *********");
            Boolean status = false;

            //Boolean loginStastus = login(@Resource.NETSUITE_LOGIN_EMAIL);
            Record[] custRecord = null;

            //TBA
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            DataCenterAwareNetSuiteService netsuiteService = new DataCenterAwareNetSuiteService(account);
            //TBA
            ItemSearchBasic basic = new ItemSearchBasic()
            {
                internalId = new SearchMultiSelectField()
                {
                    @operator = SearchMultiSelectFieldOperator.anyOf,
                    operatorSpecified = true,
                    searchValue = new RecordRef[] {
                    new RecordRef() {
                    internalId = "14943"
                         }
                    }
                }
            };


            netsuiteService.Timeout = 820000000;
            netsuiteService.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();

            //  appinfo.applicationId = appID;
            netsuiteService.applicationInfo = appinfo;
            string loginEmail = "";
            loginEmail = @Resource.NETSUITE_LOGIN_EMAIL;
            tokenId = @Resource.ASIA_WEBSERVICE_TOKEN_ID;
            tokenSecret = @Resource.ASIA_WEBSERVICE_TOKEN_SECRET;


            Boolean loginStatus = false;
            try
            {
                Console.WriteLine("Success");
                netsuiteService.tokenPassport = createTokenPassport();
                SearchResult status1 = netsuiteService.search(basic);
                if (status1.status.isSuccess == true)
                {
                    this.DataFromNetsuiteLog.Info("Retrieving customer from Netsuite.");
                    loginStatus = true;
                }
                else
                {
                    loginStatus = false;
                }
            }
            catch (Exception ex)
            {
                loginStatus = false;
                this.DataFromNetsuiteLog.Fatal("SOFulfillmentUpdate: Login Netsuite failed. Exception : " + ex.ToString());

            }
            //
            if (loginStatus == true)
            {
                this.DataFromNetsuiteLog.Info("Retrieving customer from Netsuite.");
                //TBA
                netsuiteService.tokenPassport = createTokenPassport();
                AsyncResult custResponse = netsuiteService.getAsyncResult(r.rn_jobID, 1);
                AsyncSearchResult custSearchResult = (AsyncSearchResult)custResponse;
                custRecord = custSearchResult.searchResult.recordList;
                logout();
            }
            else
            {
                this.DataFromNetsuiteLog.Fatal("Login Netsuite failed.");
            }

            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(2400)
            };

            //using (TransactionScope scope1 = new TransactionScope()) 
            using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
            {
                this.DataFromNetsuiteLog.Info(custRecord.Count() + " records is retrieved.");
                for (int i = 0; i < custRecord.Length; i++)
                {
                    Customer cust = (Customer)custRecord[i];
                    var deleteCust = "delete from map_customer where mc_customer_internalID = '" + cust.internalId + "'";
                    entities.Database.ExecuteSqlCommand(deleteCust);

                    var insertCust = "insert into map_customer (mc_customer_internalID,mc_customer_name) values ('" + cust.internalId + "','" + cust.companyName + "')";
                    this.DataFromNetsuiteLog.Debug(insertCust);
                    entities.Database.ExecuteSqlCommand(insertCust);
                }

                var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                    "where rn_jobID = '" + r.rn_jobID + "'";
                this.DataFromNetsuiteLog.Debug(updateRequestNetsuite);
                entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                scope1.Complete();
                status = true;
            }
            return status;
        }
        /*
        private Boolean SRInventoryAdjustments(sdeEntities entities, RequestNetsuiteEntity r)
        {
            this.DataFromNetsuiteLog.Info("SRInventoryAdjustments ******");
            Boolean status = false;

            Boolean loginStatus = login();
            Record[] pffRecord = null;
            if (loginStatus == true)
            {
                this.DataFromNetsuiteLog.Info("Retrieving Inventory Adjustment from Netsuite.");
                AsyncResult pffResponse = service.getAsyncResult(r.rn_jobID, 1);
                AsyncSearchResult invAdjSearchResult = (AsyncSearchResult)pffResponse;
                pffRecord = invAdjSearchResult.searchResult.recordList;
                logout();
            }
            else
            {
                this.DataFromNetsuiteLog.Fatal("Login Netsuite failed.");
            }

            using (TransactionScope scope1 = new TransactionScope())
            {
                this.DataFromNetsuiteLog.Info(pffRecord.Count() + " records is retrieved.");
                for (int i = 0; i < pffRecord.Count(); i++)
                {
                    InventoryAdjustment invAdj = (InventoryAdjustment)pffRecord[i];
                    Guid adjID = Guid.NewGuid();
                    String adjCode = invAdj.tranId;
                    DateTime modifiedDate = invAdj.lastModifiedDate;
                    String adjType = "TEST - TYPE";
                    String adjDesc = "TEST - DESC";

                    var insertDirectAdj = "insert into netsuite_directadjustment (nsda_adjustment_ID,nsda_adjustment_code,nsda_adjustment_type,nsda_adjustment_description," +
                        "nsda_modifiedDate,nsda_createdDate,nsda_rangeTo) values ('" + adjID + "','" + adjCode + "','" + adjType + "','" + adjDesc + "'," +
                        "'" + modifiedDate.ToString("yyyy-MM-dd HH:mm:ss") + "','" + convertDateToString(DateTime.Now) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                    this.DataFromNetsuiteLog.Debug(insertDirectAdj);
                    entities.Database.ExecuteSqlCommand(insertDirectAdj);

                    for (int j = 0; j < invAdj.inventoryList.inventory.Count(); j++)
                    {
                        String itemID = SplitItemByISBN(invAdj.inventoryList.inventory[j].item.name);
                        //String desc = SplitItemByName(invAdj.inventoryList.inventory[j].item.name);
                        String desc = "";//To be continue - unable to retrieve product desc
                        Double adjQty = invAdj.inventoryList.inventory[j].adjustQtyBy;
                        String itemInternalID = invAdj.inventoryList.inventory[j].item.internalId;

                        var insertDirectAdjItem = "insert into netsuite_directadjustmentitem (nsdai_adjustment_ID,nsdai_item_ID,nsdai_itembusiness_description," +
                            "nsdai_adjustmentitem_qty,nsdai_item_internalID,nsdai_createdDate,nsdai_rangeTo) values ('" + adjID + "','" + itemID + "','" + desc + "','" + adjQty + "'," +
                            "'" + itemInternalID + "','" + convertDateToString(DateTime.Now) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                        this.DataFromNetsuiteLog.Debug(insertDirectAdjItem);
                        entities.Database.ExecuteSqlCommand(insertDirectAdjItem);
                    }
                }

                var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                    "where rn_jobID = '" + r.rn_jobID + "'";
                this.DataFromNetsuiteLog.Debug(updateRequestNetsuite);
                entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                scope1.Complete();
                status = true;
            }
            return status;
        }
         * */
        private Boolean ReturnAuthorizationsReceive(sdeEntities entities, RequestNetsuiteEntity r)
        {
            //Extract location from NetSuite which ready sync to IMAS to do receiving
            this.DataFromNetsuiteLog.Info("ReturnAuthorizationsReceive *****");
            //TBA
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            DataCenterAwareNetSuiteService netsuiteService = new DataCenterAwareNetSuiteService(account);

            String createdDate = convertDateToString(DateTime.Now);
            Boolean status = false;
            //Boolean loginStastus = login(@Resource.NETSUITE_LOGIN_EMAIL);
            Record[] pffRecord = null;
            //TBA
            ItemSearchBasic basic = new ItemSearchBasic()
            {
                internalId = new SearchMultiSelectField()
                {
                    @operator = SearchMultiSelectFieldOperator.anyOf,
                    operatorSpecified = true,
                    searchValue = new RecordRef[] {
                    new RecordRef() {
                    internalId = "14943"
                         }
                    }
                }
            };


            netsuiteService.Timeout = 820000000;
            netsuiteService.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();

            //  appinfo.applicationId = appID;
            netsuiteService.applicationInfo = appinfo;
            string loginEmail = "";
            loginEmail = @Resource.NETSUITE_LOGIN_EMAIL;
            tokenId = @Resource.ASIA_WEBSERVICE_TOKEN_ID;
            tokenSecret = @Resource.ASIA_WEBSERVICE_TOKEN_SECRET;


            Boolean loginStatus = false;
            try
            {
                Console.WriteLine("Success");
                netsuiteService.tokenPassport = createTokenPassport();
                SearchResult status1 = netsuiteService.search(basic);
                if (status1.status.isSuccess == true)
                {
                    this.DataFromNetsuiteLog.Debug("ReturnAuthorizationsReceive: Login Netsuite success.");
                    this.DataFromNetsuiteLog.Info("ReturnAuthorizationsReceive: Retrieving Return Authorization from Netsuite.");

                    loginStatus = true;
                }
                else
                {
                    loginStatus = false;
                }
            }
            catch (Exception ex)
            {
                loginStatus = false;
                this.DataFromNetsuiteLog.Fatal("SOFulfillmentUpdate: Login Netsuite failed. Exception : " + ex.ToString());

            }
            //
            if (loginStatus == true)
            {
                this.DataFromNetsuiteLog.Debug("ReturnAuthorizationsReceive: Login Netsuite success.");
                this.DataFromNetsuiteLog.Info("ReturnAuthorizationsReceive: Retrieving Return Authorization from Netsuite.");
                //TBA
                netsuiteService.tokenPassport = createTokenPassport();
                AsyncResult pffResponse = netsuiteService.getAsyncResult(r.rn_jobID, 1);
                AsyncSearchResult roSearchResult = (AsyncSearchResult)pffResponse;
                pffRecord = roSearchResult.searchResult.recordList;
                //Boolean logoutStatus = logout();
                //if (logoutStatus == true)
                //{
                //    this.DataFromNetsuiteLog.Debug("ReturnAuthorizationsReceive: Logout Netsuite success.");
                //}
                //else
                //{
                //    this.DataFromNetsuiteLog.Debug("ReturnAuthorizationsReceive: Logout Netsuite failed.");
                //}
            }
            else
            {
                this.DataFromNetsuiteLog.Fatal("ReturnAuthorizationsReceive: Login Netsuite failed.");
            }

            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(2400)
            };

            //using (TransactionScope scope1 = new TransactionScope()) 
            using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
            {
                if (pffRecord != null && pffRecord.Count() > 0)
                {
                    try
                    {
                        this.DataFromNetsuiteLog.Info("ReturnAuthorizationsReceive: " + pffRecord.Count() + " records is retrieved.");

                        for (int i = 0; i < pffRecord.Count(); i++)
                        {
                            ReturnAuthorization ra = (ReturnAuthorization)pffRecord[i];
                            Guid rID = Guid.NewGuid();
                            String[] tempSchID = ra.entity.name.Split(' ');
                            String schID = tempSchID[0];
                            String rNo = ra.tranId;
                            String tranDate = convertDateToString(ra.tranDate);
                            String rDesc = checkIsNull(ra.memo).Replace("'", "''");
                            String rRef = checkIsNull(ra.otherRefNum).Replace("'", "''");
                            Int32 rStatus = 0;
                            String rrInternalID = ra.internalId;
                            String netsuiteStatus = ra.status.ToUpper();
                            Int32 countItem = 0;

                            #region remove duplicate return authorization
                            var dupliReturn = (from re in entities.netsuite_return
                                               where re.nsr_rr_internalID == rrInternalID
                                               select re).ToList();

                            if (dupliReturn.Count() > 0)
                            {
                                foreach (var re in dupliReturn)
                                {
                                    var deleteReturn = "delete from netsuite_return where nsr_rr_internalID = '" + rrInternalID + "'";
                                    this.DataFromNetsuiteLog.Debug("ReturnAuthorizationsReceive: " + deleteReturn);
                                    entities.Database.ExecuteSqlCommand(deleteReturn);

                                    var deleteReturnItem = "delete from netsuite_returnitem where nsri_nsr_rr_ID = '" + re.nsr_rr_ID + "'";
                                    this.DataFromNetsuiteLog.Debug("ReturnAuthorizationsReceive: " + deleteReturnItem);
                                    entities.Database.ExecuteSqlCommand(deleteReturnItem);
                                }
                            }
                            #endregion

                            //var insertReturn = "insert into netsuite_return (nsr_rr_ID,nsr_rr_schID,nsr_rr_number,nsr_rr_internalID,nsr_rr_date,nsr_rr_description,nsr_rr_createdBy,nsr_rr_reference,nsr_rr_status,nsr_ns_status,nsr_createdDate,nsr_rangeTo) values " +
                            //    "('" + rID + "','" + schID + "','" + rNo + "','" + rrInternalID + "','" + tranDate + "','" + rDesc + "','NETSUITE','" + rRef + "','" + rStatus + "','" + netsuiteStatus + "','" + createdDate + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                            //this.DataFromNetsuiteLog.Debug("ReturnAuthorizationsReceive: " + insertReturn);
                            //entities.Database.ExecuteSqlCommand(insertReturn);
                            ////String itemInternalID = null;

                            for (int j = 0; j < ra.itemList.item.Count(); j++)
                            {
                                Guid riID = Guid.NewGuid();
                                String invoice = checkIsNull(checkRecordRefIsNull(ra.createdFrom));
                                //String isbn1 = ra.itemList.item[j].item.name;//SpiltItemByISBN(ra.itemList.item[j].item.name);
                                //String isbn2 = ra.itemList.item[j].item.name;//SpiltItemByISBN(ra.itemList.item[j].item.name);
                                Double returnQty = ra.itemList.item[j].quantity - ra.itemList.item[j].quantityReceived;
                                String riTranDate = convertDateToString(ra.tranDate);
                                String riStatus = "1";
                                String itemInternalID = ra.itemList.item[j].item.internalId;
                                //String packID = ra.itemList.item[j].item.name;//SpiltItemByISBN(ra.itemList.item[j].item.name);
                                String itemID = "";

                                var item = (from ii in entities.map_item
                                            where ii.mi_item_internalID == itemInternalID
                                            select ii).FirstOrDefault();

                                itemID = checkIsNull(item.mi_item_isbn);
                                if (itemID.Count() > 0)
                                {
                                    var insertReturnItem = "insert into netsuite_returnitem (nsri_rritem_ID,nsri_nsr_rr_ID,nsri_rritem_invoice,nsri_rritem_isbn,nsri_rritem_isbn2," +
                                    "nsri_rritem_return_qty,nsri_tranDate,nsri_rritem_status,nsri_item_internalID,nsri_pack_ID,nsri_createdDate,nsri_rangeTo) values ('" + riID + "','" + rID + "','" + invoice + "','" + itemID + "'," +
                                    "'" + itemID + "','" + returnQty + "','" + riTranDate + "','" + riStatus + "','" + itemInternalID + "','" + itemID + "','" + convertDateToString(DateTime.Now) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                    this.DataFromNetsuiteLog.Debug("ReturnAuthorizationsReceive: " + insertReturnItem);
                                    entities.Database.ExecuteSqlCommand(insertReturnItem);
                                    countItem++;
                                }
                            }
                            //To skip non-inventory item - WY-14.JAN.2015
                            if (countItem > 0)
                            {
                                var insertReturn = "insert into netsuite_return (nsr_rr_ID,nsr_rr_schID,nsr_rr_number,nsr_rr_internalID,nsr_rr_date,nsr_rr_description,nsr_rr_createdBy,nsr_rr_reference,nsr_rr_status,nsr_ns_status,nsr_createdDate,nsr_rangeTo) values " +
                                    "('" + rID + "','" + schID + "','" + rNo + "','" + rrInternalID + "','" + tranDate + "','" + rDesc + "','NETSUITE','" + rRef + "','" + rStatus + "','" + netsuiteStatus + "','" + createdDate + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                this.DataFromNetsuiteLog.Debug("ReturnAuthorizationsReceive: " + insertReturn);
                                entities.Database.ExecuteSqlCommand(insertReturn);
                            }

                            Int32 rowCount = i + 1;
                            String _refno = "NETSUITE.RA.SELECT." + r.rn_rangeFrom + "-" + r.rn_rangeTo;
                            var insertTask = "insert into requestnetsuite_task (rnt_task, rnt_description, rnt_refNO, rnt_jobID, rnt_status, rnt_createdDate, " +
                            "rnt_seqNO, rnt_createdFromInternalID, rnt_nsInternalId, rnt_updatedDate) values ('SELECT', '" + r.rn_sche_transactionType + "', '" + _refno + "', '" + r.rn_jobID + "'," +
                            "'TRUE', '" + convertDateToString(DateTime.Now) + "', '" + rowCount + "','', '" + rrInternalID + "', '" + convertDateToString(DateTime.Now) + "')";
                            this.DataFromNetsuiteLog.Debug("ReturnAuthorizationsReceive: " + insertTask);
                            entities.Database.ExecuteSqlCommand(insertTask);
                        }

                        var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                            "where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("ReturnAuthorizationsReceive: " + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                        scope1.Complete();

                        status = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataFromNetsuiteLog.Error("ReturnAuthorizationsReceive Exception: " + ex.ToString());
                    }
                }
                else
                {
                    var updateRequestNetsuite = "update requestnetsuite set rn_status='NO-DATA', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                        "where rn_jobID = '" + r.rn_jobID + "'";
                    this.DataFromNetsuiteLog.Debug("ReturnAuthorizationsReceive: " + updateRequestNetsuite);
                    entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                    scope1.Complete();

                }
                //scope1.Complete();
            }
            return status;
        }
        //Not Using
        private Boolean ReturnAuthorizationsRefund(sdeEntities entities, RequestNetsuiteEntity r)
        {
            this.DataFromNetsuiteLog.Info("ReturnAuthorizationsRefund *****");

            Boolean status = false;
            Boolean loginStastus = login(@Resource.NETSUITE_LOGIN_EMAIL);
            Record[] pffRecord = null;
            if (loginStastus == true)
            {
                this.DataFromNetsuiteLog.Debug("ReturnAuthorizationsRefund: Login Netsuite success.");
                this.DataFromNetsuiteLog.Info("ReturnAuthorizationsRefund: Retrieving Return Authorization from Netsuite.");
                AsyncResult pffResponse = service.getAsyncResult(r.rn_jobID, 1);
                AsyncSearchResult roSearchResult = (AsyncSearchResult)pffResponse;
                pffRecord = roSearchResult.searchResult.recordList;
                Boolean logoutStatus = logout();
                if (logoutStatus == true)
                {
                    this.DataFromNetsuiteLog.Debug("ReturnAuthorizationsRefund: Logout Netsuite success.");
                }
                else
                {
                    this.DataFromNetsuiteLog.Debug("ReturnAuthorizationsRefund: Logout Netsuite failed.");
                }
            }
            else
            {
                this.DataFromNetsuiteLog.Fatal("ReturnAuthorizationsRefund: Login Netsuite failed.");
            }

            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(2400)
            };

            //using (TransactionScope scope1 = new TransactionScope()) 
            using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
            {
                if (pffRecord != null && pffRecord.Count() > 0)
                {
                    try
                    {
                        this.DataFromNetsuiteLog.Info("ReturnAuthorizationsRefund: " + pffRecord.Count() + " records is retrieved.");
                        for (int i = 0; i < pffRecord.Count(); i++)
                        {
                            ReturnAuthorization ra = (ReturnAuthorization)pffRecord[i];
                            Guid rID = Guid.NewGuid();
                            String rNo = ra.tranId;
                            String rrInternalID = ra.internalId;
                            String tranDate = convertDateToString(ra.tranDate);

                            var insertReturnRefund = "insert into netsuite_returnrefund (nsrr_recID,nsrr_number,nsrr_internalID,nsrr_tranDate,nsrr_createdDate,nsrr_rangeTo) values " +
                                "('" + rID + "','" + rNo + "','" + rrInternalID + "','" + tranDate + "','" + convertDateToString(DateTime.Now) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                            this.DataFromNetsuiteLog.Debug("ReturnAuthorizationsRefund: " + insertReturnRefund);
                            entities.Database.ExecuteSqlCommand(insertReturnRefund);
                        }

                        var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                            "where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("ReturnAuthorizationsRefund: " + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                        status = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataFromNetsuiteLog.Error("ReturnAuthorizationsRefund Exception: " + ex.ToString());
                    }
                }
                else
                {
                    var updateRequestNetsuite = "update requestnetsuite set rn_status='NO-DATA', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                        "where rn_jobID = '" + r.rn_jobID + "'";
                    this.DataFromNetsuiteLog.Debug("ReturnAuthorizationsRefund: " + updateRequestNetsuite);
                    entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                }
                scope1.Complete();
            }
            return status;
        }
        private Boolean CashSales(sdeEntities entities, RequestNetsuiteEntity r)
        {
            //Extract cash sales from NetSuite which ready sync to IMAS to do inventory adjustment
            this.DataFromNetsuiteLog.Info("CashSales ******");
            //TBA
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            DataCenterAwareNetSuiteService netsuiteService = new DataCenterAwareNetSuiteService(account);

            Boolean status = false;

            //Boolean loginStatus = login(@Resource.NETSUITE_LOGIN_EMAIL);
            Record[] pffRecord = null;
            //TBA
            ItemSearchBasic basic = new ItemSearchBasic()
            {
                internalId = new SearchMultiSelectField()
                {
                    @operator = SearchMultiSelectFieldOperator.anyOf,
                    operatorSpecified = true,
                    searchValue = new RecordRef[] {
                    new RecordRef() {
                    internalId = "14943"
                         }
                    }
                }
            };

            netsuiteService.Timeout = 820000000;
            netsuiteService.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();

            //  appinfo.applicationId = appID;
            netsuiteService.applicationInfo = appinfo;
            string loginEmail = "";
            loginEmail = @Resource.NETSUITE_LOGIN_EMAIL;
            tokenId = @Resource.ASIA_WEBSERVICE_TOKEN_ID;
            tokenSecret = @Resource.ASIA_WEBSERVICE_TOKEN_SECRET;


            Boolean loginStatus = false;
            try
            {
                Console.WriteLine("Success");
                netsuiteService.tokenPassport = createTokenPassport();
                SearchResult status1 = netsuiteService.search(basic);
                if (status1.status.isSuccess == true)
                {
                    this.DataFromNetsuiteLog.Debug("CashSales: Login Netsuite success.");
                    this.DataFromNetsuiteLog.Info("CashSales: Retrieving Cash Sales from Netsuite.");
                    loginStatus = true;
                }
                else
                {
                    loginStatus = false;
                }
            }
            catch (Exception ex)
            {
                loginStatus = false;
                this.DataFromNetsuiteLog.Fatal("SOFulfillmentUpdate: Login Netsuite failed. Exception : " + ex.ToString());

            }
            //
            if (loginStatus == true)
            {
                this.DataFromNetsuiteLog.Debug("CashSales: Login Netsuite success.");
                this.DataFromNetsuiteLog.Info("CashSales: Retrieving Cash Sales from Netsuite.");
                //TBA
                netsuiteService.tokenPassport = createTokenPassport();
                AsyncResult pffResponse = netsuiteService.getAsyncResult(r.rn_jobID, 1);
                AsyncSearchResult invAdjSearchResult = (AsyncSearchResult)pffResponse;
                pffRecord = invAdjSearchResult.searchResult.recordList;
                //Boolean logoutStatus = logout();
                //if (logoutStatus == true)
                //{
                //    this.DataFromNetsuiteLog.Debug("CashSales: Logout Netsuite success.");
                //}
                //else
                //{
                //    this.DataFromNetsuiteLog.Debug("CashSales: Logout Netsuite failed.");
                //}
            }
            else
            {
                this.DataFromNetsuiteLog.Fatal("CashSales: Login Netsuite failed.");
            }


            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(2400)
            };

            //using (TransactionScope scope1 = new TransactionScope()) 
            using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
            {
                if (pffRecord != null && pffRecord.Count() > 0)
                {
                    try
                    {
                        this.DataFromNetsuiteLog.Info("CashSales: " + pffRecord.Count() + " records is retrieved.");
                        DateTime createdDate = DateTime.Now;

                        for (int i = 0; i < pffRecord.Count(); i++)
                        {
                            CashSale invAdj = (CashSale)pffRecord[i];
                            Guid adjID = Guid.NewGuid();
                            String adjCode = invAdj.tranId;
                            DateTime modifiedDate = invAdj.lastModifiedDate;
                            String adjType = "TRADE";
                            String adjDesc = invAdj.memo;
                            String cashSaleId = invAdj.internalId;

                            var insertDirectAdj = "insert into netsuite_adjustment (nsda_adjustment_ID,nsda_adjustment_code,nsda_adjustment_type,nsda_adjustment_description," +
                                "nsda_createdBy,nsda_createdDate,nsda_modifiedBy,nsda_modifiedDate,nsda_rangeTo) values ('" + adjID + "','" + adjCode + "','" + adjType + "','" + adjDesc + "'," +
                                "'NETSUITE','" + convertDateToString(createdDate) + "','NETSUITE','" + convertDateToString(modifiedDate) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                            this.DataFromNetsuiteLog.Debug("CashSales: " + insertDirectAdj);
                            entities.Database.ExecuteSqlCommand(insertDirectAdj);

                            for (int j = 0; j < invAdj.itemList.item.Count(); j++)
                            {
                                Guid adjItemID = Guid.NewGuid();
                                String itemInternalID = invAdj.itemList.item[j].item.internalId;
                                var query1 = (from q1 in entities.map_item
                                              where q1.mi_item_internalID == itemInternalID
                                              select q1.mi_item_isbn).FirstOrDefault();
                                String itemID = checkIsNull(query1);//isbn
                                String desc = invAdj.itemList.item[j].description;
                                Double adjQty = invAdj.itemList.item[j].quantity;

                                var insertDirectAdjItem = "insert into netsuite_adjustmentitem (nsdai_adjustmentItem_ID,nsdai_itemBusiness_ID,nsdai_adjustmentItem_qty," +
                                    "nsdai_nsda_adjustment_ID,nsdai_adjustmentItem_status,nsdai_adjustmentItem_remarks,nsdai_createdDate,nsdai_rangeTo) values ('" + adjItemID + "'," +
                                    "'" + itemID + "','" + adjQty + "','" + adjID + "',1,null,'" + convertDateToString(createdDate) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo)) + "')";
                                this.DataFromNetsuiteLog.Debug("CashSales: " + insertDirectAdjItem);
                                entities.Database.ExecuteSqlCommand(insertDirectAdjItem);
                            }

                            Int32 rowCount = i + 1;
                            String _refno = "NETSUITE.CS.SELECT." + r.rn_rangeFrom + "-" + r.rn_rangeTo;
                            var insertTask = "insert into requestnetsuite_task (rnt_task, rnt_description, rnt_refNO, rnt_jobID, rnt_status, rnt_createdDate, " +
                            "rnt_seqNO, rnt_createdFromInternalID, rnt_nsInternalId, rnt_updatedDate) values ('SELECT', '" + r.rn_sche_transactionType + "', '" + _refno + "', '" + r.rn_jobID + "'," +
                            "'TRUE', '" + convertDateToString(DateTime.Now) + "', '" + rowCount + "','', '" + cashSaleId + "', '" + convertDateToString(DateTime.Now) + "')";
                            this.DataFromNetsuiteLog.Debug("CashSales: " + insertTask);
                            entities.Database.ExecuteSqlCommand(insertTask);
                        }

                        var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                            "where rn_jobID = '" + r.rn_jobID + "'";
                        this.DataFromNetsuiteLog.Debug("CashSales: " + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                        scope1.Complete();

                        status = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataFromNetsuiteLog.Error("CashSales Exception: " + ex.ToString());
                    }
                }
                else
                {
                    var updateRequestNetsuite = "update requestnetsuite set rn_status='NO-DATA', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                        "where rn_jobID = '" + r.rn_jobID + "'";
                    this.DataFromNetsuiteLog.Debug("CashSales: " + updateRequestNetsuite);
                    entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                    scope1.Complete();

                }
                //scope1.Complete();
            }
            return status;
        }
        private Boolean NetsuiteResponse(sdeEntities entities, RequestNetsuiteEntity r, String action = "Add")
        {
            //TBA
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            DataCenterAwareNetSuiteService netsuiteService = new DataCenterAwareNetSuiteService(account);

            Boolean isValid = true;
            Boolean status = false;

            //Check status of creation or update transaction in NetSuite
            this.DataFromNetsuiteLog.Info("NetsuiteResponse " + r.rn_sche_transactionType + " *****************");
            WriteResponse[] writeRecordlist = null;

            //Status netsuiteStatus = new Status();
            //service.Timeout = 1000000000;
            //service.CookieContainer = new CookieContainer();

            //Passport passport = new Passport();
            //passport.account = @Resource.NETSUITE_LOGIN_ACCOUNT;
            //passport.email = @Resource.NETSUITE_LOGIN_EMAIL;

            //RecordRef role = new RecordRef();
            //role.internalId = @Resource.NETSUITE_LOGIN_ROLE_INTERNALID;

            //passport.role = role;
            //passport.password = @Resource.NETSUITE_LOGIN_PASSWORD;

            //netsuiteStatus = service.login(passport).status;
            //Boolean loginStastus = netsuiteStatus.isSuccess;
            //Boolean loginStastus = login(@Resource.NETSUITE_LOGIN_EMAIL);

            //TBA
            ItemSearchBasic basic = new ItemSearchBasic()
            {
                internalId = new SearchMultiSelectField()
                {
                    @operator = SearchMultiSelectFieldOperator.anyOf,
                    operatorSpecified = true,
                    searchValue = new RecordRef[] {
                    new RecordRef() {
                    internalId = "14943"
                         }
                    }
                }
            };


            netsuiteService.Timeout = 820000000;
            netsuiteService.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();

            //  appinfo.applicationId = appID;
            netsuiteService.applicationInfo = appinfo;
            string loginEmail = "";
            loginEmail = @Resource.NETSUITE_LOGIN_EMAIL;
            tokenId = @Resource.ASIA_WEBSERVICE_TOKEN_ID;
            tokenSecret = @Resource.ASIA_WEBSERVICE_TOKEN_SECRET;


            Boolean loginStatus = false;
            try
            {
                Console.WriteLine("Success");
                netsuiteService.tokenPassport = createTokenPassport();
                SearchResult status1 = netsuiteService.search(basic);
                if (status1.status.isSuccess == true)
                {
                    loginStatus = true;
                }
                else
                {
                    loginStatus = false;
                }
            }
            catch (Exception ex)
            {
                loginStatus = false;
                this.DataFromNetsuiteLog.Fatal("SOFulfillmentUpdate: Login Netsuite failed. Exception : " + ex.ToString());

            }
            //

            if (loginStatus == true)
            {
                this.DataFromNetsuiteLog.Debug("NetsuiteResponse " + r.rn_sche_transactionType + ": Login Netsuite success.");

                //TBA
                netsuiteService.tokenPassport = createTokenPassport();
                AsyncResult pffResponse = netsuiteService.getAsyncResult(r.rn_jobID, 1);
                if (pffResponse.ToString() == "sde.comNetsuiteServices.AsyncAddListResult")
                {
                    action = "Add";
                }
                else
                {
                    action = "Update";
                }

                if (action == "Add")
                {
                    AsyncAddListResult roAddResult = (AsyncAddListResult)pffResponse;
                    writeRecordlist = roAddResult.writeResponseList.writeResponse;
                }
                else
                {
                    AsyncUpdateListResult roUpdateResult = (AsyncUpdateListResult)pffResponse;
                    writeRecordlist = roUpdateResult.writeResponseList.writeResponse;
                }

                try
                {
                    //TBA
                    //netsuiteStatus = (service.logout()).status;
                    //if (netsuiteStatus.isSuccess == true)
                    //{
                    //    this.DataFromNetsuiteLog.Debug("NetsuiteResponse " + r.rn_sche_transactionType + ": Logout Netsuite success.");
                    //}
                    //else
                    //{
                    //    this.DataFromNetsuiteLog.Error("NetsuiteResponse " + r.rn_sche_transactionType + ": Logout Netsuite failed.");
                    //}
                }
                catch (Exception ex)
                {
                    isValid = false;
                    this.DataFromNetsuiteLog.Error("NetsuiteResponse Logout Exception " + r.rn_sche_transactionType + ": " + ex.ToString());
                }

                /*
                Boolean logoutStatus = logout();
                if (logoutStatus == true)
                {
                    this.DataFromNetsuiteLog.Debug("NetsuiteResponse: Logout Netsuite success.");
                }
                else
                {
                    this.DataFromNetsuiteLog.Debug("NetsuiteResponse: Logout Netsuite failed.");
                }
                */
            }
            else
            {
                isValid = false;
                this.DataFromNetsuiteLog.Fatal("NetsuiteResponse " + r.rn_sche_transactionType + ": Login Netsuite failed.");
            }

            status = false;
            if (isValid == true)
            {

                var option = new TransactionOptions
                {
                    IsolationLevel = IsolationLevel.RepeatableRead,
                    Timeout = TimeSpan.FromSeconds(2400)
                };

                using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        this.DataFromNetsuiteLog.Info("NetsuiteResponse " + r.rn_sche_transactionType + ": " + writeRecordlist.Count() + " records is retrieved.");
                        Int32 rowNo = 0;
                        Boolean rerunCN = false;

                        for (int i = 0; i < writeRecordlist.Count(); i++)
                        {
                            WriteResponse ra = (WriteResponse)writeRecordlist[i];
                            String recInternalId = string.Empty;
                            //For Sync history usage due to custom record not normal netsuite record
                            if (ra.baseRef != null)
                            {
                                if (ra.baseRef.ToString().Equals("sde.comNetsuiteServices.CustomRecordRef"))
                                {
                                    CustomRecordRef rec = (CustomRecordRef)ra.baseRef;
                                    if (rec == null)
                                    {
                                        recInternalId = "";
                                    }
                                    else
                                    {
                                        recInternalId = rec.internalId;
                                    }
                                }
                                else
                                {
                                    RecordRef rec = (RecordRef)ra.baseRef;
                                    recInternalId = checkRecordRefIsNull_internalID(rec);
                                }
                            }
                            else
                            {
                                RecordRef rec = (RecordRef)ra.baseRef;
                                recInternalId = checkRecordRefIsNull_internalID(rec);
                            }
                            String recStatus = ra.status.isSuccess.ToString();
                            String updatedDate = convertDateToString(DateTime.Now);
                            String errorMsg = "";

                            if (ra.status.statusDetail != null)
                            {
                                for (int j = 0; j < ra.status.statusDetail.Count(); j++)
                                {
                                    String code = ra.status.statusDetail[j].code.ToString();
                                    if (!code.Equals("WARNING"))
                                    {
                                        errorMsg += "" + (j + 1) + ". " + ra.status.statusDetail[j].code + ": " + ra.status.statusDetail[j].message.Replace("'", "''") + "<br />";
                                    }
                                }
                            }
                            /*
                            else
                            {
                                String rowNumber = rowNo.ToString();
                                var getID = (from row in entities.requestnetsuite_task
                                             where row.rnt_jobID == r.rn_jobID && row.rnt_seqNO == rowNumber
                                             select row).FirstOrDefault();
                                if (getID != null)
                                {
                                    switch (r.rn_sche_transactionType)
                                    {
                                        case "SSA-FULFILLMENT":
                                            String[] refNo = getID.rnt_refNO.Split('.');
                                            var updateStatus = "update wms_jobordscan_pack set josp_posted_ind = 'Y' where josp_pack_ID = '" + refNo[2] + "' ";
                                            this.DataFromNetsuiteLog.Debug(updateStatus);
                                            entities.Database.ExecuteSqlCommand(updateStatus);
                                            break;
                                    }
                                }
                            }
                            */
                            rowNo = i + 1;

                            var updateTask = "update requestnetsuite_task set rnt_status= '" + recStatus.ToUpper().ToString() + "', " +
                                "rnt_nsInternalId = '" + recInternalId + "', rnt_updatedDate='" + updatedDate + "', rnt_errorDesc = '" + errorMsg + "' where " +
                                "rnt_jobID = '" + r.rn_jobID + "' and rnt_seqNO='" + rowNo.ToString() + "'";
                            this.DataFromNetsuiteLog.Debug("NetsuiteResponse: " + updateTask);
                            entities.Database.ExecuteSqlCommand(updateTask);

                            #region NETSUITE PHASE II (TRX WITH AMOUNT)
                            var updSalesTrx = string.Empty;
                            if (recStatus.ToUpper().ToString() == "TRUE")
                            {
                                switch (r.rn_sche_transactionType)
                                {
                                    case "CPAS-SALES WITH PRICE INST":
                                    case "CPAS-SALES WITH PRICE CAD":
                                    case "CPAS-SALES UNSHIP":
                                    case "CPAS-CASH SALES":
                                    case "CPAS-TH SALES WITH PRICE INST":
                                    case "CPAS-TH SALES WITH PRICE CAD":
                                    case "CPAS-TH SALES UNSHIP":
                                    case "CPAS-TH CASH SALES":
                                    case "CPAS-PH SALES WITH PRICE INST":
                                    case "CPAS-PH SALES WITH PRICE CAD":
                                    case "CPAS-PH SALES UNSHIP":
                                    case "CPAS-PH CASH SALES":
                                        /*** #823 ***/
                                        updSalesTrx = "update cpas_salestransaction set cst_soInternalID = '" + recInternalId + "', " +
                                                      "cst_soUpdatedDate = '" + updatedDate + "' where " +
                                                      "cst_soJobID = '" + r.rn_jobID + "' and cst_soSeqNo = '" + rowNo.ToString() + "' ";
                                        this.DataFromNetsuiteLog.Debug("NetsuiteResponse: " + updSalesTrx);
                                        entities.Database.ExecuteSqlCommand(updSalesTrx);
                                        break;

                                    case "CPAS-FULFILLMENT":
                                    case "CPAS-TH FULFILLMENT":
                                    case "CPAS-PH FULFILLMENT":
                                        /*** #823 ***/
                                        updSalesTrx = "update cpas_salestransaction set cst_ifInternalID = '" + recInternalId + "', " +
                                                      "cst_ifUpdatedDate = '" + updatedDate + "' where " +
                                                      "cst_ifJobID = '" + r.rn_jobID + "' and cst_ifSeqNo = '" + rowNo.ToString() + "'";
                                        this.DataFromNetsuiteLog.Debug("NetsuiteResponse: " + updSalesTrx);
                                        entities.Database.ExecuteSqlCommand(updSalesTrx);
                                        break;

                                    case "CPAS-INVOICE":
                                    case "CPAS-TH INVOICE":
                                    case "CPAS-PH INVOICE":
                                        /*** #823 ***/
                                        updSalesTrx = "update cpas_salestransaction set cst_invInternalID = '" + recInternalId + "', " +
                                                      "cst_invUpdatedDate = '" + updatedDate + "' where " +
                                                      "cst_invJobID = '" + r.rn_jobID + "' and cst_invSeqNo = '" + rowNo.ToString() + "'";
                                        this.DataFromNetsuiteLog.Debug("NetsuiteResponse: " + updSalesTrx);
                                        entities.Database.ExecuteSqlCommand(updSalesTrx);
                                        break;

                                    case "CPAS-PH INVOICE GIFI":
                                        /*** #823 ***/
                                        updSalesTrx = "update cpas_salestransaction set cst_invGIFIInternalID = '" + recInternalId + "', " +
                                                      "cst_invGIFIUpdatedDate = '" + updatedDate + "' where " +
                                                      "cst_invGIFIProgressStatus = '" + r.rn_jobID + "' and cst_invGIFISeqNo = '" + rowNo.ToString() + "'";
                                        this.DataFromNetsuiteLog.Debug("NetsuiteResponse: " + updSalesTrx);
                                        entities.Database.ExecuteSqlCommand(updSalesTrx);
                                        break;

                                    case "CPAS-PH VENDOR BILL":
                                        /*** #823 ***/
                                        updSalesTrx = "update cpas_salestransaction set cst_vbInternalID = '" + recInternalId + "', " +
                                                      "cst_vbUpdatedDate = '" + updatedDate + "' where " +
                                                      "cst_vbProgressStatus = '" + r.rn_jobID + "' and cst_vbSeqNo = '" + rowNo.ToString() + "'";
                                        this.DataFromNetsuiteLog.Debug("NetsuiteResponse: " + updSalesTrx);
                                        entities.Database.ExecuteSqlCommand(updSalesTrx);
                                        break;

                                    case "CPAS-PH VENDOR BILL GIFI":
                                        /*** #823 ***/
                                        updSalesTrx = "update cpas_salestransaction set cst_vbGIFIInternalID = '" + recInternalId + "', " +
                                                      "cst_vbGIFIUpdatedDate = '" + updatedDate + "' where " +
                                                      "cst_vbGIFIProgressStatus = '" + r.rn_jobID + "' and cst_vbGIFISeqNo = '" + rowNo.ToString() + "'";
                                        this.DataFromNetsuiteLog.Debug("NetsuiteResponse: " + updSalesTrx);
                                        entities.Database.ExecuteSqlCommand(updSalesTrx);
                                        break;

                                    case "CPAS-RETURN AUTHORIZATION INST RETN":
                                    case "CPAS-RETURN AUTHORIZATION INST RETN SUSPEND":
                                    case "CPAS-RETURN AUTHORIZATION INST RNCO":
                                    case "CPAS-RETURN AUTHORIZATION INST RNCO SUSPEND":
                                    case "CPAS-RETURN AUTHORIZATION CAD":
                                    case "CPAS-RETURN AUTHORIZATION CASH SALES":
                                    case "CPAS-TH RETURN AUTHORIZATION INST RETN":
                                    case "CPAS-TH RETURN INST RETN SUSPEND":
                                    case "CPAS-TH RETURN AUTHORIZATION INST RNCO":
                                    case "CPAS-TH RETURN INST RNCO SUSPEND":
                                    case "CPAS-TH RETURN AUTHORIZATION CAD":
                                    case "CPAS-TH RETURN AUTHORIZATION CASH SALES":
                                    case "CPAS-PH RETURN AUTHORIZATION INST RETN":
                                    case "CPAS-PH RETURN AUTHORIZATION INST RNCO":
                                    case "CPAS-PH RETURN INST RNCO SUSPEND":
                                    case "CPAS-PH RETURN AUTHORIZATION CAD":
                                    case "CPAS-PH RETURN AUTHORIZATION CASH SALES":
                                        /*** #825 ***/
                                        updSalesTrx = "update cpas_otherstransaction set cot_trxInternalID = '" + recInternalId + "', " +
                                                      "cot_trxUpdatedDate = '" + updatedDate + "' where " +
                                                      "cot_trxProgressStatus = '" + r.rn_jobID + "' and cot_seqNo = '" + rowNo.ToString() + "'";
                                        this.DataFromNetsuiteLog.Debug("NetsuiteResponse: " + updSalesTrx);
                                        entities.Database.ExecuteSqlCommand(updSalesTrx);
                                        break;

                                    case "CPAS-RETURN AUTHORIZE ITEMS RECEIPT":
                                    case "CPAS-TH RETURN AUTHORIZE ITEMS RECEIPT":
                                    case "CPAS-PH RETURN AUTHORIZE ITEMS RECEIPT":
                                        /*** #825 ***/
                                        updSalesTrx = "update cpas_otherstransaction set cot_irInternalID = '" + recInternalId + "', " +
                                                      "cot_irUpdateDate = '" + updatedDate + "' where " +
                                                      "cot_irProgressStatus = '" + r.rn_jobID + "' and cot_irSeqNo = '" + rowNo.ToString() + "'";
                                        this.DataFromNetsuiteLog.Debug("NetsuiteResponse: " + updSalesTrx);
                                        entities.Database.ExecuteSqlCommand(updSalesTrx);
                                        break;

                                    case "CPAS-RETURN AUTHORIZE CREDIT MEMO":
                                    case "CPAS-TH RETURN AUTHORIZE CREDIT MEMO":
                                    case "CPAS-PH RETURN AUTHORIZE CREDIT MEMO":
                                        /*** #825 ***/
                                        updSalesTrx = "update cpas_otherstransaction set cot_cnInternalID = '" + recInternalId + "', " +
                                                      "cot_cnUpdatedDate = '" + updatedDate + "' where " +
                                                      "cot_cnProgressStatus = '" + r.rn_jobID + "' and cot_cnSeqNo = '" + rowNo.ToString() + "'";
                                        this.DataFromNetsuiteLog.Debug("NetsuiteResponse: " + updSalesTrx);
                                        entities.Database.ExecuteSqlCommand(updSalesTrx);
                                        break;

                                    case "CPAS-PH RETURN CREDIT MEMO RETN GIFI":
                                    case "CPAS-PH RETURN CREDIT MEMO RNCO GIFI":
                                    case "CPAS-PH RETURN CREDIT MEMO RNCO SUSPEND GIFI":
                                        /*** #825 ***/
                                        updSalesTrx = "update cpas_otherstransaction set cot_cnGIFIInternalID = '" + recInternalId + "', " +
                                                      "cot_cnGIFIUpdatedDate = '" + updatedDate + "' where " +
                                                      "cot_cnGIFIProgressStatus = '" + r.rn_jobID + "' and cot_cnGIFISeqNo = '" + rowNo.ToString() + "'";
                                        this.DataFromNetsuiteLog.Debug("NetsuiteResponse: " + updSalesTrx);
                                        entities.Database.ExecuteSqlCommand(updSalesTrx);
                                        break;

                                    case "CPAS-PAYMENT INST":
                                    case "CPAS-PAYMENT CAD":
                                    case "CPAS-PAYMENT COD":
                                    case "CPAS-TH PAYMENT INST":
                                    case "CPAS-TH PAYMENT CAD":
                                    case "CPAS-TH PAYMENT COD":
                                    case "CPAS-PH PAYMENT INST":
                                    case "CPAS-PH PAYMENT CAD":
                                    case "CPAS-PH PAYMENT COD":
                                        //kang added - update cpas_payment payment internal id. Create new field internal id and pmupdateddate
                                        updSalesTrx = "update cpas_payment set cpm_pmInternalID = '" + recInternalId + "', " +
                                                          "cpm_pmUpdatedDate = '" + updatedDate + "' where " +
                                                          "cpm_ProgressStatus = '" + r.rn_jobID + "' and cpm_ProgressStatusSeqNo = '" + rowNo.ToString() + "'";
                                        this.DataFromNetsuiteLog.Debug("NetsuiteResponse: " + updSalesTrx);
                                        entities.Database.ExecuteSqlCommand(updSalesTrx);
                                        // rerunCN = true;
                                        break;

                                    case "CPAS-PH VENDOR CREDIT":
                                        /*** #825 ***/
                                        updSalesTrx = "update cpas_otherstransaction set cot_vcInternalID = '" + recInternalId + "', " +
                                                      "cot_vcUpdatedDate = '" + updatedDate + "' where " +
                                                      "cot_vcProgressStatus = '" + r.rn_jobID + "' and cot_vcSeqNo = '" + rowNo.ToString() + "'";
                                        this.DataFromNetsuiteLog.Debug("NetsuiteResponse: " + updSalesTrx);
                                        entities.Database.ExecuteSqlCommand(updSalesTrx);
                                        break;

                                    case "CPAS-PH VENDOR CREDIT GIFI":
                                        /*** #825 ***/
                                        updSalesTrx = "update cpas_otherstransaction set cot_vcGIFIInternalID = '" + recInternalId + "', " +
                                                      "cot_vcGIFIUpdatedDate = '" + updatedDate + "' where " +
                                                      "cot_vcGIFIProgressStatus = '" + r.rn_jobID + "' and cot_vcGIFISeqNo = '" + rowNo.ToString() + "'";
                                        this.DataFromNetsuiteLog.Debug("NetsuiteResponse: " + updSalesTrx);
                                        entities.Database.ExecuteSqlCommand(updSalesTrx);
                                        break;

                                    case "UPD-STATUS.BCAS-SALES ORDER": //"BCAS-SALES ORDER FULFILLMENT"
                                        updSalesTrx = "update bcas_salestransaction set bst_ifInternalID = '" + recInternalId + "', " +
                                                      "bst_ifUpdatedDate = '" + updatedDate + "' where " +
                                                      "bst_ifJobID = '" + r.rn_jobID + "' and bst_ifSeqNo = '" + rowNo.ToString() + "'";
                                        this.DataFromNetsuiteLog.Debug("NetsuiteResponse: " + updSalesTrx);
                                        entities.Database.ExecuteSqlCommand(updSalesTrx);
                                        break;

                                    case "BCAS-INVOICE":
                                        updSalesTrx = "update bcas_salestransaction set bst_invInternalID = '" + recInternalId + "', " +
                                                      "bst_invUpdatedDate = '" + updatedDate + "' where " +
                                                      "bst_invJobID = '" + r.rn_jobID + "' and bst_invSeqNo = '" + rowNo.ToString() + "'";
                                        this.DataFromNetsuiteLog.Debug("NetsuiteResponse: " + updSalesTrx);
                                        entities.Database.ExecuteSqlCommand(updSalesTrx);
                                        break;

                                    case "BCAS-CREDIT MEMO":
                                        updSalesTrx = "update bcas_otherstransaction set bot_trxInternalID = '" + recInternalId + "', " +
                                                      "bot_trxUpdatedDate = '" + updatedDate + "' where " +
                                                      "bot_trxProgressStatus = '" + r.rn_jobID + "' and bot_seqNo = '" + rowNo.ToString() + "'";
                                        this.DataFromNetsuiteLog.Debug("NetsuiteResponse: " + updSalesTrx);
                                        entities.Database.ExecuteSqlCommand(updSalesTrx);
                                        break;
                                    case "SSA-DROPSHIP FULFILLMENT":
                                        updSalesTrx = "update netsuite_dropshipfulfillment set dsf_iffInternalID = '" + recInternalId + "', " +
                                                      "dsf_iffUpdatedDate = '" + updatedDate + "' where " +
                                                      "dsf_iffProgress = '" + r.rn_jobID + "' and dsf_iffSeqNo = '" + rowNo.ToString() + "'";
                                        this.DataFromNetsuiteLog.Debug("NetsuiteResponse: " + updSalesTrx);
                                        entities.Database.ExecuteSqlCommand(updSalesTrx);
                                        break;

                                    case "UPD-STATUS.DROPSHIP INVOICE":
                                    case "UPD-STATUS.DROPSHIP BOINVOICE":
                                        updSalesTrx = "update netsuite_dropshipfulfillment set dsf_invInternalID = '" + recInternalId + "', " +
                                                      "dsf_invUpdatedDate = '" + updatedDate + "' where " +
                                                      "dsf_invProgress = '" + r.rn_jobID + "' and dsf_invSeqNo = '" + rowNo.ToString() + "'";
                                        this.DataFromNetsuiteLog.Debug("NetsuiteResponse: " + updSalesTrx);
                                        entities.Database.ExecuteSqlCommand(updSalesTrx);
                                        break;
                                }
                            }
                            else
                            {
                                if (r.rn_sche_transactionType == "CPAS-RETURN AUTHORIZE CREDIT MEMO" || r.rn_sche_transactionType == "CPAS-TH RETURN AUTHORIZE CREDIT MEMO"
                                    || r.rn_sche_transactionType == "CPAS-PH RETURN AUTHORIZE CREDIT MEMO")
                                {
                                    updSalesTrx = "update cpas_otherstransaction set cot_cnProgressStatus=null, " +
                                                  "cot_cnSeqNo=null where " +
                                                  "cot_cnProgressStatus = '" + r.rn_jobID + "' and cot_cnSeqNo = '" + rowNo.ToString() + "'";
                                    this.DataFromNetsuiteLog.Debug("NetsuiteResponse: " + updSalesTrx);
                                    entities.Database.ExecuteSqlCommand(updSalesTrx);

                                    rerunCN = true;
                                }
                                else if (r.rn_sche_transactionType == "CPAS-PH RETURN CREDIT MEMO RETN GIFI" || r.rn_sche_transactionType == "CPAS-PH RETURN CREDIT MEMO RNCO GIFI"
                                    || r.rn_sche_transactionType == "CPAS-PH RETURN CREDIT MEMO RNCO SUSPEND GIFI")
                                {
                                    updSalesTrx = "update cpas_otherstransaction set cot_cnGIFIProgressStatus=null, " +
                                                  "cot_cnGIFISeqNo=null where " +
                                                  "cot_cnGIFIProgressStatus = '" + r.rn_jobID + "' and cot_cnGIFISeqNo = '" + rowNo.ToString() + "'";
                                    this.DataFromNetsuiteLog.Debug("NetsuiteResponse: " + updSalesTrx);
                                    entities.Database.ExecuteSqlCommand(updSalesTrx);

                                    rerunCN = true;
                                }
                            }
                            #endregion
                        }

                        if (writeRecordlist.Count() > 0)
                        {
                            var updateRequestNetsuite = "";
                            if (rerunCN == false)
                            {
                                updateRequestNetsuite = "update requestnetsuite set rn_status = 'UPLOADED', rn_updatedDate='" + convertDateToString(DateTime.Now) + "' " +
                                     "where rn_jobID = '" + r.rn_jobID + "'";

                                //ANET-28 LIMIT To COMMIT
                                if (r.rn_sche_transactionType == "SSA-UPDATE COMMIT TAG BEFORE")
                                {
                                    if (r.rn_status.ToString() == "FINISHED" || r.rn_status.ToString() == "FINISHEDWITHERRORS")
                                    {
                                        // Start the task after commit tag is updated to avaiable quantity. Insert in request netsuite table to start ssa fulfillment
                                        var insertRequestNetsuite = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status,rn_updatedDate,rn_rangeFrom,rn_rangeTo) values " +
                                            "('SSA-FULFILLMENT','" + convertDateToString(DateTime.Now) + "','START','" + convertDateToString(DateTime.Now) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeFrom.Value)) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo.Value)) + "')";
                                        this.DataFromNetsuiteLog.Debug("StartItemFulfillment: " + insertRequestNetsuite);
                                        entities.Database.ExecuteSqlCommand(insertRequestNetsuite);
                                    }
                                }

                                //ANET-28 LIMIT To COMMIT
                                if (r.rn_sche_transactionType == "SSA-UPDATE COMMIT TAG BEFORE PM")
                                {
                                    if (r.rn_status.ToString() == "FINISHED" || r.rn_status.ToString() == "FINISHEDWITHERRORS")
                                    {
                                        // Start the task after commit tag is updated to avaiable quantity. Insert in request netsuite table to start ssa fulfillment
                                        var insertRequestNetsuite = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status,rn_updatedDate,rn_rangeFrom,rn_rangeTo) values " +
                                            "('SSA-FULFILLMENT PM','" + convertDateToString(DateTime.Now) + "','START','" + convertDateToString(DateTime.Now) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeFrom.Value)) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo.Value)) + "')";
                                        this.DataFromNetsuiteLog.Debug("StartItemFulfillment: " + insertRequestNetsuite);
                                        entities.Database.ExecuteSqlCommand(insertRequestNetsuite);
                                    }
                                }

                                //ANET-28 LIMIT To COMMIT
                                if (r.rn_sche_transactionType == "SSA-FULFILLMENT")
                                {
                                    if (r.rn_status.ToString() == "FINISHED" || r.rn_status.ToString() == "FINISHEDWITHERRORS")
                                    {
                                        //ANET-28 LIMIT To COMMIT
                                        // Start the task after item fulfillment is done. Insert in request netsuite table to start after fulfillment task
                                        var insertRequestNetsuite = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status,rn_updatedDate,rn_rangeFrom,rn_rangeTo) values " +
                                                   "('SSA-UPDATE COMMIT TAG AFTER ITEM FULFILLMENT','" + convertDateToString(DateTime.Now) + "','START','" + convertDateToString(DateTime.Now) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeFrom.Value)) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo.Value)) + "')";
                                        this.DataFromNetsuiteLog.Debug("StartSSAUpdateCommitTagAfterItemFulfillment: " + insertRequestNetsuite);
                                        entities.Database.ExecuteSqlCommand(insertRequestNetsuite);

                                        //scope1.Complete();
                                    }
                                }

                                //ANET-28 LIMIT To COMMIT
                                if (r.rn_sche_transactionType == "SSA-FULFILLMENT PM")
                                {
                                    if (r.rn_status.ToString() == "FINISHED" || r.rn_status.ToString() == "FINISHEDWITHERRORS")
                                    {
                                        //ANET-28 LIMIT To COMMIT
                                        // Start the task after item fulfillment is done. Insert in request netsuite table to start after fulfillment task
                                        var insertRequestNetsuite = "insert into requestnetsuite (rn_sche_transactionType,rn_createdDate,rn_status,rn_updatedDate,rn_rangeFrom,rn_rangeTo) values " +
                                                   "('SSA-UPDATE COMMIT TAG AFTER ITEM FULFILLMENT PM','" + convertDateToString(DateTime.Now) + "','START','" + convertDateToString(DateTime.Now) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeFrom.Value)) + "','" + convertDateToString(Convert.ToDateTime(r.rn_rangeTo.Value)) + "')";
                                        this.DataFromNetsuiteLog.Debug("StartSSAUpdateCommitTagAfterItemFulfillment: " + insertRequestNetsuite);
                                        entities.Database.ExecuteSqlCommand(insertRequestNetsuite);

                                        //scope1.Complete();
                                    }
                                }
                            }
                            else
                            {
                                //mainly for CN and Payment
                                updateRequestNetsuite = "update requestnetsuite set rn_status = 'START', rn_jobID=null, rn_updatedDate='" + convertDateToString(DateTime.Now) + "' " +
                                     "where rn_jobID = '" + r.rn_jobID + "'";

                            }
                            this.DataFromNetsuiteLog.Debug("NetsuiteResponse: " + updateRequestNetsuite);
                            entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                        }
                        else
                        {
                            var updateRequestNetsuite = "update requestnetsuite set rn_status = 'NO-DATA', rn_updatedDate='" + convertDateToString(DateTime.Now) + "' " +
                                "where rn_jobID = '" + r.rn_jobID + "'";
                            this.DataFromNetsuiteLog.Debug("NetsuiteResponse: " + updateRequestNetsuite);
                            entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                        }



                        scope1.Complete();
                        status = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataFromNetsuiteLog.Error("NetsuiteResponse Exception " + r.rn_sche_transactionType + ": " + ex.ToString());
                    }
                }
            }

            return status;
        }

        //Update netsuite_dropshipfulfillment table for Dropship Auto Invoice creation purpose - WY-19.MAR.2015 
        private Boolean DropshipFulfillmentUpdate(sdeEntities entities, Int32 requestNetsuiteID, DateTime rangeFrom, DateTime rangeTo)
        {
            this.DataFromNetsuiteLog.Info("DropshipFulfillmentUpdate: Extracting SO fulfillment info from wms_jobordscan_pack ********");

            Boolean status = false;
            String createdDate = convertDateToString(DateTime.Now);
            String convertRangeFrom = convertDateToString(rangeFrom);
            String convertRangeTo = convertDateToString(rangeTo);
            Guid gjob_id = Guid.NewGuid();
            Int32 rowCount = 0;
            var dropshipCountry = new string[] { "SG", "TH" };

            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(2400)
            };

            using (TransactionScope scope1 = new TransactionScope())
            {
                try
                {
                    var qFulfill = (from q1 in entities.wms_jobordscan
                                    join q2 in entities.netsuite_jobmo on q1.jos_moNo equals q2.nsjm_moNo
                                    where (q1.jos_businessChannel_code == "ET" || q1.jos_businessChannel_code == "BC")
                                   && (q1.jos_rangeTo > rangeFrom && q1.jos_rangeTo <= rangeTo)
                                   && dropshipCountry.Contains(q2.nsjm_country)
                                   && q1.jos_dropshipFulfillmentProgress == null
                                    select new
                                    {
                                        q1.jos_moNo,
                                        q2.nsjm_moNo_internalID,
                                        q2.is_fas
                                        //isFirstRun = q1.jos_dropshipFulfillmentProgress == null ? "Y" : "N",
                                        //q1.jos_job_ID
                                    }).Distinct().ToList();

                    //List<string> _IDjob = new List<string>();
                    //foreach (var qJobID in queryAA)
                    //{
                    //    if (qJobID.isFirstRun == "Y")
                    //    {
                    //        _IDjob.Add(qJobID.jos_job_ID);
                    //    }
                    //}

                    //var qFulfill = (from d in queryAA
                    //                where d.isFirstRun == "Y"
                    //                select new { d.jos_moNo, d.nsjm_moNo_internalID }).Distinct().ToList();

                    if (qFulfill.Count() > 0)
                    {
                        foreach (var q1 in qFulfill)
                        {
                            if (q1.is_fas == "Y")
                            {
                                var dropshipmo = (from newso in entities.netsuite_newso
                                                  where newso.nt1_moNo_internalID == q1.nsjm_moNo_internalID
                                                  select newso.nt1_SEIS_moNo).ToList().FirstOrDefault();

                                if (dropshipmo != null)
                                {
                                    this.DataFromNetsuiteLog.Info("DropshipFulfillmentUpdate: Extracting Dropshipment Sales Order Information ********");
                                    this.DataFromNetsuiteLog.Info("dropshipmono : " + dropshipmo);
                                    //To take dropshipment information
                                    var allInvItems = (from newso in entities.netsuite_newso
                                                       where newso.nt1_moNo == dropshipmo
                                                       select new
                                                       {
                                                           newso.nt1_moNo_internalID,
                                                           newso.nt1_customer_internalID,
                                                           newso.nt1_moNo,
                                                           newso.nt1_discount,
                                                           newso.nt1_discountItem_internalID,
                                                           newso.nt1_ponumber,
                                                           newso.nt1_subsidiary,
                                                           newso.nt1_itemID,
                                                           newso.nt1_item_internalID,
                                                           newso.nt1_rate,
                                                           newso.nt1_pricelevel_InternalID,
                                                           newso.nt1_pricelevel,
                                                           newso.nt1_status,
                                                           newso.nt1_ordQty,
                                                           newso.nt1_basedprice,
                                                           newso.nt1_class_name,
                                                           newso.nt1_is_fas
                                                       }).ToList();

                                    #region group items and sum ordQty
                                    var invItems = from a in allInvItems
                                                   let b = new
                                                   {
                                                       nt1_moNo_internalID = a.nt1_moNo_internalID,
                                                       nt1_customer_internalID = a.nt1_customer_internalID,
                                                       nt1_moNo = a.nt1_moNo,
                                                       nt1_discount = a.nt1_discount,
                                                       nt1_discountItem_internalID = a.nt1_discountItem_internalID,
                                                       nt1_ponumber = a.nt1_ponumber,
                                                       nt1_subsidiary = a.nt1_subsidiary,
                                                       nt1_itemID = a.nt1_itemID,
                                                       nt1_item_internalID = a.nt1_item_internalID,
                                                       nt1_rate = a.nt1_rate,
                                                       nt1_pricelevel_InternalID = a.nt1_pricelevel_InternalID,
                                                       nt1_pricelevel = a.nt1_pricelevel,
                                                       nt1_status = a.nt1_status,
                                                       nt1_basedprice = a.nt1_basedprice, //#1050
                                                       nt1_class_name = a.nt1_class_name,
                                                       nt1_is_fas = a.nt1_is_fas
                                                   }
                                                   group a by b into c
                                                   select new
                                                   {
                                                       nt1_moNo_internalID = c.Key.nt1_moNo_internalID,
                                                       nt1_customer_internalID = c.Key.nt1_customer_internalID,
                                                       nt1_moNo = c.Key.nt1_moNo,
                                                       nt1_discount = c.Key.nt1_discount,
                                                       nt1_discountItem_internalID = c.Key.nt1_discountItem_internalID,
                                                       nt1_ponumber = c.Key.nt1_ponumber,
                                                       nt1_subsidiary = c.Key.nt1_subsidiary,
                                                       nt1_itemID = c.Key.nt1_itemID,
                                                       nt1_item_internalID = c.Key.nt1_item_internalID,
                                                       nt1_rate = c.Key.nt1_rate,
                                                       nt1_pricelevel_InternalID = c.Key.nt1_pricelevel_InternalID,
                                                       nt1_pricelevel = c.Key.nt1_pricelevel,
                                                       nt1_status = c.Key.nt1_status,
                                                       nt1_basedprice = c.Key.nt1_basedprice, //#1050
                                                       nt1_ordQty = c.Sum(a => a.nt1_ordQty),
                                                       nt1_class_name = c.Key.nt1_class_name,
                                                       nt1_is_fas = c.Key.nt1_is_fas
                                                   };
                                    #endregion
                                    this.DataFromNetsuiteLog.Info("mono : " + dropshipmo + "invItems.Count() :  " + invItems.Count());
                                    if (invItems.Count() > 0)
                                    {
                                        this.DataFromNetsuiteLog.Info("mono 2: " + dropshipmo + "invItems.Count() :  " + q1.jos_moNo);
                                        #region fulfill Quantity


                                        Dictionary<string, int> dictFulfillItems = new Dictionary<string, int>();
                                        //var qFulfillItem = (from josp in entities.wms_jobordscan_pack
                                        //                    join jomp in entities.netsuite_jobordmaster_pack on josp.josp_pack_ID equals jomp.nsjomp_jobOrdMaster_pack_ID
                                        //                    join jompd in entities.netsuite_jobordmaster_packdetail on jomp.nsjomp_jobOrdMaster_pack_ID equals jompd.nsjompd_jobOrdMaster_pack_ID
                                        //                    join jos in entities.wms_jobordscan on new { a = josp.josp_jobID, b = josp.josp_moNo } equals new { a = jos.jos_job_ID, b = jos.jos_moNo }
                                        //                    join nsjom in entities.netsuite_jobordmaster on new { a = jomp.nsjomp_jobOrdMaster_ID, b = jomp.nsjomp_job_ID } equals new { a = nsjom.nsjom_jobOrdMaster_ID, b = nsjom.nsjom_nsj_job_ID }
                                        //                    join nsjmc in entities.netsuite_jobmocls on new { a = nsjom.nsjom_jobCls_id, b = nsjom.nsjom_nsj_job_ID } equals new { a = nsjmc.nsjmc_jobMoCls_ID, b = nsjmc.nsjmc_jobID }
                                        //                    where josp.josp_moNo == q1.jos_moNo
                                        //                    && josp.josp_rangeTo > rangeFrom
                                        //                    && josp.josp_rangeTo <= rangeTo
                                        //                    && jos.jos_dropshipFulfillmentProgress == null
                                        //                    //&& _IDjob.Contains(josp.josp_jobID)
                                        //                    select new { jompd.nsjompd_item_internalID, josp.josp_pack_ID, qty = josp.josp_ordFulFill, nsjmc.nsjmc_clsNo });


                                        string connStr99 = ConfigurationManager.ConnectionStrings["mysql2"].ConnectionString;
                                        MySqlConnection mysqlCon99 = new MySqlConnection(connStr99);



                                        var qfulfillItemQry = " SELECT jompd.nsjompd_item_internalID, josp.josp_pack_ID,  SUM(josp.josp_ordFulFill) AS qty, nsjmc.nsjmc_clsNo FROM wms_jobordscan_pack josp ";
                                        qfulfillItemQry += " JOIN  netsuite_jobordmaster_pack jomp ON josp.josp_pack_ID = jomp.nsjomp_jobOrdMaster_pack_ID ";
                                        qfulfillItemQry += " JOIN   netsuite_jobordmaster_packdetail  jompd ON jomp.nsjomp_jobOrdMaster_pack_ID = jompd.nsjompd_jobOrdMaster_pack_ID ";
                                        qfulfillItemQry += " JOIN   wms_jobordscan  jos ON josp.josp_jobID =  jos.jos_job_ID AND josp.josp_moNo =  jos.jos_moNo ";
                                        qfulfillItemQry += " JOIN   netsuite_jobordmaster nsjom ON jomp.nsjomp_jobOrdMaster_ID = nsjom.nsjom_jobOrdMaster_ID ";
                                        qfulfillItemQry += " JOIN   netsuite_jobmocls nsjmc ON nsjom.nsjom_jobCls_id = nsjmc.nsjmc_jobMoCls_ID  AND  nsjom.nsjom_nsj_job_ID = nsjmc.nsjmc_jobID ";
                                        qfulfillItemQry += " WHERE josp.josp_moNo = '" + q1.jos_moNo + "' ";
                                        qfulfillItemQry += " AND josp.josp_rangeTo > '" + convertRangeFrom + "' AND josp.josp_rangeTo <= '" + convertRangeTo + "' AND jos.jos_dropshipFulfillmentProgress IS NULL ";
                                        qfulfillItemQry += " GROUP BY nsjompd_item_internalID, josp_pack_id ";

                                        mysqlCon99.Open();

                                        MySqlCommand cmd99 = new MySqlCommand(qfulfillItemQry, mysqlCon99);
                                        MySqlDataReader dtr99 = cmd99.ExecuteReader();



                                        string itemInternalID, class_name, fulFillQty = "";

                                        while (dtr99.Read())
                                        {

                                            itemInternalID = (dtr99.GetValue(0) == DBNull.Value) ? String.Empty : dtr99.GetString(0);
                                            class_name = (dtr99.GetValue(3) == DBNull.Value) ? String.Empty : dtr99.GetString(3);
                                            fulFillQty = (dtr99.GetValue(2) == DBNull.Value) ? String.Empty : dtr99.GetString(2);

                                            this.DataFromNetsuiteLog.Info("itemInternalID : " + itemInternalID + class_name + " ---- " + fulFillQty);

                                            dictFulfillItems.Add(itemInternalID + class_name, Convert.ToInt32(fulFillQty));

                                        }

                                        dtr99.Close();
                                        cmd99.Dispose();
                                        mysqlCon99.Close();

                                        //  var qFulfillItem = qFulfillItem2.ToList();

                                        this.DataFromNetsuiteLog.Info("mono 3: ");

                                        //var groupQ2 = from p in qFulfillItem
                                        //              let k = new
                                        //              {
                                        //                  // pack_id = p.josp_pack_ID,
                                        //                  itemInternalID = p.nsjompd_item_internalID,
                                        //                  class_name = p.nsjmc_clsNo
                                        //              }
                                        //              group p by k into g
                                        //              select new
                                        //              {
                                        //                  // pack_id = g.Key.pack_id,
                                        //                  itemInternalID = g.Key.itemInternalID,
                                        //                  fulFillQty = g.Sum(p => p.qty),
                                        //                  class_name = g.Key.class_name
                                        //              };

                                        //this.DataFromNetsuiteLog.Info("mono 4: ");
                                        //foreach (var item in groupQ2)
                                        //{
                                        //    this.DataFromNetsuiteLog.Info("itemInternalID : " + item.itemInternalID + item.class_name +" ---- "+item.fulFillQty);
                                        //    dictFulfillItems.Add(item.itemInternalID + item.class_name, Convert.ToInt32(item.fulFillQty));
                                        //}
                                        #endregion

                                        foreach (var items in invItems)
                                        {
                                            Int32 wmsFulfilledQty = 0;
                                            Int32 newDictValue = 0;

                                            if (dictFulfillItems.ContainsKey(items.nt1_item_internalID + items.nt1_class_name))
                                            {
                                                Int32 dictValue = dictFulfillItems[items.nt1_item_internalID + items.nt1_class_name];


                                                if (Convert.ToInt32(items.nt1_ordQty) <= dictValue)
                                                {
                                                    wmsFulfilledQty = Convert.ToInt32(items.nt1_ordQty);
                                                    newDictValue = dictValue - Convert.ToInt32(items.nt1_ordQty);
                                                }
                                                else
                                                {
                                                    wmsFulfilledQty = dictValue;
                                                    newDictValue = 0;
                                                }
                                                dictFulfillItems[items.nt1_item_internalID] = newDictValue;//update dict value to latest value after deduction;
                                                //var deleteDSF = "DELETE FROM netsuite_dropshipfulfillment WHERE dsf_GMYmono = '" + q1.jos_moNo + "' AND dsf_lastfulfilleddate = '" + createdDate + "' AND dsf_ordQty= '" + items.nt1_ordQty + "' AND dsf_item_internalID ='" + items.nt1_item_internalID + "'";
                                                //this.DataFromNetsuiteLog.Debug("DropshipFulfillmentUpdate: " + deleteDSF);
                                                //entities.Database.ExecuteSqlCommand(deleteDSF);


                                                var insertDSF = "INSERT INTO netsuite_dropshipfulfillment (dsf_GMYmono,dsf_GMYmono_internalID,dsf_dropshipmono,dsf_dropshipmono_internalID,dsf_subsidiary,dsf_status, " +
                                                                "dsf_itemID,dsf_item_internalID,dsf_pricelevel,dsf_pricelevel_InternalID,dsf_rate,dsf_ordQty,dsf_wmsfulfilledqty,dsf_createdinvoiceqty,dsf_discount, " +
                                                                "dsf_discountItem_internalID,dsf_ponumber,dsf_customer_InternalID,dsf_lastfulfilleddate,dsf_basedprice, dsf_is_fas, dsf_class_name) VALUES " +
                                                                "('" + q1.jos_moNo + "','" + q1.nsjm_moNo_internalID + "','" + items.nt1_moNo + "','" + items.nt1_moNo_internalID + "','" + checkIsNull(items.nt1_subsidiary).Replace("'", "''") + "', " +
                                                                "'" + checkIsNull(items.nt1_status).Replace("'", "''") + "','" + checkIsNull(items.nt1_itemID).Replace("'", "''") + "','" + items.nt1_item_internalID + "','" + checkIsNull(items.nt1_pricelevel).Replace("'", "''") + "'," +
                                                                "'" + items.nt1_pricelevel_InternalID + "','" + items.nt1_rate + "','" + items.nt1_ordQty + "','" + wmsFulfilledQty.ToString() + "','0','" + checkIsNull(items.nt1_discount.ToString()).Replace("'", "''") + "','" + checkIsNull(items.nt1_discountItem_internalID).Replace("'", "''") + "'," +
                                                                "'" + checkIsNull(items.nt1_ponumber).Replace("'", "''") + "','" + items.nt1_customer_internalID + "','" + createdDate + "','" + items.nt1_basedprice + "', '" + items.nt1_is_fas + "','" + items.nt1_class_name + "')";
                                                this.DataFromNetsuiteLog.Debug("DropshipFulfillmentUpdate: " + insertDSF);
                                                entities.Database.ExecuteSqlCommand(insertDSF);

                                            }

                                        }
                                        rowCount++;



                                    }
                                    var updJobOrdScan = "UPDATE wms_jobordscan SET jos_dropshipFulfillmentProgress = '" + gjob_id.ToString() + "' WHERE jos_dropshipFulfillmentProgress is null " +
                                                        "and jos_moNo = '" + q1.jos_moNo + "' " +
                                                        "and jos_rangeTo > '" + convertDateToString(rangeFrom) + "' " +
                                                        "and jos_rangeTo <= '" + convertDateToString(rangeTo) + "'";
                                    this.DataFromNetsuiteLog.Debug("DropshipFulfillmentUpdate: " + updJobOrdScan);
                                    entities.Database.ExecuteSqlCommand(updJobOrdScan);

                                }

                                //end of FAS orders
                            }
                            else
                            {
                                //To take dropshipment SO number from GMY SO number
                                var dropshipmo = (from newso in entities.netsuite_newso
                                                  where newso.nt1_moNo_internalID == q1.nsjm_moNo_internalID
                                                  select newso.nt1_SEIS_moNo).ToList().FirstOrDefault();

                                if (dropshipmo != null)
                                {
                                    this.DataFromNetsuiteLog.Info("DropshipFulfillmentUpdate: Extracting Dropshipment Sales Order Information ********");
                                    //To take dropshipment information
                                    var allInvItems = (from newso in entities.netsuite_newso
                                                       where newso.nt1_moNo == dropshipmo
                                                       select new
                                                       {
                                                           newso.nt1_moNo_internalID,
                                                           newso.nt1_customer_internalID,
                                                           newso.nt1_moNo,
                                                           newso.nt1_discount,
                                                           newso.nt1_discountItem_internalID,
                                                           newso.nt1_ponumber,
                                                           newso.nt1_subsidiary,
                                                           newso.nt1_itemID,
                                                           newso.nt1_item_internalID,
                                                           newso.nt1_rate,
                                                           newso.nt1_pricelevel_InternalID,
                                                           newso.nt1_pricelevel,
                                                           newso.nt1_status,
                                                           newso.nt1_ordQty,
                                                           newso.nt1_basedprice
                                                       }).ToList();

                                    #region group items and sum ordQty
                                    var invItems = from a in allInvItems
                                                   let b = new
                                                   {
                                                       nt1_moNo_internalID = a.nt1_moNo_internalID,
                                                       nt1_customer_internalID = a.nt1_customer_internalID,
                                                       nt1_moNo = a.nt1_moNo,
                                                       nt1_discount = a.nt1_discount,
                                                       nt1_discountItem_internalID = a.nt1_discountItem_internalID,
                                                       nt1_ponumber = a.nt1_ponumber,
                                                       nt1_subsidiary = a.nt1_subsidiary,
                                                       nt1_itemID = a.nt1_itemID,
                                                       nt1_item_internalID = a.nt1_item_internalID,
                                                       nt1_rate = a.nt1_rate,
                                                       nt1_pricelevel_InternalID = a.nt1_pricelevel_InternalID,
                                                       nt1_pricelevel = a.nt1_pricelevel,
                                                       nt1_status = a.nt1_status,
                                                       nt1_basedprice = a.nt1_basedprice //#1050
                                                   }
                                                   group a by b into c
                                                   select new
                                                   {
                                                       nt1_moNo_internalID = c.Key.nt1_moNo_internalID,
                                                       nt1_customer_internalID = c.Key.nt1_customer_internalID,
                                                       nt1_moNo = c.Key.nt1_moNo,
                                                       nt1_discount = c.Key.nt1_discount,
                                                       nt1_discountItem_internalID = c.Key.nt1_discountItem_internalID,
                                                       nt1_ponumber = c.Key.nt1_ponumber,
                                                       nt1_subsidiary = c.Key.nt1_subsidiary,
                                                       nt1_itemID = c.Key.nt1_itemID,
                                                       nt1_item_internalID = c.Key.nt1_item_internalID,
                                                       nt1_rate = c.Key.nt1_rate,
                                                       nt1_pricelevel_InternalID = c.Key.nt1_pricelevel_InternalID,
                                                       nt1_pricelevel = c.Key.nt1_pricelevel,
                                                       nt1_status = c.Key.nt1_status,
                                                       nt1_basedprice = c.Key.nt1_basedprice, //#1050
                                                       nt1_ordQty = c.Sum(a => a.nt1_ordQty)
                                                   };
                                    #endregion

                                    if (invItems.Count() > 0)
                                    {
                                        #region fulfill Quantity
                                        Dictionary<string, int> dictFulfillItems = new Dictionary<string, int>();
                                        var qFulfillItem = (from josp in entities.wms_jobordscan_pack
                                                            join jomp in entities.netsuite_jobordmaster_pack on josp.josp_pack_ID equals jomp.nsjomp_jobOrdMaster_pack_ID
                                                            join jompd in entities.netsuite_jobordmaster_packdetail on jomp.nsjomp_jobOrdMaster_pack_ID equals jompd.nsjompd_jobOrdMaster_pack_ID
                                                            join jos in entities.wms_jobordscan on new { a = josp.josp_jobID, b = josp.josp_moNo } equals new { a = jos.jos_job_ID, b = jos.jos_moNo }
                                                            where josp.josp_moNo == q1.jos_moNo
                                                            && josp.josp_rangeTo > rangeFrom
                                                            && josp.josp_rangeTo <= rangeTo
                                                            && jos.jos_dropshipFulfillmentProgress == null
                                                            //&& _IDjob.Contains(josp.josp_jobID)
                                                            select new { jompd.nsjompd_item_internalID, josp.josp_pack_ID, qty = josp.josp_ordFulFill });



                                        var groupQ2 = from p in qFulfillItem
                                                      let k = new
                                                      {
                                                          itemInternalID = p.nsjompd_item_internalID
                                                      }
                                                      group p by k into g
                                                      select new
                                                      {
                                                          itemInternalID = g.Key.itemInternalID,
                                                          fulFillQty = g.Sum(p => p.qty)
                                                      };

                                        foreach (var item in groupQ2)
                                        {
                                            dictFulfillItems.Add(item.itemInternalID, Convert.ToInt32(item.fulFillQty));
                                        }
                                        #endregion

                                        foreach (var items in invItems)
                                        {
                                            Int32 wmsFulfilledQty = 0;
                                            Int32 newDictValue = 0;

                                            if (dictFulfillItems.ContainsKey(items.nt1_item_internalID))
                                            {
                                                Int32 dictValue = dictFulfillItems[items.nt1_item_internalID];


                                                if (Convert.ToInt32(items.nt1_ordQty) <= dictValue)
                                                {
                                                    wmsFulfilledQty = Convert.ToInt32(items.nt1_ordQty);
                                                    newDictValue = dictValue - Convert.ToInt32(items.nt1_ordQty);
                                                }
                                                else
                                                {
                                                    wmsFulfilledQty = dictValue;
                                                    newDictValue = 0;
                                                }
                                                dictFulfillItems[items.nt1_item_internalID] = newDictValue;//update dict value to latest value after deduction;


                                                var insertDSF = "INSERT INTO netsuite_dropshipfulfillment (dsf_GMYmono,dsf_GMYmono_internalID,dsf_dropshipmono,dsf_dropshipmono_internalID,dsf_subsidiary,dsf_status, " +
                                                                "dsf_itemID,dsf_item_internalID,dsf_pricelevel,dsf_pricelevel_InternalID,dsf_rate,dsf_ordQty,dsf_wmsfulfilledqty,dsf_createdinvoiceqty,dsf_discount, " +
                                                                "dsf_discountItem_internalID,dsf_ponumber,dsf_customer_InternalID,dsf_lastfulfilleddate,dsf_basedprice) VALUES " +
                                                                "('" + q1.jos_moNo + "','" + q1.nsjm_moNo_internalID + "','" + items.nt1_moNo + "','" + items.nt1_moNo_internalID + "','" + checkIsNull(items.nt1_subsidiary).Replace("'", "''") + "', " +
                                                                "'" + checkIsNull(items.nt1_status).Replace("'", "''") + "','" + checkIsNull(items.nt1_itemID).Replace("'", "''") + "','" + items.nt1_item_internalID + "','" + checkIsNull(items.nt1_pricelevel).Replace("'", "''") + "'," +
                                                                "'" + items.nt1_pricelevel_InternalID + "','" + items.nt1_rate + "','" + items.nt1_ordQty + "','" + wmsFulfilledQty.ToString() + "','0','" + checkIsNull(items.nt1_discount.ToString()).Replace("'", "''") + "','" + checkIsNull(items.nt1_discountItem_internalID).Replace("'", "''") + "'," +
                                                                "'" + checkIsNull(items.nt1_ponumber).Replace("'", "''") + "','" + items.nt1_customer_internalID + "','" + createdDate + "','" + items.nt1_basedprice + "')";
                                                this.DataFromNetsuiteLog.Debug("DropshipFulfillmentUpdate: " + insertDSF);
                                                entities.Database.ExecuteSqlCommand(insertDSF);

                                            }

                                        }
                                        rowCount++;
                                    }
                                    var updJobOrdScan = "UPDATE wms_jobordscan SET jos_dropshipFulfillmentProgress = '" + gjob_id.ToString() + "' WHERE jos_dropshipFulfillmentProgress is null " +
                                                        "and jos_moNo = '" + q1.jos_moNo + "' " +
                                                        "and jos_rangeTo > '" + convertDateToString(rangeFrom) + "' " +
                                                        "and jos_rangeTo <= '" + convertDateToString(rangeTo) + "'";
                                    this.DataFromNetsuiteLog.Debug("DropshipFulfillmentUpdate: " + updJobOrdScan);
                                    entities.Database.ExecuteSqlCommand(updJobOrdScan);

                                }

                            }

                        }
                        status = true;
                    }
                }
                catch (Exception ex)
                {
                    this.DataFromNetsuiteLog.Error("DropshipFulfillmentUpdate Exception: " + ex.ToString());
                    status = false;
                    if (rowCount == 0)
                    {
                        rowCount++;
                    }
                }

                try
                {
                    if (status == true)
                    {
                        if (rowCount > 0)
                        {
                            var updateRequestNetsuite = "update requestnetsuite set rn_jobID='" + gjob_id.ToString() + "'," +
                                "rn_updatedDate = '" + convertDateToString(DateTime.Now) + "', rn_status='UPLOADED' where rn_id = '" + requestNetsuiteID + "'";
                            this.DataFromNetsuiteLog.Debug("DropshipFulfillmentUpdate: " + updateRequestNetsuite);
                            entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                            scope1.Complete();
                        }
                        else if (rowCount == 0)
                        {
                            var updateRequestNetsuite = "update requestnetsuite set rn_jobID='NO-DATA',rn_status='NO-DATA'," +
                                "rn_updatedDate = '" + convertDateToString(DateTime.Now) + "' where rn_id = '" + requestNetsuiteID + "'";
                            this.DataFromNetsuiteLog.Debug("DropshipFulfillmentUpdate: " + updateRequestNetsuite);
                            entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                            scope1.Complete();
                        }
                    }
                    else if (rowCount == 0)
                    {
                        var updateRequestNetsuite = "update requestnetsuite set rn_jobID='NO-DATA',rn_status='NO-DATA'," +
                            "rn_updatedDate = '" + convertDateToString(DateTime.Now) + "' where rn_id = '" + requestNetsuiteID + "'";
                        this.DataFromNetsuiteLog.Debug("DropshipFulfillmentUpdate: " + updateRequestNetsuite);
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);
                        scope1.Complete();
                    }
                }
                catch (Exception ex)
                {
                    this.DataFromNetsuiteLog.Error("DropshipFulfillmentUpdate Exception: " + ex.ToString());
                }
            }
            return status;
        }
        //#endregion

        #region Push Queue Function
        //Send netsuite_job to MSMQ
        private Boolean Job(sdeEntities entities, String transactionType, String MQjob, String createdDate, DateTime rangeFrom, DateTime rangeTo, Int32 sequence, Int32 mq_id)
        {
            List<JOB> jobList = new List<JOB>();
            Boolean bTranStatus = false;
            try
            {
                this.DataReqInMQLog.Debug("Job: Retrieving netsuite_job.");

                var readJob = (from j in entities.netsuite_job
                               where (j.nsj_businessChannel_ID == "4cc04da6-f632-4c49-bd9e-cfc7a48a8e01" ||
                               j.nsj_businessChannel_ID == "365c2b8b-9a20-4840-ae50-cfc7a48a8e01")
                               && j.nsj_rangeTo > rangeFrom && j.nsj_rangeTo <= rangeTo
                               select j).ToList();

                var readJobItem = (from ji in entities.netsuite_jobitem
                                   join j in entities.netsuite_job on ji.nsji_nsj_jobID equals j.nsj_jobID
                                   where (j.nsj_businessChannel_ID == "4cc04da6-f632-4c49-bd9e-cfc7a48a8e01" || j.nsj_businessChannel_ID == "365c2b8b-9a20-4840-ae50-cfc7a48a8e01")
                                   && ji.nsji_rangeTo > rangeFrom && ji.nsji_rangeTo <= rangeTo
                                   select ji).ToList();

                this.DataReqInMQLog.Info("Job: " + readJob.Count() + " records to push.");

                if (readJob.Count() > 0 && readJobItem.Count > 0)
                {
                    foreach (var j in readJob)
                    {
                        JOB job = new JOB();
                        job.jobID = j.nsj_jobID;
                        job.businessChannel = checkIsNull(j.nsj_businessChannel_ID);
                        job.countryTag = checkIsNull(j.nsj_country_tag);
                        job.createdBy = checkIsNull(j.nsj_createdBy);
                        job.createdDate = Convert.ToDateTime(j.nsj_createdDate);
                        job.jobActive = j.nsj_job_active;
                        job.jobDesc = checkIsNull(j.nsj_job_description);
                        job.moCount = Convert.ToInt32(j.nsj_job_mo_count);
                        job.jobNo = checkIsNull(j.nsj_job_no);
                        job.jobStatus = checkIsNull(j.nsj_job_status.ToString());
                        job.modifiedBy = checkIsNull(j.nsj_modifiedBy);
                        job.modifiedDate = Convert.ToDateTime(j.nsj_modifiedDate);
                        jobList.Add(job);
                    }
                    String queueLabel = "SALES ORDER" + " - " + MQjob + " > " + transactionType;
                    bTranStatus = JobMQ(entities, queueLabel, jobList, transactionType, createdDate, sequence, mq_id);
                    this.DataReqInMQLog.Debug("Job: Sending netsuite_job to MQ with label: " + queueLabel + ".(Inserted Successfully: " + bTranStatus + ")");
                }
                else
                {
                    var updateRequestMQStatus = "update requestmq set rmq_status = 'NO-DATA', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                    entities.Database.ExecuteSqlCommand(updateRequestMQStatus);
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("Job Exception: " + ex.ToString());
            }
            return bTranStatus;
        }
        //Send netsuite_jobmo to MSMQ
        private Boolean JobMO(sdeEntities entities, String transactionType, String MQjob, String createdDate, DateTime rangeFrom, DateTime rangeTo, Int32 sequence, Int32 mq_id)
        {
            List<JobMO> jobList = new List<JobMO>();
            Boolean bTranStatus = false;
            try
            {
                this.DataReqInMQLog.Debug("JobMO: Retrieving netsuite_jobmo.");
                var readJob = (from jm in entities.netsuite_jobmo
                               join j in entities.netsuite_job on jm.nsjm_nsj_job_ID equals j.nsj_jobID
                               where (j.nsj_businessChannel_ID == "4cc04da6-f632-4c49-bd9e-cfc7a48a8e01" ||
                               j.nsj_businessChannel_ID == "365c2b8b-9a20-4840-ae50-cfc7a48a8e01")
                               && jm.nsjm_rangeTo > rangeFrom && jm.nsjm_rangeTo <= rangeTo
                               select jm).ToList();

                var readJobItem = (from ji in entities.netsuite_jobitem
                                   join j in entities.netsuite_job on ji.nsji_nsj_jobID equals j.nsj_jobID
                                   where (j.nsj_businessChannel_ID == "4cc04da6-f632-4c49-bd9e-cfc7a48a8e01" ||
                               j.nsj_businessChannel_ID == "365c2b8b-9a20-4840-ae50-cfc7a48a8e01")
                                   && ji.nsji_rangeTo > rangeFrom && ji.nsji_rangeTo <= rangeTo
                                   select ji).ToList();

                this.DataReqInMQLog.Info("JobMO: " + readJob.Count() + " records to push.");

                if (readJob.Count() > 0 && readJobItem.Count > 0)
                {
                    foreach (var j in readJob)
                    {
                        JobMO jm = new JobMO();
                        jm.jobID = j.nsjm_nsj_job_ID;
                        jm.moNo = j.nsjm_moNo;
                        jm.jobMoID = j.nsjm_jobMo_ID;
                        jm.consignmentNote = checkIsNull(j.nsjm_consignmentNote);
                        jm.clsCnt = Convert.ToInt32(j.nsjm_clsCnt);
                        jm.contactPerson = checkIsNull(j.nsjm_contactPerson);
                        jm.country = checkIsNull(j.nsjm_country);
                        jm.deliveryAdd = checkIsNull(j.nsjm_deliveryAdd);
                        jm.deliveryAdd2 = checkIsNull(j.nsjm_deliveryAdd_2);
                        jm.deliveryAdd3 = checkIsNull(j.nsjm_deliveryAdd_3);
                        jm.ordRecNoCnt = Convert.ToInt32(j.nsjm_ordRecNoCnt);
                        jm.postCode = checkIsNull(j.nsjm_postCode);
                        jm.processPeriod = checkIsNull(j.nsjm_processPeriod);
                        jm.schID = checkIsNull(j.nsjm_schID);
                        jm.schName = checkIsNull(j.nsjm_schName);
                        jm.status = checkIsNull(j.nsjm_status);
                        jm.telNo = checkIsNull(j.nsjm_telNo);
                        jm.ordWeight = Convert.ToDecimal(j.nsjm_ordWeight);
                        jm.schName2 = checkIsNull(j.nsjm_schName_2);
                        jm.jobNo = checkIsNull(j.nsjm_jobNo);
                        jm.creditTerm = checkIsNull(j.nsjm_creditTerm);
                        jm.moCurrency = checkIsNull(j.nsjm_moCurrency);
                        jm.deliveryType = checkIsNull(j.nsjm_deliveryType);
                        jm.moLisence = checkIsNull(j.nsjm_moLisence);
                        jm.moTransMode = checkIsNull(j.nsjm_moTransMode);
                        jm.moNoInternalID = checkIsNull(j.nsjm_moNo_internalID);
                        jm.createdDate = Convert.ToDateTime(j.nsjm_createdDate);
                        /*new field shipdate -- Mohan 17042018*/
                        jm.shipdate = Convert.ToDateTime(j.nsjm_shipDate);
                        jobList.Add(jm);
                    }
                    String queueLabel = "SALES ORDER" + " - " + MQjob + " > " + transactionType;
                    bTranStatus = JobMOMQ(entities, queueLabel, jobList, transactionType, createdDate, sequence, mq_id);
                    this.DataReqInMQLog.Debug("JobMO: Sending netsuite_jobmo to MQ with label: " + queueLabel + ".(Inserted Successfully: " + bTranStatus + ")");
                }
                else
                {
                    var updateRequestMQStatus = "update requestmq set rmq_status = 'NO-DATA', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                    entities.Database.ExecuteSqlCommand(updateRequestMQStatus);
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("JobMO Exception: " + ex.ToString());
            }
            return bTranStatus;
        }
        //Send netsuite_jobmocls to MSMQ
        private Boolean JobMOCls(sdeEntities entities, String transactionType, String MQjob, String createdDate, DateTime rangeFrom, DateTime rangeTo, Int32 sequence, Int32 mq_id)
        {
            List<JobMOCls> jobList = new List<JobMOCls>();
            Boolean bTranStatus = false;
            try
            {
                this.DataReqInMQLog.Debug("JobMOCls: Retrieving netsuite_jobmocls.");
                var readJob = (from jmc in entities.netsuite_jobmocls
                               join j in entities.netsuite_job on jmc.nsjmc_jobID equals j.nsj_jobID
                               where (j.nsj_businessChannel_ID == "4cc04da6-f632-4c49-bd9e-cfc7a48a8e01" ||
                               j.nsj_businessChannel_ID == "365c2b8b-9a20-4840-ae50-cfc7a48a8e01")
                               && jmc.nsjmc_rangeTo > rangeFrom && jmc.nsjmc_rangeTo <= rangeTo
                               select jmc).ToList();

                var readJobItem = (from ji in entities.netsuite_jobitem
                                   join j in entities.netsuite_job on ji.nsji_nsj_jobID equals j.nsj_jobID
                                   where (j.nsj_businessChannel_ID == "4cc04da6-f632-4c49-bd9e-cfc7a48a8e01" ||
                               j.nsj_businessChannel_ID == "365c2b8b-9a20-4840-ae50-cfc7a48a8e01")
                                   && ji.nsji_rangeTo > rangeFrom && ji.nsji_rangeTo <= rangeTo
                                   select ji).ToList();

                this.DataReqInMQLog.Info("JobMO: " + readJob.Count() + " records to push.");

                if (readJob.Count() > 0 && readJobItem.Count > 0)
                {
                    foreach (var j in readJob)
                    {
                        JobMOCls jmc = new JobMOCls();
                        jmc.jobMoClsID = j.nsjmc_jobMoCls_ID;
                        jmc.jobID = j.nsjmc_jobID;
                        jmc.jobMoID = j.nsjmc_jobMo_ID;
                        jmc.clsNo = j.nsjmc_clsNo;
                        jmc.teacherName = j.nsjmc_teacherName;
                        jmc.createdDate = Convert.ToDateTime(j.nsjmc_createdDate);
                        jobList.Add(jmc);
                    }
                    String queueLabel = "SALES ORDER" + " - " + MQjob + " > " + transactionType;
                    bTranStatus = JobMOClsMQ(entities, queueLabel, jobList, transactionType, createdDate, sequence, mq_id);
                    this.DataReqInMQLog.Debug("JobMOCls: Sending netsuite_jobmocls to MQ with label: " + queueLabel + ".(Inserted Successfully: " + bTranStatus + ")");
                }
                else
                {
                    var updateRequestMQStatus = "update requestmq set rmq_status = 'NO-DATA', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                    entities.Database.ExecuteSqlCommand(updateRequestMQStatus);
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("JobMO Exception: " + ex.ToString());
            }
            return bTranStatus;
        }
        //Send netsuite_jobmo_address to MSMQ
        private Boolean JobMOAddress(sdeEntities entities, String transactionType, String MQjob, String createdDate, DateTime rangeFrom, DateTime rangeTo, Int32 sequence, Int32 mq_id)
        {
            List<JobMoAddress> jmoList = new List<JobMoAddress>();
            Boolean bTranStatus = false;
            try
            {
                this.DataReqInMQLog.Debug("JobMOAddress: Retrieving netsuite_jobmo_address.");
                var readJob = (from jma in entities.netsuite_jobmo_address
                               join j in entities.netsuite_job on jma.nsjma_nsj_jobID equals j.nsj_jobID
                               where (j.nsj_businessChannel_ID == "4cc04da6-f632-4c49-bd9e-cfc7a48a8e01" ||
                               j.nsj_businessChannel_ID == "365c2b8b-9a20-4840-ae50-cfc7a48a8e01")
                               && jma.nsjma_rangeTo > rangeFrom && jma.nsjma_rangeTo <= rangeTo
                               select jma).ToList();

                var readJobItem = (from ji in entities.netsuite_jobitem
                                   join j in entities.netsuite_job on ji.nsji_nsj_jobID equals j.nsj_jobID
                                   where (j.nsj_businessChannel_ID == "4cc04da6-f632-4c49-bd9e-cfc7a48a8e01" ||
                               j.nsj_businessChannel_ID == "365c2b8b-9a20-4840-ae50-cfc7a48a8e01")
                                   && ji.nsji_rangeTo > rangeFrom && ji.nsji_rangeTo <= rangeTo
                                   select ji).ToList();

                this.DataReqInMQLog.Info("JobMOAddress: " + readJob.Count() + " records to push.");

                if (readJob.Count() > 0 && readJobItem.Count > 0)
                {
                    foreach (var j in readJob)
                    {
                        JobMoAddress jma = new JobMoAddress();
                        jma.jobMoAddrID = j.nsjma_jobMoAddress_ID;
                        jma.jobMoID = j.nsjma_nsjm_jobMoID;
                        jma.jobID = j.nsjma_nsj_jobID;
                        jma.addrName = checkIsNull(j.nsjma_jobMoAddress_name);
                        jma.addr1 = checkIsNull(j.nsjma_jobMoAddress_1);
                        jma.addr2 = checkIsNull(j.nsjma_jobMoAddress_2);
                        jma.addr3 = checkIsNull(j.nsjma_jobMoAddress_3);
                        jma.addrRef = checkIsNull(j.nsjma_jobMoAddress_ref);
                        jma.moNo = checkIsNull(j.nsjma_moNo);
                        jma.contactName = checkIsNull(j.nsjma_jobMoAddress_contact);
                        jma.deliveryType = checkIsNull(j.nsjma_jobMoAddress_deliveryType);
                        jma.createdDate = Convert.ToDateTime(j.nsjma_createdDate);
                        jma.addrTag = checkIsNull(j.nsjma_jobMoAddress_tag);
                        jma.addrTel = checkIsNull(j.nsjma_jobMoAddress_tel);
                        jma.addrTel2 = checkIsNull(j.nsjma_jobMoAddress_tel2);
                        jma.addrFax = checkIsNull(j.nsjma_jobMoAddress_fax);
                        jma.addr4 = checkIsNull(j.nsjma_jobMoAddress_4); //forwarder addr usage - WY-09.OCT.2014
                        jmoList.Add(jma);
                    }
                    String queueLabel = "SALES ORDER" + " - " + MQjob + " > " + transactionType;
                    bTranStatus = JobMOAddressMQ(entities, queueLabel, jmoList, transactionType, createdDate, sequence, mq_id);
                    this.DataReqInMQLog.Debug("JobMOAddress: Sending netsuite_jobmo_address to MQ with label: " + queueLabel + ".(Inserted Successfully: " + bTranStatus + ")");
                }
                else
                {
                    var updateRequestMQStatus = "update requestmq set rmq_status = 'NO-DATA', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                    entities.Database.ExecuteSqlCommand(updateRequestMQStatus);
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("JobMOAddress Exception: " + ex.ToString());
            }
            return bTranStatus;
        }
        //Send netsuite_jobmo_pack to MSMQ
        private Boolean JobMOPack(sdeEntities entities, String transactionType, String MQjob, String createdDate, DateTime rangeFrom, DateTime rangeTo, Int32 sequence, Int32 mq_id)
        {
            List<JobMoPack> jobList = new List<JobMoPack>();
            Boolean bTranStatus = false;
            try
            {
                this.DataReqInMQLog.Debug("JobMOPack: Retrieving netsuite_jobmo_pack.");
                var readJob = (from jmp in entities.netsuite_jobmo_pack
                               join j in entities.netsuite_job on jmp.nsjmp_nsj_jobID equals j.nsj_jobID
                               where jmp.nsjmp_qty > 0 && (j.nsj_businessChannel_ID == "4cc04da6-f632-4c49-bd9e-cfc7a48a8e01" ||
                               j.nsj_businessChannel_ID == "365c2b8b-9a20-4840-ae50-cfc7a48a8e01")
                               && jmp.nsjmp_rangeTo > rangeFrom && jmp.nsjmp_rangeTo <= rangeTo
                               select jmp).ToList();

                var readJobItem = (from ji in entities.netsuite_jobitem
                                   join j in entities.netsuite_job on ji.nsji_nsj_jobID equals j.nsj_jobID
                                   where (j.nsj_businessChannel_ID == "4cc04da6-f632-4c49-bd9e-cfc7a48a8e01" ||
                               j.nsj_businessChannel_ID == "365c2b8b-9a20-4840-ae50-cfc7a48a8e01")
                                   && ji.nsji_rangeTo > rangeFrom && ji.nsji_rangeTo <= rangeTo
                                   select ji).ToList();

                this.DataReqInMQLog.Info("JobMOPack: " + readJob.Count() + " records to push.");

                if (readJob.Count() > 0 && readJobItem.Count > 0)
                {
                    foreach (var j in readJob)
                    {
                        JobMoPack jmp = new JobMoPack();
                        jmp.recID = j.nsjmp_recID;
                        jmp.jobMoPackID = j.nsjmp_jobmoPack_ID;
                        jmp.jobID = j.nsjmp_nsj_jobID;
                        jmp.period = checkIsNull(j.nsjmp_period);
                        jmp.moNo = checkIsNull(j.nsjmp_moNo);
                        jmp.schID = checkIsNull(j.nsjmp_schID);
                        jmp.schName = checkIsNull(j.nsjmp_schName);
                        jmp.packID = checkIsNull(j.nsjmp_packID);
                        jmp.packTitles = checkIsNull(j.nsjmp_packTitles);
                        jmp.packPrice = Convert.ToDouble(j.nsjmp_packPrice);
                        jmp.qty = Convert.ToInt32(j.nsjmp_qty);
                        jmp.amount = Convert.ToDouble(j.nsjmp_amt);
                        jmp.packISBN = checkIsNull(j.nsjmp_packISBN);
                        jmp.monoInternalID = checkIsNull(j.nsjmp_moNo_internalID);
                        jmp.createdDate = Convert.ToDateTime(j.nsjmp_createdDate);
                        jobList.Add(jmp);
                    }
                    String queueLabel = "SALES ORDER" + " - " + MQjob + " > " + transactionType;
                    bTranStatus = JobMOPackMQ(entities, queueLabel, jobList, transactionType, createdDate, sequence, mq_id);
                    this.DataReqInMQLog.Debug("JobMOPack: Sending netsuite_jobmo_pack to MQ with label: " + queueLabel + ".(Inserted Successfully: " + bTranStatus + ")");
                }
                else
                {
                    var updateRequestMQStatus = "update requestmq set rmq_status = 'NO-DATA', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                    entities.Database.ExecuteSqlCommand(updateRequestMQStatus);
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("JobMOPack Exception: " + ex.ToString());
            }
            return bTranStatus;
        }
        //Send netsuite_jobitem to MSMQ
        private Boolean JobItem(sdeEntities entities, String transactionType, String MQjob, String createdDate, DateTime rangeFrom, DateTime rangeTo, Int32 sequence, Int32 mq_id)
        {
            List<JobItem> jobList = new List<JobItem>();
            Boolean bTranStatus = false;
            try
            {
                this.DataReqInMQLog.Debug("JobItem: Retrieving netsuite_jobitem.");
                var readJob = (from ji in entities.netsuite_jobitem
                               join j in entities.netsuite_job on ji.nsji_nsj_jobID equals j.nsj_jobID
                               where (j.nsj_businessChannel_ID == "4cc04da6-f632-4c49-bd9e-cfc7a48a8e01" ||
                               j.nsj_businessChannel_ID == "365c2b8b-9a20-4840-ae50-cfc7a48a8e01")
                               && ji.nsji_rangeTo > rangeFrom && ji.nsji_rangeTo <= rangeTo
                               select ji).ToList();

                this.DataReqInMQLog.Info("JobItem: " + readJob.Count() + " records to push.");

                if (readJob.Count() > 0)
                {
                    foreach (var j in readJob)
                    {
                        JobItem ji = new JobItem();
                        ji.jobItemID = j.nsji_jobItem_ID;
                        ji.jobID = j.nsji_nsj_jobID;
                        ji.createdBy = checkIsNull(j.nsji_createdBy);
                        ji.itemID = checkIsNull(j.nsji_item_ID);
                        ji.itemQty = Convert.ToDecimal(j.nsji_item_qty);
                        ji.postingType = checkIsNull(j.nsji_posting_type);
                        ji.moNo = checkIsNull(j.nsji_moNo);
                        ji.moNoInternalID = checkIsNull(j.nsji_moNo_internalID);
                        ji.createdDate = Convert.ToDateTime(j.nsji_createdDate);
                        jobList.Add(ji);
                    }
                    String queueLabel = "SALES ORDER" + " - " + MQjob + " > " + transactionType;
                    bTranStatus = JobItemMQ(entities, queueLabel, jobList, transactionType, createdDate, sequence, mq_id);
                    this.DataReqInMQLog.Debug("JobItem: Sending netsuite_jobitem to MQ with label: " + queueLabel + ".(Inserted Successfully: " + bTranStatus + ")");
                }
                else
                {
                    var updateRequestMQStatus = "update requestmq set rmq_status = 'NO-DATA', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                    entities.Database.ExecuteSqlCommand(updateRequestMQStatus);
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("JobItem Exception: " + ex.ToString());
            }
            return bTranStatus;
        }
        //Send netsuite_jobordmaster to MSMQ
        private Boolean JobOrdMaster(sdeEntities entities, String transactionType, String MQjob, String createdDate, DateTime rangeFrom, DateTime rangeTo, Int32 sequence, Int32 mq_id)
        {
            List<JobOrdMaster> jobList = new List<JobOrdMaster>();
            Boolean bTranStatus = false;
            try
            {
                this.DataReqInMQLog.Debug("JobOrdMaster: Retrieving netsuite_jobordmaster.");
                var readJob = (from jom in entities.netsuite_jobordmaster
                               join j in entities.netsuite_job on jom.nsjom_nsj_job_ID equals j.nsj_jobID
                               where (j.nsj_businessChannel_ID == "4cc04da6-f632-4c49-bd9e-cfc7a48a8e01" ||
                               j.nsj_businessChannel_ID == "365c2b8b-9a20-4840-ae50-cfc7a48a8e01")
                               && jom.nsjom_rangeTo > rangeFrom && jom.nsjom_rangeTo <= rangeTo
                               select jom).ToList();

                var readJobItem = (from ji in entities.netsuite_jobitem
                                   join j in entities.netsuite_job on ji.nsji_nsj_jobID equals j.nsj_jobID
                                   where (j.nsj_businessChannel_ID == "4cc04da6-f632-4c49-bd9e-cfc7a48a8e01" ||
                               j.nsj_businessChannel_ID == "365c2b8b-9a20-4840-ae50-cfc7a48a8e01")
                                   && ji.nsji_rangeTo > rangeFrom && ji.nsji_rangeTo <= rangeTo
                                   select ji).ToList();

                this.DataReqInMQLog.Info("JobOrdMaster: " + readJob.Count() + " records to push.");

                if (readJob.Count() > 0 && readJobItem.Count > 0)
                {
                    foreach (var j in readJob)
                    {
                        JobOrdMaster jom = new JobOrdMaster();
                        jom.recID = j.nsjom_recID;
                        jom.ordMasterID = j.nsjom_jobOrdMaster_ID;
                        jom.jobID = j.nsjom_nsj_job_ID;
                        jom.ordRecNo = checkIsNull(j.nsjom_ordRecNo);
                        jom.ordStudent = checkIsNull(j.nsjom_ordStudent);
                        jom.clsID = checkIsNull(j.nsjom_clsID);
                        jom.moNo = checkIsNull(j.nsjom_moNo);
                        jom.country = checkIsNull(j.nsjom_country);
                        jom.consignmentNote = checkIsNull(j.nsjom_consignmentNote);
                        jom.processPeriod = checkIsNull(j.nsjom_processPeriod);
                        jom.moNoInternalID = checkIsNull(j.nsjom_moNo_internalID);
                        jom.jobMoID = j.nsjom_jobmo_id;
                        jom.createdDate = Convert.ToDateTime(j.nsjom_createdDate);
                        jom.memo = j.nsjom_memo; //To added in wms_jobordmaster - WY-07.OCT.2014
                        jom.jobCls_id = checkIsNull(j.nsjom_jobCls_id); //FAS order 09/10/2018 - Mohan
                        jobList.Add(jom);
                    }
                    String queueLabel = "SALES ORDER" + " - " + MQjob + " > " + transactionType;
                    bTranStatus = JobOrdMasterMQ(entities, queueLabel, jobList, transactionType, createdDate, sequence, mq_id);
                    this.DataReqInMQLog.Debug("JobOrdMaster: Sending netsuite_jobordmaster to MQ with label: " + queueLabel + ".(Inserted Successfully: " + bTranStatus + ")");
                }
                else
                {
                    var updateRequestMQStatus = "update requestmq set rmq_status = 'NO-DATA', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                    entities.Database.ExecuteSqlCommand(updateRequestMQStatus);
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("JobOrdMaster Exception: " + ex.ToString());
            }
            return bTranStatus;
        }
        //Send netsuite_jobordmaster_pack to MSMQ
        private Boolean JobOrdMasterPack(sdeEntities entities, String transactionType, String MQjob, String createdDate, DateTime rangeFrom, DateTime rangeTo, Int32 sequence, Int32 mq_id)
        {
            List<JobOrdMasterPack> jompList = new List<JobOrdMasterPack>();
            Boolean bTranStatus = false;
            try
            {
                this.DataReqInMQLog.Debug("JobOrdMasterPack: Retrieving netsuite_jobordmaster_pack.");
                var readJob = (from jomp in entities.netsuite_jobordmaster_pack
                               join j in entities.netsuite_job on jomp.nsjomp_job_ID equals j.nsj_jobID
                               where (j.nsj_businessChannel_ID == "4cc04da6-f632-4c49-bd9e-cfc7a48a8e01" ||
                               j.nsj_businessChannel_ID == "365c2b8b-9a20-4840-ae50-cfc7a48a8e01") && jomp.nsjomp_ordQty > 0
                               && (jomp.nsjomp_rangeTo > rangeFrom && jomp.nsjomp_rangeTo <= rangeTo)
                               select jomp).ToList();

                var readJobItem = (from ji in entities.netsuite_jobitem
                                   join j in entities.netsuite_job on ji.nsji_nsj_jobID equals j.nsj_jobID
                                   where (j.nsj_businessChannel_ID == "4cc04da6-f632-4c49-bd9e-cfc7a48a8e01" ||
                               j.nsj_businessChannel_ID == "365c2b8b-9a20-4840-ae50-cfc7a48a8e01")
                                   && ji.nsji_rangeTo > rangeFrom && ji.nsji_rangeTo <= rangeTo
                                   select ji).ToList();

                this.DataReqInMQLog.Info("JobOrdMasterPack: " + readJob.Count() + " records to push.");

                if (readJob.Count() > 0 && readJobItem.Count > 0)
                {
                    foreach (var j in readJob)
                    {
                        JobOrdMasterPack jomp = new JobOrdMasterPack();
                        jomp.ordMasterPackID = j.nsjomp_jobOrdMaster_pack_ID;
                        jomp.ordMasterID = j.nsjomp_jobOrdMaster_ID;
                        jomp.jobID = j.nsjomp_job_ID;
                        jomp.ordNo = j.nsjomp_ordNo;
                        jomp.ordPack = j.nsjomp_ordPack;
                        jomp.ordQty = Convert.ToInt32(j.nsjomp_ordQty);
                        jomp.ordPrice = Convert.ToDouble(j.nsjomp_ordPrice);
                        jomp.ordReplace = j.nsjomp_ordReplace;
                        jomp.ofrCode = j.nsjomp_ofrCode;
                        jomp.status = j.nsjomp_status;
                        jomp.ordPackStatus = j.nsjomp_ordPackStatus;
                        jomp.ordFulfill = Convert.ToInt32(j.nsjomp_ordFulfill);
                        jomp.ordDetDate = Convert.ToDateTime(j.nsjomp_ordDetDate);
                        jomp.ordPoint = Convert.ToDouble(j.nsjomp_ordPoint);
                        jomp.packTitle = j.nsjomp_packTitle;
                        jomp.ofrDesc = j.nsjomp_ofrDesc;
                        jomp.createdDate = Convert.ToDateTime(j.nsjomp_createdDate);

                        //Added OrdRate,Tax,Discount - WY-26.SEPT.2014
                        jomp.ordRate = Convert.ToDouble(j.nsjomp_ordRate);
                        jomp.tax = Convert.ToDouble(j.nsjomp_tax);
                        jomp.discount = Convert.ToDouble(j.nsjomp_discount);

                        //To get BasedPrice and PriceLevel - WY-29.SEPT.2014
                        jomp.basedPrice = Convert.ToDouble(j.nsjomp_basedprice);
                        jomp.priceLevel = j.nsjomp_pricelevel;

                        //BCAS Integration Phase 2
                        jomp.taxCode = j.nsjomp_tax_code;
                        jomp.gstAmount = Convert.ToDouble(j.nsjomp_gstamount);

                        jompList.Add(jomp);
                    }
                    String queueLabel = "SALES ORDER" + " - " + MQjob + " > " + transactionType;
                    bTranStatus = JobOrdMasterPackMQ(entities, queueLabel, jompList, transactionType, createdDate, sequence, mq_id);
                    this.DataReqInMQLog.Debug("JobOrdMasterPack: Sending netsuite_jobordmaster_pack to MQ with label: " + queueLabel + ".(Inserted Successfully: " + bTranStatus + ")");
                }
                else
                {
                    var updateRequestMQStatus = "update requestmq set rmq_status = 'NO-DATA', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                    entities.Database.ExecuteSqlCommand(updateRequestMQStatus);
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("JobOrdMasterPack Exception: " + ex.ToString());
            }
            return bTranStatus;
        }
        //Send netsuite_jobordmaster_packdetail to MSMQ
        private Boolean JobOrdMasterPackDetail(sdeEntities entities, String transactionType, String MQjob, String createdDate, DateTime rangeFrom, DateTime rangeTo, Int32 sequence, Int32 mq_id)
        {
            List<JobOrdMasterPackDetail> jompdList = new List<JobOrdMasterPackDetail>();
            Boolean bTranStatus = false;
            try
            {
                this.DataReqInMQLog.Debug("JobOrdMasterPackDetail: Retrieving netsuite_jobordmaster_packdetail.");
                var readJob = (from jompd in entities.netsuite_jobordmaster_packdetail
                               join j in entities.netsuite_job on jompd.nsjompd_job_ID equals j.nsj_jobID
                               where (j.nsj_businessChannel_ID == "4cc04da6-f632-4c49-bd9e-cfc7a48a8e01" ||
                               j.nsj_businessChannel_ID == "365c2b8b-9a20-4840-ae50-cfc7a48a8e01") && jompd.nsjompd_total_qty > 0
                               && (jompd.nsjompd_rangeTo > rangeFrom && jompd.nsjompd_rangeTo <= rangeTo)
                               select jompd).ToList();

                var readJobItem = (from ji in entities.netsuite_jobitem
                                   join j in entities.netsuite_job on ji.nsji_nsj_jobID equals j.nsj_jobID
                                   where (j.nsj_businessChannel_ID == "4cc04da6-f632-4c49-bd9e-cfc7a48a8e01" ||
                               j.nsj_businessChannel_ID == "365c2b8b-9a20-4840-ae50-cfc7a48a8e01")
                                   && ji.nsji_rangeTo > rangeFrom && ji.nsji_rangeTo <= rangeTo
                                   select ji).ToList();

                this.DataReqInMQLog.Info("JobOrdMasterPackDetail: " + readJob.Count() + " records to push.");

                if (readJob.Count() > 0 && readJobItem.Count > 0)
                {
                    foreach (var j in readJob)
                    {
                        JobOrdMasterPackDetail jompd = new JobOrdMasterPackDetail();
                        jompd.ordMasterPackDetailID = j.nsjompd_jobOrdMaster_packDetail_ID;
                        jompd.ordMasterPackID = j.nsjompd_jobOrdMaster_pack_ID;
                        jompd.jobID = j.nsjompd_job_ID;
                        jompd.ordPack = j.nsjompd_ordPack;
                        jompd.skuNo = j.nsjompd_skuNo;
                        jompd.isbn = j.nsjompd_isbn;
                        jompd.isbnSecondary = j.nsjompd_isbn_secondary;
                        jompd.skuQty = Convert.ToInt32(j.nsjompd_sku_qty);
                        jompd.itemID = j.nsjompd_item_ID;
                        jompd.totalQty = Convert.ToInt32(j.nsjompd_total_qty);
                        jompd.createdDate = Convert.ToDateTime(j.nsjompd_createdDate);

                        //BCAS Integration Phase 2
                        jompd.taxCode = j.nsjompd_tax_code;
                        jompd.itemPrice = Convert.ToDouble(j.nsjompd_item_price);
                        jompd.gstAmount = Convert.ToDouble(j.nsjompd_gstamount);
                        jompd.deliveryCharge = Convert.ToDouble(j.nsjompd_deliveryCharge);
                        jompd.deliveryChargeGst = Convert.ToDouble(j.nsjompd_deliveryChargeGst);

                        jompdList.Add(jompd);
                    }
                    String queueLabel = "SALES ORDER" + " - " + MQjob + " > " + transactionType;
                    bTranStatus = JobOrdMasterPackDetailMQ(entities, queueLabel, jompdList, transactionType, createdDate, sequence, mq_id);
                    this.DataReqInMQLog.Debug("JobOrdMasterPackDetail: Sending netsuite_jobordmaster_packdetail to MQ with label: " + queueLabel + ".(Inserted Successfully: " + bTranStatus + ")");
                }
                else
                {
                    var updateRequestMQStatus = "update requestmq set rmq_status = 'NO-DATA', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                    entities.Database.ExecuteSqlCommand(updateRequestMQStatus);
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("JobOrdMasterPackDetail Exception: " + ex.ToString());
            }
            return bTranStatus;
        }
        //Send discount and tax data to MSMQ
        private Boolean DiscountAndTax(sdeEntities entities, String transactionType, String MQjob, String createdDate, DateTime rangeFrom, DateTime rangeTo, Int32 sequence, Int32 mq_id)
        {
            List<DiscountAndTax> datList = new List<DiscountAndTax>();
            Boolean bTranStatus = false;
            try
            {
                this.DataReqInMQLog.Debug("DiscountAndTax: Retrieving discount and tax.");
                var readJob = (from job in entities.netsuite_job
                               join jom in entities.netsuite_jobordmaster on job.nsj_jobID equals jom.nsjom_nsj_job_ID
                               join jomp in entities.netsuite_jobordmaster_pack on jom.nsjom_jobOrdMaster_ID equals jomp.nsjomp_jobOrdMaster_ID
                               where (job.nsj_businessChannel_ID == "4cc04da6-f632-4c49-bd9e-cfc7a48a8e01" ||
                               job.nsj_businessChannel_ID == "365c2b8b-9a20-4840-ae50-cfc7a48a8e01")
                               && jom.nsjom_rangeTo > rangeFrom && jom.nsjom_rangeTo <= rangeTo
                               select new
                               {
                                   jom.nsjom_jobOrdMaster_ID,
                                   jomp.nsjomp_ordPack,
                                   jomp.nsjomp_discount,
                                   jomp.nsjomp_tax,
                                   jom.nsjom_moNo,
                                   jom.nsjom_moNo_internalID,
                                   jomp.nsjomp_jobOrdMaster_pack_ID,
                                   jomp.nsjomp_job_ID,
                                   jomp.nsjomp_qty,
                                   jomp.nsjomp_ordPrice,
                                   jomp.nsjomp_orderLine,
                                   jom.nsjom_memo,
                               }).ToList();

                var readJobItem = (from ji in entities.netsuite_jobitem
                                   join j in entities.netsuite_job on ji.nsji_nsj_jobID equals j.nsj_jobID
                                   where (j.nsj_businessChannel_ID == "4cc04da6-f632-4c49-bd9e-cfc7a48a8e01" ||
                               j.nsj_businessChannel_ID == "365c2b8b-9a20-4840-ae50-cfc7a48a8e01")
                                   && ji.nsji_rangeTo > rangeFrom && ji.nsji_rangeTo <= rangeTo
                                   select ji).ToList();

                this.DataReqInMQLog.Info("DiscountAndTax: " + readJob.Count() + " records to push.");

                if (readJob.Count() > 0 && readJobItem.Count > 0)
                {
                    foreach (var j in readJob)
                    {
                        DiscountAndTax dat = new DiscountAndTax();
                        dat.wms_jobordmaster_ID = j.nsjom_jobOrdMaster_ID;
                        dat.itemID = j.nsjomp_ordPack;
                        dat.discount = j.nsjomp_discount;
                        dat.tax = j.nsjomp_tax;
                        dat.moNo = j.nsjom_moNo;
                        dat.moNoInternalID = j.nsjom_moNo_internalID;
                        dat.wms_jobordmaster_pack_id = j.nsjomp_jobOrdMaster_pack_ID;
                        dat.wms_job_id = j.nsjomp_job_ID;
                        dat.qty = j.nsjomp_qty;
                        dat.price = j.nsjomp_ordPrice;
                        dat.orderLine = j.nsjomp_orderLine;
                        dat.memo = j.nsjom_memo;
                        datList.Add(dat);
                    }
                    String queueLabel = "WMS" + " - " + MQjob + " > " + transactionType;
                    bTranStatus = DiscountAndTaxMQ(entities, queueLabel, datList, transactionType, createdDate, sequence, mq_id);
                    this.DataReqInMQLog.Debug("DiscountAndTax: Sending discount and tax to MQ with label: " + queueLabel + ".(Inserted Successfully: " + bTranStatus + ")");
                }
                else
                {
                    var updateRequestMQStatus = "update requestmq set rmq_status = 'NO-DATA', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                    entities.Database.ExecuteSqlCommand(updateRequestMQStatus);
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("DiscountAndTax Exception: " + ex.ToString());
            }
            return bTranStatus;
        }


        //Send request to MSMQ to get sales order fulfillment 
        private Boolean SOFulfillment(sdeEntities entities, String transactionType, String MQjob, String createdDate, DateTime rangeFrom, DateTime rangeTo, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus = false;
            try
            {
                this.DataReqInMQLog.Debug("SOFulfillment: Sending request.");

                List<requestDataForm> reqDataList = new List<requestDataForm>();
                requestDataForm reqData = new requestDataForm();
                reqData.dataType = transactionType;
                reqData.rangeFrom = rangeFrom;
                reqData.rangeTo = rangeTo;
                reqDataList.Add(reqData);

                String queueLabel = "REQUEST DATA" + " - " + MQjob + " > " + transactionType;
                bTranStatus = SOFulfillmentMQ(entities, queueLabel, reqDataList, transactionType, createdDate, sequence, mq_id);

                this.DataReqInMQLog.Debug("SOFulfillment: Sending request to get sales fulfillment to MQ with label: " + queueLabel + ".(Inserted Successfully: " + bTranStatus + ")");
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("SOFulfillment Exception: " + ex.ToString());
            }
            return bTranStatus;
        }
        //Split the jobordmaster,jobitem,jobmopack table with sofulfillment - WY-26.AUG.2014
        private Boolean JobOrdMasterExtraction(sdeEntities entities, String transactionType, String MQjob, String createdDate, DateTime rangeFrom, DateTime rangeTo, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus = false;
            try
            {
                this.DataReqInMQLog.Debug("JobOrdMasterExtraction: Sending request.");

                List<requestDataForm> reqDataList = new List<requestDataForm>();
                requestDataForm reqData = new requestDataForm();
                reqData.dataType = transactionType;
                reqData.rangeFrom = rangeFrom;
                reqData.rangeTo = rangeTo;
                reqDataList.Add(reqData);

                String queueLabel = "REQUEST DATA" + " - " + MQjob + " > " + transactionType;
                bTranStatus = JobOrdMasterExtractionMQ(entities, queueLabel, reqDataList, transactionType, createdDate, sequence, mq_id);

                this.DataReqInMQLog.Debug("JobOrdMasterExtraction: Sending request to get job order master to MQ with label: " + queueLabel + ".(Inserted Successfully: " + bTranStatus + ")");
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("JobOrdMasterExtraction Exception: " + ex.ToString());
            }
            return bTranStatus;
        }
        //Send netsuite_pr to MSMQ
        private Boolean PurchaseRequest(sdeEntities entities, String transactionType, String MQjob, String createdDate, DateTime rangeFrom, DateTime rangeTo, Int32 sequence, Int32 mq_id)
        {
            List<PurchaseRequest> prList = new List<PurchaseRequest>();
            Boolean bTranStatus = false;
            try
            {

                this.DataReqInMQLog.Debug("PurchaseRequest: Checking PR LOB");
                List<string> _PRNumber = new List<string>();
                #region Check PR LOB
                var chkPRLOBET = (from AA in entities.netsuite_pr
                                  join BB in entities.netsuite_pritem on AA.nspr_pr_ID equals BB.nspi_nspr_pr_ID
                                  join CC in entities.map_item on BB.nspi_item_internalID equals CC.mi_item_internalID
                                  where AA.nspr_ns_status == "APPROVED BY SUPERVISOR/PENDING RECEIPT" && AA.nspr_pushStatus == null
                                     && AA.nspr_pr_location.ToUpper().Contains("TRADE")
                                     && !CC.mi_businesschannel_name.ToUpper().Contains("TRADE")
                                  select new { AA.nspr_pr_number, AA.nspr_businessChannel_ID, AA.nspr_pr_internalID }).Distinct().ToList();

                foreach (var q1 in chkPRLOBET)
                {
                    _PRNumber.Add(q1.nspr_pr_number);
                    this.DataReqInMQLog.Fatal("This PO excluded from sync to wms due to having different LOB in items : " + q1.nspr_pr_number + " , " + q1.nspr_businessChannel_ID + " .");
                }

                var chkPRLOBBC = (from AA in entities.netsuite_pr
                                  join BB in entities.netsuite_pritem on AA.nspr_pr_ID equals BB.nspi_nspr_pr_ID
                                  join CC in entities.map_item on BB.nspi_item_internalID equals CC.mi_item_internalID
                                  where AA.nspr_ns_status == "APPROVED BY SUPERVISOR/PENDING RECEIPT" && AA.nspr_pushStatus == null
                                     && AA.nspr_pr_location.ToUpper().Contains("BOOK CLUB")
                                     && !CC.mi_businesschannel_name.ToUpper().Contains("BOOK CLUB")
                                  select new { AA.nspr_pr_number, AA.nspr_businessChannel_ID, AA.nspr_pr_internalID }).Distinct().ToList();

                foreach (var q1 in chkPRLOBBC)
                {
                    _PRNumber.Add(q1.nspr_pr_number);
                    this.DataReqInMQLog.Fatal("This PO excluded from sync to wms due to having different LOB in items : " + q1.nspr_pr_number + " , " + q1.nspr_businessChannel_ID + " .");
                }
                #endregion

                this.DataReqInMQLog.Debug("PurchaseRequest: Retrieving netsuite_pr");
                var readJob = (from pr in entities.netsuite_pr
                               //where pr.nspr_ns_status == "APPROVED BY SUPERVISOR/PENDING RECEIPT" && pr.nspr_createdDate > rangeFrom && pr.nspr_createdDate <= rangeTo
                               where pr.nspr_ns_status == "APPROVED BY SUPERVISOR/PENDING RECEIPT" && pr.nspr_pushStatus == null
                               && !_PRNumber.Contains(pr.nspr_pr_number)
                               select pr).ToList();

                this.DataReqInMQLog.Info("PurchaseRequest: " + readJob.Count() + " records to push.");

                if (readJob.Count() > 0)
                {
                    foreach (var p in readJob)
                    {
                        PurchaseRequest pr = new PurchaseRequest();
                        pr.prID = p.nspr_pr_ID;
                        pr.businessChannelID = p.nspr_businessChannel_ID;
                        pr.active = p.nspr_pr_active;
                        pr.accoutClass = p.nspr_pr_accountClass;
                        pr.approvalType = p.nspr_pr_approvalType;
                        pr.comments = p.nspr_pr_comments;
                        pr.date = p.nspr_pr_date;
                        pr.day = p.nspr_pr_day;
                        pr.deleteReason = p.nspr_pr_deleteReason;
                        pr.deliveryMethod = p.nspr_pr_deliveryMethod;
                        pr.desc = p.nspr_pr_desc;
                        pr.email = p.nspr_pr_email;
                        pr.exported = p.nspr_pr_exported;
                        pr.month = p.nspr_pr_month;
                        pr.neededDate = p.nspr_pr_neededDate;
                        pr.prNumber = p.nspr_pr_number;
                        pr.requestor = p.nspr_pr_requestor;
                        pr.site = p.nspr_pr_site;
                        pr.status = p.nspr_pr_status;
                        pr.supplier = p.nspr_pr_supplier;
                        pr.year = p.nspr_pr_year;
                        pr.createdDate = p.nspr_createdDate;
                        prList.Add(pr);
                    }
                    String queueLabel = "PURCHASE REQUEST" + " - " + MQjob + " > " + transactionType;
                    bTranStatus = PurchaseRequestMQ(entities, queueLabel, prList, transactionType, createdDate, sequence, mq_id);
                    this.DataReqInMQLog.Debug("PurchaseRequest: Sending netsuite_pr to MQ with label: " + queueLabel + ".(Inserted Successfully: " + bTranStatus + ")");
                }
                else
                {
                    var updateRequestMQStatus = "update requestmq set rmq_status = 'NO-DATA', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                    entities.Database.ExecuteSqlCommand(updateRequestMQStatus);
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("PurchaseRequest Exception: " + ex.ToString());
            }
            return bTranStatus;
        }
        //Send netsuite_pritem to MSMQ
        private Boolean PurchaseRequestItem(sdeEntities entities, String transactionType, String MQjob, String createdDate, DateTime rangeFrom, DateTime rangeTo, Int32 sequence, Int32 mq_id)
        {
            List<PurchaseRequestItem> priList = new List<PurchaseRequestItem>();
            Boolean bTranStatus = false;
            try
            {

                this.DataReqInMQLog.Debug("PurchaseRequest: Checking PR LOB");
                List<string> _PRNumber = new List<string>();
                #region Check PR LOB
                var chkPRLOBET = (from AA in entities.netsuite_pr
                                  join BB in entities.netsuite_pritem on AA.nspr_pr_ID equals BB.nspi_nspr_pr_ID
                                  join CC in entities.map_item on BB.nspi_item_internalID equals CC.mi_item_internalID
                                  where AA.nspr_ns_status == "APPROVED BY SUPERVISOR/PENDING RECEIPT" && AA.nspr_pushStatus == null
                                     && AA.nspr_pr_location.ToUpper().Contains("TRADE")
                                     && !CC.mi_businesschannel_name.ToUpper().Contains("TRADE")
                                  select new { AA.nspr_pr_number }).Distinct().ToList();

                foreach (var q1 in chkPRLOBET)
                {
                    _PRNumber.Add(q1.nspr_pr_number);
                    this.DataReqInMQLog.Fatal("This PO excluded from sync to wms due to having different LOB in items : " + q1.nspr_pr_number + "  is having issue.");
                }

                var chkPRLOBBC = (from AA in entities.netsuite_pr
                                  join BB in entities.netsuite_pritem on AA.nspr_pr_ID equals BB.nspi_nspr_pr_ID
                                  join CC in entities.map_item on BB.nspi_item_internalID equals CC.mi_item_internalID
                                  where AA.nspr_ns_status == "APPROVED BY SUPERVISOR/PENDING RECEIPT" && AA.nspr_pushStatus == null
                                     && AA.nspr_pr_location.ToUpper().Contains("BOOK CLUB")
                                     && !CC.mi_businesschannel_name.ToUpper().Contains("BOOK CLUB")
                                  select new { AA.nspr_pr_number }).Distinct().ToList();

                foreach (var q1 in chkPRLOBBC)
                {
                    _PRNumber.Add(q1.nspr_pr_number);
                    this.DataReqInMQLog.Fatal("This PO excluded from sync to wms due to having different LOB in items : " + q1.nspr_pr_number + "  is having issue.");
                }
                #endregion

                this.DataReqInMQLog.Debug("PurchaseRequestItem: Retrieving netsuite_pritem");
                var readJob = (from pr in entities.netsuite_pr
                               join pri in entities.netsuite_pritem on pr.nspr_pr_ID equals pri.nspi_nspr_pr_ID
                               //where pr.nspr_ns_status == "APPROVED BY SUPERVISOR/PENDING RECEIPT" && pr.nspr_createdDate > rangeFrom && pr.nspr_createdDate <= rangeTo
                               //where pr.nspr_ns_status == "APPROVED BY SUPERVISOR/PENDING RECEIPT" && pri.nspi_createdDate > rangeFrom && pri.nspi_createdDate <= rangeTo 
                               where pr.nspr_ns_status == "APPROVED BY SUPERVISOR/PENDING RECEIPT"
                               && !_PRNumber.Contains(pr.nspr_pr_number) && pri.nspi_pushStatus == null
                               && pri.nspi_item_ID != null
                               select pri).ToList();

                this.DataReqInMQLog.Info("PurchaseRequestItem: " + readJob.Count() + " records to push.");

                if (readJob.Count() > 0)
                {
                    foreach (var p in readJob)
                    {
                        PurchaseRequestItem pri = new PurchaseRequestItem();
                        pri.pritemID = p.nspi_pritem_ID;
                        pri.itemID = p.nspi_item_ID;
                        pri.itemBusinessID = p.nspi_itemBusiness_ID;
                        pri.prID = p.nspi_nspr_pr_ID;
                        pri.approved = p.nspi_pritem_approved;
                        pri.approvedBy = p.nspi_pritem_approvedBy;
                        pri.approvedDate = p.nspi_pritem_approvedDate;
                        pri.comments = p.nspi_pritem_comments;
                        pri.converted = p.nspi_pritem_converted;
                        pri.qty = p.nspi_pritem_qty;
                        pri.price = p.nspi_pritem_price;
                        pri.createdDate = p.nspi_createdDate;
                        priList.Add(pri);
                    }
                    String queueLabel = "PURCHASE REQUEST ITEM" + " - " + MQjob + " > " + transactionType;
                    bTranStatus = PurchaseRequestItemMQ(entities, queueLabel, priList, transactionType, createdDate, sequence, mq_id);
                    this.DataReqInMQLog.Debug("PurchaseRequestItem: Sending netsuite_pritem to MQ with label: " + queueLabel + ".(Inserted Successfully: " + bTranStatus + ")");
                }
                else
                {
                    var updateRequestMQStatus = "update requestmq set rmq_status = 'NO-DATA', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                    entities.Database.ExecuteSqlCommand(updateRequestMQStatus);
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("PurchaseRequestItem Exception: " + ex.ToString());
            }
            return bTranStatus;
        }
        //Send request to MSMQ to get purchase order receiving
        private Boolean POReceive(sdeEntities entities, String transactionType, String MQjob, String createdDate, DateTime rangeFrom, DateTime rangeTo, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus = false;
            try
            {
                this.DataReqInMQLog.Debug("POReceive: Sending request.");

                List<requestDataForm> reqDataList = new List<requestDataForm>();
                requestDataForm reqData = new requestDataForm();
                reqData.dataType = transactionType;
                reqData.rangeFrom = rangeFrom;
                reqData.rangeTo = rangeTo;
                reqDataList.Add(reqData);

                String queueLabel = "REQUEST DATA" + " - " + MQjob + " > " + transactionType;
                bTranStatus = POReceiveMQ(entities, queueLabel, reqDataList, transactionType, createdDate, sequence, mq_id);

                this.DataReqInMQLog.Debug("POReceive: Sending request to get wms_poreceive to MQ with label: " + queueLabel + ".(Inserted Successfully: " + bTranStatus + ")");
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("POReceive Exception: " + ex.ToString());
            }
            return bTranStatus;
        }
        //Send request to MSMQ to get purchase order iyrm receiving
        private Boolean POReceiveItem(sdeEntities entities, String transactionType, String MQjob, String createdDate, DateTime rangeFrom, DateTime rangeTo, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus = false;
            try
            {
                this.DataReqInMQLog.Debug("POReceiveItem: Sending request.");

                List<requestDataForm> reqDataList = new List<requestDataForm>();
                requestDataForm reqData = new requestDataForm();
                reqData.dataType = transactionType;
                reqData.rangeFrom = rangeFrom;
                reqData.rangeTo = rangeTo;
                reqDataList.Add(reqData);

                String queueLabel = "REQUEST DATA" + " - " + MQjob + " > " + transactionType;
                bTranStatus = POReceiveItemMQ(entities, queueLabel, reqDataList, transactionType, createdDate, sequence, mq_id);

                this.DataReqInMQLog.Debug("POReceiveItem: Sending request to get wms_poreceiveitem to MQ with label: " + queueLabel + ".(Inserted Successfully: " + bTranStatus + ")");
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("POReceiveItem Exception: " + ex.ToString());
            }
            return bTranStatus;
        }
        //Send netsuite_return to MSMQ
        private Boolean SOReturn(sdeEntities entities, String transactionType, String MQjob, String createdDate, DateTime rangeFrom, DateTime rangeTo, Int32 sequence, Int32 mq_id)
        {
            List<SOReturn> sorList = new List<SOReturn>();
            Boolean bTranStatus = false;
            try
            {
                this.DataReqInMQLog.Debug("SOReturn: Retrieving netsuite_return.");
                var readJob = (from sor in entities.netsuite_return
                               where (sor.nsr_createdDate > rangeFrom && sor.nsr_createdDate <= rangeTo) && sor.nsr_ns_status == "PENDING RECEIPT"
                               select sor).ToList();

                this.DataReqInMQLog.Info("SOReturn: " + readJob.Count() + " records to push.");

                if (readJob.Count() > 0)
                {
                    foreach (var s in readJob)
                    {
                        SOReturn sor = new SOReturn();
                        sor.rrID = s.nsr_rr_ID;
                        sor.schID = s.nsr_rr_schID;
                        sor.rrNumber = s.nsr_rr_number;
                        sor.rrDate = s.nsr_rr_date;
                        sor.rrDesc = s.nsr_rr_description;
                        sor.rrCreatedBy = s.nsr_rr_createdBy;
                        sor.rrReference = s.nsr_rr_reference;
                        sor.rrStatus = s.nsr_rr_status;
                        sor.rrActive = s.nsr_rr_active;
                        sor.rrReturnDate = s.nsr_rr_returnDate;
                        sor.rrReturnBy = s.nsr_rr_returnBy;
                        sor.rrCreatedDate = s.nsr_createdDate;
                        sorList.Add(sor);
                    }
                    String queueLabel = "SOR" + " - " + MQjob + " > " + transactionType;
                    bTranStatus = SOReturnMQ(entities, queueLabel, sorList, transactionType, createdDate, sequence, mq_id);
                    this.DataReqInMQLog.Debug("SOReturn: Sending netsuite_return to MQ with label: " + queueLabel + ".(Inserted Successfully: " + bTranStatus + ")");
                }
                else
                {
                    var updateRequestMQStatus = "update requestmq set rmq_status = 'NO-DATA', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                    entities.Database.ExecuteSqlCommand(updateRequestMQStatus);
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("SOReturn Exception: " + ex.ToString());
            }
            return true;
        }
        //Send netsuite_returnitem to MSMQ
        private Boolean SOReturnItem(sdeEntities entities, String transactionType, String MQjob, String createdDate, DateTime rangeFrom, DateTime rangeTo, Int32 sequence, Int32 mq_id)
        {
            List<SOReturnItem> sriList = new List<SOReturnItem>();
            Boolean bTranStatus = false;
            try
            {
                this.DataReqInMQLog.Debug("SOReturnItem: Retrieving netsuite_returnitem.");
                var readJob = (from sri in entities.netsuite_returnitem
                               where sri.nsri_createdDate > rangeFrom && sri.nsri_createdDate <= rangeTo
                               select sri).ToList();

                this.DataReqInMQLog.Info("SOReturnItem: " + readJob.Count() + " records to push.");

                if (readJob.Count() > 0)
                {
                    foreach (var s in readJob)
                    {
                        SOReturnItem sri = new SOReturnItem();
                        sri.riID = s.nsri_rritem_ID;
                        sri.rrID = s.nsri_nsr_rr_ID;
                        sri.riInvoice = s.nsri_rritem_invoice;
                        sri.riIsbn = s.nsri_rritem_isbn;
                        sri.riIsbn2 = s.nsri_rritem_isbn2;
                        sri.riReturnQty = s.nsri_rritem_return_qty;
                        sri.riCreatedDate = s.nsri_createdDate;
                        sri.riCreatedBy = s.nsri_createdBy;
                        sri.riStatus = s.nsri_rritem_status;
                        sri.riRemarks = s.nsri_remarks;
                        sri.riMaxReturn = s.nsri_rritem_max_return;
                        sri.riItemID = s.nsri_rritem_isbn;
                        sri.riPackID = s.nsri_pack_ID;
                        sri.riReceiveQty = s.nsri_rritem_receive_qty;
                        sri.riPostingQty = s.nsri_rritem_posting_qty;
                        sri.riCreatedDate = s.nsri_createdDate;
                        sriList.Add(sri);
                    }
                    String queueLabel = "SOR" + " - " + MQjob + " > " + transactionType;
                    bTranStatus = SOReturnItemMQ(entities, queueLabel, sriList, transactionType, createdDate, sequence, mq_id);
                    this.DataReqInMQLog.Debug("SOReturnItem: Sending netsuite_returnitem to MQ with label: " + queueLabel + ".(Inserted Successfully: " + bTranStatus + ")");
                }
                else
                {
                    var updateRequestMQStatus = "update requestmq set rmq_status = 'NO-DATA', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                    entities.Database.ExecuteSqlCommand(updateRequestMQStatus);
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("SOReturnItem Exception: " + ex.ToString());
            }
            return true;
        }
        //Send request to MSMQ to get sales order return (imas_return)
        private Boolean SOReturnUpdate(sdeEntities entities, String transactionType, String MQjob, String createdDate, DateTime rangeFrom, DateTime rangeTo, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus = false;
            try
            {
                this.DataReqInMQLog.Debug("SOReturnUpdate: Sending request.");

                List<requestDataForm> reqDataList = new List<requestDataForm>();
                requestDataForm reqData = new requestDataForm();
                reqData.dataType = transactionType;
                reqData.rangeFrom = rangeFrom;
                reqData.rangeTo = rangeTo;
                reqDataList.Add(reqData);

                String queueLabel = "REQUEST DATA" + " - " + MQjob + " > " + transactionType;
                bTranStatus = SOReturnUpdateMQ(entities, queueLabel, reqDataList, transactionType, createdDate, sequence, mq_id);

                this.DataReqInMQLog.Debug("SOReturnUpdate: Sending request to get imas_return and imas_returnitem to MQ with label: " + queueLabel + ".(Inserted Successfully: " + bTranStatus + ")");
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("SOReturnUpdate Exception: " + ex.ToString());
            }
            return bTranStatus;
        }
        //Send map_item to IMAS
        private Boolean SyncNewItemToImas(sdeEntities entities, String transactionType, String MQjob, String createdDate, DateTime rangeFrom, DateTime rangeTo, Int32 sequence, Int32 mq_id)
        {
            List<cls_map_item> itemList = new List<cls_map_item>();
            Boolean bTranStatus = false;
            try
            {
                this.DataReqInMQLog.Debug("SyncNewItemToImas: Retrieving map_item.");
                //var mapItem = (from j in entities.map_item
                //               //where j.mi_createdDate > rangeFrom && j.mi_createdDate <= rangeTo
                //               where j.mi_lastModifiedDate > rangeFrom && j.mi_lastModifiedDate <= rangeTo
                //               select j).ToList();

                var mapItem = (from j in entities.map_item
                               join ji in entities.map_itemprice.Where(a => a.mip_item_pricelevel == "RRP")
                               on j.mi_item_isbn equals ji.mip_item_isbn into jji
                               from x in jji.DefaultIfEmpty()
                               where j.mi_lastModifiedDate > rangeFrom && j.mi_lastModifiedDate <= rangeTo
                               select new
                               {
                                   j.mi_createdDate,
                                   j.mi_reorder_date,
                                   j.mi_lastModifiedDate,
                                   j.mi_item_internalID,
                                   j.mi_item_ID,
                                   j.mi_createdBy,
                                   j.mi_accountClassID,
                                   j.mi_isbn_secondary,
                                   j.mi_item_isbn,
                                   j.mi_item_reorder_level,
                                   j.mi_item_uom,
                                   j.mi_item_weight,
                                   j.mi_modifiedBy,
                                   j.mi_reorder_qty,
                                   j.mi_item_description,
                                   j.mi_businesschannel_InternalID,
                                   j.mi_businesschannel_name,
                                   j.mi_prodfamily,
                                   j.mi_tax_schedule,
                                   j.mi_tax_code,
                                   x.mip_item_price
                               }).ToList();


                this.DataReqInMQLog.Info("SyncNewItemToImas: " + mapItem.Count() + " records to push.");

                if (mapItem.Count() > 0)
                {
                    foreach (var j in mapItem)
                    {
                        DateTime micreatedDate;
                        DateTime mireorderDate;
                        DateTime milastModifiedDate;
                        //if (j.mi_createdDate == null)
                        //    j.mi_createdDate = DateTime.Now;
                        //if (j.mi_reorder_date == null)
                        //    j.mi_reorder_date = DateTime.Now;
                        //if (j.mi_lastModifiedDate == null)
                        //    j.mi_lastModifiedDate = DateTime.Now;
                        if (j.mi_createdDate == null)
                            micreatedDate = DateTime.Now;
                        else
                            micreatedDate = Convert.ToDateTime(j.mi_createdDate);

                        if (j.mi_reorder_date == null)
                            mireorderDate = DateTime.Now;
                        else
                            mireorderDate = Convert.ToDateTime(j.mi_reorder_date);

                        if (j.mi_lastModifiedDate == null)
                            milastModifiedDate = DateTime.Now;
                        else
                            milastModifiedDate = Convert.ToDateTime(j.mi_lastModifiedDate);

                        cls_map_item item = new cls_map_item();
                        item.mi_item_internalID = j.mi_item_internalID;
                        item.mi_item_ID = j.mi_item_ID;
                        item.mi_createdBy = j.mi_createdBy;
                        item.mi_accountClassID = j.mi_accountClassID;
                        //item.mi_createdDate = DateTime.Parse(j.mi_createdDate.Value.ToString("MMM dd yyyy hh:mm tt"));
                        //item.mi_createdDate = j.mi_createdDate;
                        item.mi_createdDate = micreatedDate;
                        item.mi_isbn_secondary = j.mi_isbn_secondary;
                        item.mi_item_isbn = j.mi_item_isbn;
                        item.mi_item_reorder_level = j.mi_item_reorder_level;
                        item.mi_item_uom = j.mi_item_uom;
                        item.mi_item_weight = j.mi_item_weight;
                        //item.mi_lastModifiedDate = j.mi_lastModifiedDate;
                        item.mi_lastModifiedDate = milastModifiedDate;
                        item.mi_modifiedBy = j.mi_modifiedBy;
                        //item.mi_reorder_date = j.mi_reorder_date;
                        item.mi_reorder_date = mireorderDate;
                        item.mi_reorder_qty = j.mi_reorder_qty;
                        item.mi_item_description = j.mi_item_description; //Added by WY-2014.08.27
                        item.mi_item_title = j.mi_item_description;//Added by WY-2014.08.27

                        //Added by WY-08.OCT.2014
                        item.mi_item_internalID = j.mi_item_internalID;
                        item.mi_businesschannel_InternalID = j.mi_businesschannel_InternalID;
                        item.mi_businesschannel_name = j.mi_businesschannel_name;

                        //Add Product Family - WY-24.OCT.2014
                        item.mi_prodfamily = j.mi_prodfamily;

                        //Add Tax Schedule & Code, Price - WY-24.MAR.2015
                        item.mi_tax_schedule = j.mi_tax_schedule;
                        item.mi_tax_code = j.mi_tax_code;
                        item.mip_item_price = Convert.ToDecimal(j.mip_item_price);
                        itemList.Add(item);

                    }

                    String queueLabel = "PUSH ITEM" + " - " + MQjob + " > " + transactionType;
                    bTranStatus = SyncNewItemToImasMQ(entities, queueLabel, itemList, transactionType, createdDate, sequence, mq_id);
                    this.DataReqInMQLog.Debug("SyncNewItemToImas: Sending map_item to MQ with label: " + queueLabel + ".(Inserted Successfully: " + bTranStatus + ")");
                }
                else
                {
                    var updateRequestMQStatus = "update requestmq set rmq_status = 'NO-DATA', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                    entities.Database.ExecuteSqlCommand(updateRequestMQStatus);
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("SyncNewItemToImas Exception: " + ex.ToString());
            }
            return bTranStatus;
        }
        //Send map_item to WMS
        private Boolean SyncNewItemToWMS(sdeEntities entities, String transactionType, String MQjob, String createdDate, DateTime rangeFrom, DateTime rangeTo, Int32 sequence, Int32 mq_id)
        {
            List<cls_map_item> itemList = new List<cls_map_item>();
            Boolean bTranStatus = false;
            try
            {
                this.DataReqInMQLog.Debug("SyncNewItemToImas: Retrieving map_item.");
                var mapItem = (from j in entities.map_item
                               //where j.mi_createdDate > rangeFrom && j.mi_createdDate <= rangeTo
                               where j.mi_lastModifiedDate > rangeFrom && j.mi_lastModifiedDate <= rangeTo
                               select j).ToList();

                this.DataReqInMQLog.Info("SyncNewItemToImas: " + mapItem.Count() + " records to push.");

                if (mapItem.Count() > 0)
                {
                    foreach (var j in mapItem)
                    {
                        if (j.mi_createdDate == null)
                            j.mi_createdDate = DateTime.Now;
                        if (j.mi_reorder_date == null)
                            j.mi_reorder_date = DateTime.Now;
                        if (j.mi_lastModifiedDate == null)
                            j.mi_lastModifiedDate = DateTime.Now;

                        cls_map_item item = new cls_map_item();
                        item.mi_item_internalID = j.mi_item_internalID;
                        item.mi_item_ID = j.mi_item_ID;
                        item.mi_createdBy = j.mi_createdBy;
                        item.mi_accountClassID = j.mi_accountClassID;
                        //item.mi_createdDate = DateTime.Parse(j.mi_createdDate.Value.ToString("MMM dd yyyy hh:mm tt"));
                        item.mi_createdDate = j.mi_createdDate;
                        item.mi_isbn_secondary = j.mi_isbn_secondary;
                        item.mi_item_isbn = j.mi_item_isbn;
                        item.mi_item_reorder_level = j.mi_item_reorder_level;
                        item.mi_item_uom = j.mi_item_uom;
                        item.mi_item_weight = j.mi_item_weight;
                        item.mi_lastModifiedDate = j.mi_lastModifiedDate;
                        item.mi_modifiedBy = j.mi_modifiedBy;
                        item.mi_reorder_date = j.mi_reorder_date;
                        item.mi_reorder_qty = j.mi_reorder_qty;
                        item.mi_item_description = j.mi_item_description; //Added by WY-2014.08.27
                        item.mi_item_title = j.mi_item_description;//Added by WY-2014.08.27

                        //Added by WY-08.OCT.2014
                        item.mi_item_internalID = j.mi_item_internalID;
                        item.mi_businesschannel_InternalID = j.mi_businesschannel_InternalID;
                        item.mi_businesschannel_name = j.mi_businesschannel_name;

                        //Add Product Family - WY-24.OCT.2014
                        item.mi_prodfamily = j.mi_prodfamily;
                        itemList.Add(item);
                    }

                    String queueLabel = "PUSH ITEM" + " - " + MQjob + " > " + transactionType;
                    this.DataReqInMQLog.Debug("SyncNewItemToImas: Sending map_item to WMS MQ with label: " + queueLabel + ")");
                    bTranStatus = SyncNewItemToWmsMQ(entities, queueLabel, itemList, transactionType, createdDate, sequence, mq_id);
                    this.DataReqInMQLog.Debug("SyncNewItemToImas: Sending map_item to MQ with label: " + queueLabel + ".(Inserted Successfully: " + bTranStatus + ")");
                }
                else
                {
                    var updateRequestMQStatus = "update requestmq set rmq_status = 'NO-DATA', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                    entities.Database.ExecuteSqlCommand(updateRequestMQStatus);
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("SyncNewItemToImas Exception: " + ex.ToString());
            }
            return bTranStatus;
        }

        //Added to get daily created items - WY-17.OCT.2014
        private Boolean SyncNewItemToImas2(sdeEntities entities, String transactionType, String MQjob, String createdDate, DateTime rangeFrom, DateTime rangeTo, Int32 sequence, Int32 mq_id)
        {
            List<cls_map_item> itemList = new List<cls_map_item>();
            Boolean bTranStatus = false;
            try
            {
                this.DataReqInMQLog.Debug("SyncNewItemToImas2: Retrieving map_item.");
                //var mapItem = (from j in entities.map_item
                //               where j.mi_createdDate > rangeFrom && j.mi_createdDate <= rangeTo
                //               //where j.mi_lastModifiedDate > rangeFrom && j.mi_lastModifiedDate <= rangeTo
                //               select j).ToList();

                var mapItem = (from j in entities.map_item
                               join ji in entities.map_itemprice.Where(a => a.mip_item_pricelevel == "RRP")
                               on j.mi_item_isbn equals ji.mip_item_isbn into jji
                               from x in jji.DefaultIfEmpty()
                               where j.mi_lastModifiedDate > rangeFrom && j.mi_lastModifiedDate <= rangeTo
                               select new
                               {
                                   j.mi_createdDate,
                                   j.mi_reorder_date,
                                   j.mi_lastModifiedDate,
                                   j.mi_item_internalID,
                                   j.mi_item_ID,
                                   j.mi_createdBy,
                                   j.mi_accountClassID,
                                   j.mi_isbn_secondary,
                                   j.mi_item_isbn,
                                   j.mi_item_reorder_level,
                                   j.mi_item_uom,
                                   j.mi_item_weight,
                                   j.mi_modifiedBy,
                                   j.mi_reorder_qty,
                                   j.mi_item_description,
                                   j.mi_businesschannel_InternalID,
                                   j.mi_businesschannel_name,
                                   j.mi_prodfamily,
                                   j.mi_tax_schedule,
                                   j.mi_tax_code,
                                   x.mip_item_price
                               }).ToList();
                this.DataReqInMQLog.Info("SyncNewItemToImas2: " + mapItem.Count() + " records to push.");

                if (mapItem.Count() > 0)
                {
                    foreach (var j in mapItem)
                    {
                        DateTime micreatedDate;
                        DateTime mireorderDate;
                        DateTime milastModifiedDate;
                        //if (j.mi_createdDate == null)
                        //    j.mi_createdDate = DateTime.Now;
                        //if (j.mi_reorder_date == null)
                        //    j.mi_reorder_date = DateTime.Now;
                        //if (j.mi_lastModifiedDate == null)
                        //    j.mi_lastModifiedDate = DateTime.Now;
                        if (j.mi_createdDate == null)
                            micreatedDate = DateTime.Now;
                        else
                            micreatedDate = Convert.ToDateTime(j.mi_createdDate);

                        if (j.mi_reorder_date == null)
                            mireorderDate = DateTime.Now;
                        else
                            mireorderDate = Convert.ToDateTime(j.mi_reorder_date);

                        if (j.mi_lastModifiedDate == null)
                            milastModifiedDate = DateTime.Now;
                        else
                            milastModifiedDate = Convert.ToDateTime(j.mi_lastModifiedDate);

                        cls_map_item item = new cls_map_item();
                        item.mi_item_internalID = j.mi_item_internalID;
                        item.mi_item_ID = j.mi_item_ID;
                        item.mi_createdBy = j.mi_createdBy;
                        item.mi_accountClassID = j.mi_accountClassID;
                        //item.mi_createdDate = j.mi_createdDate;
                        item.mi_createdDate = micreatedDate;
                        item.mi_isbn_secondary = j.mi_isbn_secondary;
                        item.mi_item_isbn = j.mi_item_isbn;
                        item.mi_item_reorder_level = j.mi_item_reorder_level;
                        item.mi_item_uom = j.mi_item_uom;
                        item.mi_item_weight = j.mi_item_weight;
                        //item.mi_lastModifiedDate = j.mi_lastModifiedDate;
                        item.mi_lastModifiedDate = milastModifiedDate;
                        item.mi_modifiedBy = j.mi_modifiedBy;
                        //item.mi_reorder_date = j.mi_reorder_date;
                        item.mi_reorder_date = mireorderDate;
                        item.mi_reorder_qty = j.mi_reorder_qty;
                        item.mi_item_description = j.mi_item_description;
                        item.mi_item_title = j.mi_item_description;
                        item.mi_item_internalID = j.mi_item_internalID;
                        item.mi_businesschannel_InternalID = j.mi_businesschannel_InternalID;
                        item.mi_businesschannel_name = j.mi_businesschannel_name;

                        //Add Product Family - WY-24.OCT.2014
                        item.mi_prodfamily = j.mi_prodfamily;

                        //Add Tax Schedule & Code - WY-24.MAR.2015
                        item.mi_tax_schedule = j.mi_tax_schedule;
                        item.mi_tax_code = j.mi_tax_code;
                        item.mip_item_price = Convert.ToDecimal(j.mip_item_price);
                        itemList.Add(item);

                    }
                    String queueLabel = "PUSH NEW ITEM" + " - " + MQjob + " > " + transactionType;
                    bTranStatus = SyncNewItemToImasMQ2(entities, queueLabel, itemList, transactionType, createdDate, sequence, mq_id);

                    //Boolean bTranStatus_tem = SyncNewItemToWmsMQ2(entities, queueLabel, itemList, transactionType, createdDate, sequence, mq_id);
                    this.DataReqInMQLog.Debug("SyncNewItemToImas2: Sending map_item to MQ with label: " + queueLabel + ".(Inserted Successfully: " + bTranStatus + ")");
                }
                else
                {
                    var updateRequestMQStatus = "update requestmq set rmq_status = 'NO-DATA', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                    entities.Database.ExecuteSqlCommand(updateRequestMQStatus);
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("SyncNewItemToImas2 Exception: " + ex.ToString());
            }
            return bTranStatus;
        }

        //Send netsuite_adjustment to MSMQ
        private Boolean CashSales(sdeEntities entities, String transactionType, String MQjob, String createdDate, DateTime rangeFrom, DateTime rangeTo, Int32 sequence, Int32 mq_id)
        {
            List<CashSales> csList = new List<CashSales>();
            Boolean bTranStatus = false;
            try
            {
                this.DataReqInMQLog.Debug("CashSales: Retrieving netsuite_adjustment.");
                var readJob = (from cs in entities.netsuite_adjustment
                               where cs.nsda_createdDate > rangeFrom && cs.nsda_createdDate <= rangeTo
                               select cs).ToList();

                this.DataFromNetsuiteLog.Info("CashSales: " + readJob.Count() + " records to push.");

                if (readJob.Count() > 0)
                {
                    foreach (var s in readJob)
                    {
                        CashSales cs = new CashSales();
                        Boolean active = false, posted = false;
                        /*if (s.nsda_adjustment_active == "1")
                        {
                            active = true;
                        }
                        if (s.nsda_adjustment_posted == "1")
                        {
                            posted = true;
                        }*/
                        cs.adjID = s.nsda_adjustment_ID;
                        cs.adjCode = s.nsda_adjustment_code;
                        cs.adjCreatedBy = s.nsda_createdBy;
                        cs.adjCreatedDate = s.nsda_createdDate;
                        cs.adjModifiedBy = s.nsda_modifiedBy;
                        cs.adjModifiedDate = s.nsda_modifiedDate;
                        cs.adjActive = s.nsda_adjustment_active;// active;
                        cs.adjPosted = s.nsda_adjustment_posted;// posted;
                        cs.adjRemarks = s.nsda_adjustment_remarks;
                        cs.adjWarehouse = s.nsda_adjustment_warehouse_ID;
                        cs.adjDesc = s.nsda_adjustment_description;
                        cs.adjType = s.nsda_adjustment_type;
                        csList.Add(cs);
                    }
                    String queueLabel = "CASH SALES" + " - " + MQjob + " > " + transactionType;
                    bTranStatus = CashSalesMQ(entities, queueLabel, csList, transactionType, createdDate, sequence, mq_id);
                    this.DataReqInMQLog.Debug("CashSales: Sending netsuite_adjustment to MQ with label: " + queueLabel + ".(Inserted Successfully: " + bTranStatus + ")");
                }
                else
                {
                    var updateRequestMQStatus = "update requestmq set rmq_status = 'NO-DATA', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                    entities.Database.ExecuteSqlCommand(updateRequestMQStatus);
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("CashSales Exception: " + ex.ToString());
            }
            return true;
        }
        //Send netsuite_adjustmentitem to MSMQ
        private Boolean CashSalesItem(sdeEntities entities, String transactionType, String MQjob, String createdDate, DateTime rangeFrom, DateTime rangeTo, Int32 sequence, Int32 mq_id)
        {
            List<CashSalesItem> csiList = new List<CashSalesItem>();
            Boolean bTranStatus = false;
            try
            {
                this.DataReqInMQLog.Debug("CashSalesItem: Retrieving netsuite_adjustmentitem.");
                var readJob = (from csi in entities.netsuite_adjustmentitem
                               where csi.nsdai_createdDate > rangeFrom && csi.nsdai_createdDate <= rangeTo
                               select csi).ToList();

                this.DataFromNetsuiteLog.Info("CashSalesItem: " + readJob.Count() + " records to push.");

                if (readJob.Count() > 0)
                {
                    foreach (var s in readJob)
                    {
                        CashSalesItem csi = new CashSalesItem();
                        csi.adjItemID = s.nsdai_adjustmentItem_ID;
                        csi.adjItemBusinessID = s.nsdai_itemBusiness_ID;
                        csi.adjItemQty = Convert.ToInt32(s.nsdai_adjustmentItem_qty);
                        csi.adjID = s.nsdai_nsda_adjustment_ID;
                        csi.adjItemStatus = s.nsdai_adjustmentItem_status;
                        csi.adjItemRemarks = s.nsdai_adjustmentItem_remarks;
                        csi.adjCreatedDate = s.nsdai_createdDate;
                        csiList.Add(csi);
                    }
                    String queueLabel = "CASH SALES" + " - " + MQjob + " > " + transactionType;
                    bTranStatus = CashSalesItemMQ(entities, queueLabel, csiList, transactionType, createdDate, sequence, mq_id);
                    this.DataReqInMQLog.Debug("CashSalesItem: Sending netsuite_adjustmentitem to MQ with label: " + queueLabel + ".(Inserted Successfully: " + bTranStatus + ")");
                }
                else
                {
                    var updateRequestMQStatus = "update requestmq set rmq_status = 'NO-DATA', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                    entities.Database.ExecuteSqlCommand(updateRequestMQStatus);
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("CashSalesItem Exception: " + ex.ToString());
            }
            return true;
        }


        private Boolean JobMQ(sdeEntities entities, String queueLabel, List<JOB> jobList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_SSA;
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {
                System.Messaging.Message message = new System.Messaging.Message(@Resource.MESSAGE_LABEL_QUEUENAME_SSA);
                message.Priority = MessagePriority.Low;
                message.Label = queueLabel;
                message.Body = jobList;
                message.Recoverable = true;
                messageQueue.Send(message, msgTx);

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID, mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1', 'netsuite_job', 'PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("JobMQ: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);


                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Debug("JobMQ Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Debug("JobMQ Exception 2: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }
            return bTranStatus;
        }
        private Boolean JobMOMQ(sdeEntities entities, String queueLabel, List<JobMO> jobList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_SSA;
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {
                System.Messaging.Message message = new System.Messaging.Message(@Resource.MESSAGE_LABEL_QUEUENAME_SSA);
                message.Priority = MessagePriority.Low;
                message.Label = queueLabel;
                message.Body = jobList;
                message.Recoverable = true;
                messageQueue.Send(message, msgTx);

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID, mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1', 'netsuite_jobmo', 'PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("JobMOMQ: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);

                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Error("JobMOMQ Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("JobMOMQ Exception 2: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }
            return bTranStatus;
        }
        private Boolean JobMOClsMQ(sdeEntities entities, String queueLabel, List<JobMOCls> jobList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_SSA;
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {
                System.Messaging.Message message = new System.Messaging.Message(@Resource.MESSAGE_LABEL_QUEUENAME_SSA);
                message.Priority = MessagePriority.Low;
                message.Label = queueLabel;
                message.Body = jobList;
                message.Recoverable = true;
                messageQueue.Send(message, msgTx);

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID, mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1', 'netsuite_jobmocls', 'PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("JobMOClsMQ: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);

                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Error("JobMOClsMQ Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("JobMOClsMQ Exception 2: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }
            return bTranStatus;
        }
        private Boolean JobMOAddressMQ(sdeEntities entities, String queueLabel, List<JobMoAddress> jobList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_SSA;
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {
                System.Messaging.Message message = new System.Messaging.Message(@Resource.MESSAGE_LABEL_QUEUENAME_SSA);
                message.Priority = MessagePriority.Low;
                message.Label = queueLabel;
                message.Body = jobList;
                message.Recoverable = true;
                messageQueue.Send(message, msgTx);

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID, mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1', 'netsuite_jobmo_address', 'PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("JobMOAddressMQ: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);

                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Error("JobMOAddressMQ Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("JobMOAddressMQ Exception 2: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }
            return bTranStatus;
        }
        private Boolean JobMOPackMQ(sdeEntities entities, String queueLabel, List<JobMoPack> jobList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_SSA;
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {
                System.Messaging.Message message = new System.Messaging.Message(@Resource.MESSAGE_LABEL_QUEUENAME_SSA);
                message.Priority = MessagePriority.Low;
                message.Label = queueLabel;
                message.Body = jobList;
                message.Recoverable = true;
                messageQueue.Send(message, msgTx);

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID, mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1', 'netsuite_jobmo_pack', 'PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("JobMOPackMQ: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);

                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Error("JobMOPackMQ Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("JobMOPackMQ Exception 2: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }
            return bTranStatus;
        }
        private Boolean JobItemMQ(sdeEntities entities, String queueLabel, List<JobItem> jobList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_SSA;
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {
                System.Messaging.Message message = new System.Messaging.Message(@Resource.MESSAGE_LABEL_QUEUENAME_SSA);
                message.Priority = MessagePriority.Low;
                message.Label = queueLabel;
                message.Body = jobList;
                message.Recoverable = true;
                messageQueue.Send(message, msgTx);

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID, mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1', 'netsuite_jobitem', 'PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("JobItemMQ: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);

                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Error("JobItemMQ Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("JobItemMQ Exception 2: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }
            return bTranStatus;
        }
        private Boolean JobOrdMasterMQ(sdeEntities entities, String queueLabel, List<JobOrdMaster> jobList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_SSA;
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {
                System.Messaging.Message message = new System.Messaging.Message(@Resource.MESSAGE_LABEL_QUEUENAME_SSA);
                message.Priority = MessagePriority.Low;
                message.Label = queueLabel;
                message.Body = jobList;
                message.Recoverable = true;
                messageQueue.Send(message, msgTx);

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID, mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1', 'netsuite_jobordmaster', 'PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("JobOrdMasterMQ: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);

                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Error("JobOrdMasterMQ Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("JobOrdMasterMQ Exception 2: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }
            return bTranStatus;
        }
        private Boolean JobOrdMasterPackMQ(sdeEntities entities, String queueLabel, List<JobOrdMasterPack> jobList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_SSA;
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {
                System.Messaging.Message message = new System.Messaging.Message(@Resource.MESSAGE_LABEL_QUEUENAME_SSA);
                message.Priority = MessagePriority.Low;
                message.Label = queueLabel;
                message.Body = jobList;
                message.Recoverable = true;
                messageQueue.Send(message, msgTx);

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID, mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1', 'netsuite_jobordmaster_pack', 'PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("JobOrdMasterPackMQ: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);

                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Error("JobOrdMasterPackMQ Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("JobOrdMasterPackMQ Exception 2: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }
            return bTranStatus;
        }
        private Boolean JobOrdMasterPackDetailMQ(sdeEntities entities, String queueLabel, List<JobOrdMasterPackDetail> dataList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_SSA;
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {
                System.Messaging.Message message = new System.Messaging.Message(@Resource.MESSAGE_LABEL_QUEUENAME_SSA);
                message.Priority = MessagePriority.Low;
                message.Label = queueLabel;
                message.Body = dataList;
                message.Recoverable = true;
                messageQueue.Send(message, msgTx);

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID, mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1', 'netsuite_jobordmaster_packdetail', 'PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("JobOrdMasterPackDetailMQ: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);

                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Error("JobOrdMasterPackDetailMQ Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("JobOrdMasterPackDetailMQ Exception 2: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }
            return bTranStatus;
        }
        private Boolean DiscountAndTaxMQ(sdeEntities entities, String queueLabel, List<DiscountAndTax> jobList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_SSA;
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {
                System.Messaging.Message message = new System.Messaging.Message(@Resource.MESSAGE_LABEL_QUEUENAME_SSA);
                message.Priority = MessagePriority.Low;
                message.Label = queueLabel;
                message.Body = jobList;
                message.Recoverable = true;
                messageQueue.Send(message, msgTx);

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID, mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1', 'NA', 'PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("DiscountAndTaxMQ: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);

                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Error("DiscountAndTaxMQ Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("DiscountAndTaxMQ Exception 2: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }
            return bTranStatus;
        }
        private Boolean SOFulfillmentMQ(sdeEntities entities, String queueLabel, List<requestDataForm> jobList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_SSA;
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {
                System.Messaging.Message message = new System.Messaging.Message(@Resource.MESSAGE_LABEL_QUEUENAME_SSA);
                message.Priority = MessagePriority.Low;
                message.Label = queueLabel;
                message.Body = jobList;
                message.Recoverable = true;
                messageQueue.Send(message, msgTx);

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID,mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1','NA','PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("SOFulfillmentMQ: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);

                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Error("SOFulfillmentMQ Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("SOFulfillmentMQ Exception 2: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }
            return bTranStatus;
        }
        //Split the jobordmaster table with sofulfillment - WY-26.AUG.2014
        private Boolean JobOrdMasterExtractionMQ(sdeEntities entities, String queueLabel, List<requestDataForm> jobList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_SSA;
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {
                System.Messaging.Message message = new System.Messaging.Message(@Resource.MESSAGE_LABEL_QUEUENAME_SSA);
                message.Priority = MessagePriority.Low;
                message.Label = queueLabel;
                message.Body = jobList;
                message.Recoverable = true;
                messageQueue.Send(message, msgTx);

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID,mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1','NA','PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("JobOrdMasterExtractionMQ: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);

                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Error("JobOrdMasterExtractionMQ Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("JobOrdMasterExtractionMQ Exception 2: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }
            return bTranStatus;
        }
        private Boolean PurchaseRequestMQ(sdeEntities entities, String queueLabel, List<PurchaseRequest> jobList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            Guid gjob_id = Guid.NewGuid();
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_SSA;
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {
                System.Messaging.Message message = new System.Messaging.Message(@Resource.MESSAGE_LABEL_QUEUENAME_SSA);
                message.Priority = MessagePriority.Low;
                message.Label = queueLabel;
                message.Body = jobList;
                message.Recoverable = true;
                messageQueue.Send(message, msgTx);

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID, mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1', 'netsuite_pr', 'PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("PurchaseRequestMQ: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);

                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        #region Update PR Push Status
                        for (int i = 0; i < jobList.Count(); i++)
                        {
                            var updPR = "update netsuite_pr set nspr_pushStatus = '" + gjob_id.ToString() + "' where nspr_pr_number = '" + jobList[i].prNumber + "' " +
                                        "and nspr_pushStatus is null ";
                            this.DataReqInMQLog.Debug("PurchaseRequestMQ: " + updPR);
                            entities.Database.ExecuteSqlCommand(updPR);
                        }
                        #endregion

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Error("PurchaseRequestMQ Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("PurchaseRequestMQ Exception 1: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }
            return bTranStatus;
        }
        private Boolean PurchaseRequestItemMQ(sdeEntities entities, String queueLabel, List<PurchaseRequestItem> jobList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            Guid gjob_id = Guid.NewGuid();
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_SSA;
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {
                System.Messaging.Message message = new System.Messaging.Message(@Resource.MESSAGE_LABEL_QUEUENAME_SSA);
                message.Priority = MessagePriority.Low;
                message.Label = queueLabel;
                message.Body = jobList;
                message.Recoverable = true;
                messageQueue.Send(message, msgTx);

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID, mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1', 'netsuite_pritem', 'PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("PurchaseRequestItemMQ: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);

                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        #region Update PR Item Push Status
                        for (int i = 0; i < jobList.Count(); i++)
                        {
                            var updPR = "update netsuite_pritem a JOIN netsuite_pr b ON a.nspi_nspr_pr_ID = b.nspr_pr_ID " +
                                        "set a.nspi_pushStatus = '" + gjob_id.ToString() + "' where b.nspr_pr_ID = '" + jobList[i].prID + "' " +
                                        "and a.nspi_pushStatus is null ";
                            this.DataReqInMQLog.Debug("PurchaseRequestMQ: " + updPR);
                            entities.Database.ExecuteSqlCommand(updPR);
                        }
                        #endregion

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Error("PurchaseRequestItemMQ Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("PurchaseRequestItemMQ Exception 2: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }
            return bTranStatus;
        }
        private Boolean POReceiveMQ(sdeEntities entities, String queueLabel, List<requestDataForm> jobList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_SSA;
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {
                System.Messaging.Message message = new System.Messaging.Message(@Resource.MESSAGE_LABEL_QUEUENAME_SSA);
                message.Priority = MessagePriority.Low;
                message.Label = queueLabel;
                message.Body = jobList;
                message.Recoverable = true;
                messageQueue.Send(message, msgTx);

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID,mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1','NA', 'PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("POReceiveMQ: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);

                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Error("POReceiveMQ Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("POReceiveMQ Exception 2: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }
            return bTranStatus;
        }
        private Boolean POReceiveItemMQ(sdeEntities entities, String queueLabel, List<requestDataForm> jobList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_SSA;
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {
                System.Messaging.Message message = new System.Messaging.Message(@Resource.MESSAGE_LABEL_QUEUENAME_SSA);
                message.Priority = MessagePriority.Low;
                message.Label = queueLabel;
                message.Body = jobList;
                message.Recoverable = true;
                messageQueue.Send(message, msgTx);

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID,mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1','NA', 'PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("POReceiveItemMQ: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);

                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Error("POReceiveItemMQ Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("POReceiveItemMQ Exception 1: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }
            return bTranStatus;
        }
        private Boolean SOReturnMQ(sdeEntities entities, String queueLabel, List<SOReturn> jobList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_SSA;
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {
                System.Messaging.Message message = new System.Messaging.Message(@Resource.MESSAGE_LABEL_QUEUENAME_SSA);
                message.Priority = MessagePriority.Low;
                message.Label = queueLabel;
                message.Body = jobList;
                message.Recoverable = true;
                messageQueue.Send(message, msgTx);

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID,mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1','netsuite_return', 'PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("SOReturnMQ: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);

                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Error("SOReturnMQ Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("SOReturnMQ Exception 2: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }
            return bTranStatus;
        }
        private Boolean SOReturnItemMQ(sdeEntities entities, String queueLabel, List<SOReturnItem> jobList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_SSA;
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {
                System.Messaging.Message message = new System.Messaging.Message(@Resource.MESSAGE_LABEL_QUEUENAME_SSA);
                message.Priority = MessagePriority.Low;
                message.Label = queueLabel;
                message.Body = jobList;
                message.Recoverable = true;
                messageQueue.Send(message, msgTx);

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID,mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1','netsuite_returnitem', 'PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("SOReturnItemMQ: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);

                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Error("SOReturnItemMQ Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("SOReturnItemMQ Exception 2: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }
            return bTranStatus;
        }
        private Boolean SOReturnUpdateMQ(sdeEntities entities, String queueLabel, List<requestDataForm> jobList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_SSA;
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {
                System.Messaging.Message message = new System.Messaging.Message(@Resource.MESSAGE_LABEL_QUEUENAME_SSA);
                message.Priority = MessagePriority.Low;
                message.Label = queueLabel;
                message.Body = jobList;
                message.Recoverable = true;
                messageQueue.Send(message, msgTx);

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID,mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1','NA', 'PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("SOReturnUpdateMQ: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);

                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Error("SOReturnUpdateMQ Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("SOReturnUpdateMQ Exception 2: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }
            return bTranStatus;
        }
        private Boolean SyncNewItemToImasMQ(sdeEntities entities, String queueLabel, List<cls_map_item> jobList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_SSA;
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {

                System.Messaging.Message message = new System.Messaging.Message(@Resource.MESSAGE_LABEL_QUEUENAME_SSA);
                message.Priority = MessagePriority.Low;
                message.Recoverable = true;

                ////Push Item in every 1000 records - WY-13.OCT.2014
                //message.Label = queueLabel;
                //message.Body = jobList;
                //messageQueue.Send(message, msgTx); 
                Int32 size = Convert.ToInt32(@Resource.SEND_QUEUE_SIZE);
                List<List<cls_map_item>> list0 = new List<List<cls_map_item>>();
                Int32 c0 = 0;
                while (jobList.Count > 0)
                {
                    Int32 count0 = jobList.Count > size ? size : jobList.Count;
                    list0.Add(jobList.GetRange(0, count0));
                    message.Label = queueLabel;
                    message.Body = list0[c0];
                    messageQueue.Send(message, msgTx);
                    jobList.RemoveRange(0, count0);
                    c0++;
                }

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID,mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1','NA', 'PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("SyncNewItemToImasMQ: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);

                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Error("SyncNewItemToImasMQ Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("SyncNewItemToImasMQ Exception 2: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }
            return bTranStatus;
        }

        //Use wms queue
        private Boolean SyncNewItemToWmsMQ(sdeEntities entities, String queueLabel, List<cls_map_item> jobList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            this.DataReqInMQLog.Debug("WMS SyncNewItemToImasMQ: START");

            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_WMS;

            this.DataReqInMQLog.Debug("WMS SyncNewItemToImasMQ: START for " + qname);
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {
                this.DataReqInMQLog.Debug("WMS SyncNewItemToImasMQ: START for " + @Resource.MESSAGE_LABEL_QUEUENAME_WMS);

                System.Messaging.Message message = new System.Messaging.Message(@Resource.MESSAGE_LABEL_QUEUENAME_WMS);
                message.Priority = MessagePriority.Low;
                message.Recoverable = true;

                ////Push Item in every 1000 records - WY-13.OCT.2014
                //message.Label = queueLabel;
                //message.Body = jobList;
                //messageQueue.Send(message, msgTx); 

                Int32 size = Convert.ToInt32(@Resource.SEND_QUEUE_SIZE);
                List<List<cls_map_item>> list0 = new List<List<cls_map_item>>();
                Int32 c0 = 0;
                while (jobList.Count > 0)
                {
                    Int32 count0 = jobList.Count > size ? size : jobList.Count;
                    list0.Add(jobList.GetRange(0, count0));
                    message.Label = queueLabel;
                    message.Body = list0[c0];
                    messageQueue.Send(message, msgTx);
                    jobList.RemoveRange(0, count0);
                    c0++;
                }

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID,mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1','NA', 'PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("WMS SyncNewItemToImasMQ: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);

                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Error("WMS SyncNewItemToImasMQ Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("WMS SyncNewItemToImasMQ Exception 2: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }

            this.DataReqInMQLog.Debug("WMS SyncNewItemToImasMQ: END");
            return bTranStatus;
        }

        //Added to get daily created items - WY-17.OCT.2014
        private Boolean SyncNewItemToImasMQ2(sdeEntities entities, String queueLabel, List<cls_map_item> jobList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_SSA;
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {

                System.Messaging.Message message = new System.Messaging.Message(@Resource.MESSAGE_LABEL_QUEUENAME_SSA);
                message.Priority = MessagePriority.Low;
                message.Recoverable = true;
                Int32 size = Convert.ToInt32(@Resource.SEND_QUEUE_SIZE);
                List<List<cls_map_item>> list0 = new List<List<cls_map_item>>();
                Int32 c0 = 0;
                while (jobList.Count > 0)
                {
                    Int32 count0 = jobList.Count > size ? size : jobList.Count;
                    list0.Add(jobList.GetRange(0, count0));
                    message.Label = queueLabel;
                    message.Body = list0[c0];
                    messageQueue.Send(message, msgTx);
                    jobList.RemoveRange(0, count0);
                    c0++;
                }

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID,mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1','NA', 'PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("SyncNewItemToImasMQ2: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);

                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Error("SyncNewItemToImasMQ2 Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("SyncNewItemToImasMQ2 Exception 2: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }
            return bTranStatus;
        }
        //Use wms queue
        private Boolean SyncNewItemToWmsMQ2(sdeEntities entities, String queueLabel, List<cls_map_item> jobList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_WMS;
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {

                System.Messaging.Message message = new System.Messaging.Message(qname);
                message.Priority = MessagePriority.Low;
                message.Recoverable = true;
                Int32 size = Convert.ToInt32(@Resource.SEND_QUEUE_SIZE);
                List<List<cls_map_item>> list0 = new List<List<cls_map_item>>();
                Int32 c0 = 0;
                while (jobList.Count > 0)
                {
                    Int32 count0 = jobList.Count > size ? size : jobList.Count;
                    list0.Add(jobList.GetRange(0, count0));
                    message.Label = queueLabel;
                    message.Body = list0[c0];
                    messageQueue.Send(message, msgTx);
                    jobList.RemoveRange(0, count0);
                    c0++;
                }

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID,mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1','NA', 'PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("SyncNewItemToWmsMQ2: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);

                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Error("SyncNewItemToWmsMQ2 Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("SyncNewItemToWmsMQ2 Exception 2: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }
            return bTranStatus;
        }

        private Boolean CashSalesMQ(sdeEntities entities, String queueLabel, List<CashSales> jobList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_SSA;
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {
                System.Messaging.Message message = new System.Messaging.Message(@Resource.MESSAGE_LABEL_QUEUENAME_SSA);
                message.Priority = MessagePriority.Low;
                message.Label = queueLabel;
                message.Body = jobList;
                message.Recoverable = true;
                messageQueue.Send(message, msgTx);

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID,mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1','netsuite_adjustment', 'PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("CashSalesMQ: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);

                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Error("CashSalesMQ Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("CashSalesMQ Exception 2: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }
            return bTranStatus;
        }
        private Boolean CashSalesItemMQ(sdeEntities entities, String queueLabel, List<CashSalesItem> jobList, String transactionType, String createdDate, Int32 sequence, Int32 mq_id)
        {
            Boolean bTranStatus;
            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            MessageQueueTransaction msgTx = new MessageQueueTransaction();
            MessageQueue messageQueue = null;

            String qname = @Resource.QUEUENAME_SSA;
            messageQueue = new MessageQueue(qname);
            msgTx.Begin();
            try
            {
                System.Messaging.Message message = new System.Messaging.Message(@Resource.MESSAGE_LABEL_QUEUENAME_SSA);
                message.Priority = MessagePriority.Low;
                message.Label = queueLabel;
                message.Body = jobList;
                message.Recoverable = true;
                messageQueue.Send(message, msgTx);

                using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    try
                    {
                        int indexFind1 = queueLabel.IndexOf("-") + 1;
                        int indexFind2 = queueLabel.IndexOf(">");
                        string jobMQ = queueLabel.Substring(indexFind1, indexFind2 - indexFind1);

                        var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID,mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                       "('" + transactionType + "', '" + jobMQ.Trim().ToString() + "', '1','netsuite_adjustmentitem', 'PUSHED', '" + convertDateToString(DateTime.Now) + "')";
                        this.DataReqInMQLog.Debug("CashSalesItemMQ: " + insertMQ);
                        entities.Database.ExecuteSqlCommand(insertMQ);

                        var updateRequestMQStatus = "update requestmq set rmq_status = 'UPLOADED', rmq_completedAt='" + convertDateToString(DateTime.Now) + "' " +
                                "where rmq_sche_transactionType='" + transactionType + "' and rmq_id = '" + mq_id + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestMQStatus);

                        scopeOuter.Complete();
                        msgTx.Commit();
                        bTranStatus = true;
                    }
                    catch (Exception ex)
                    {
                        this.DataReqInMQLog.Error("CashSalesItemMQ Exception 1: " + ex.ToString());
                        msgTx.Abort();
                        bTranStatus = false;
                    }
                }
            }
            catch (Exception ex)
            {
                this.DataReqInMQLog.Error("CashSalesItemMQ Exception 2: " + ex.ToString());
                msgTx.Abort();
                bTranStatus = false;
            }
            finally
            {
                messageQueue.Close();
            }
            return bTranStatus;
        }
        #endregion

        #region Pull Queue function
        private String JobOrdScan(List<JobOrdScan> josList)
        {
            String insJos = "SUCCESS";

            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
            {
                try
                {
                    sdeEntities entities = new sdeEntities();
                    insertJobOrdScan(entities, josList);
                    scopeOuter.Complete();
                }
                catch (Exception ex)
                {
                    this.DataReqInMQLog.Error("JobOrdScan Exception: " + ex.Message.ToString());
                    insJos = "FAIL";
                }
            }
            this.DataReqInMQLog.Info("JobOrdScan: wms_jobordscan insertion status. " + insJos);
            return insJos;
        }
        private String JobOrdScanPack(List<JobOrdScanPack> jospList)
        {
            String insJos = "SUCCESS";

            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
            {
                try
                {
                    sdeEntities entities = new sdeEntities();
                    insertJobOrdScanPack(entities, jospList);
                    scopeOuter.Complete();
                }
                catch (Exception ex)
                {
                    this.DataReqInMQLog.Error("JobOrdScanPack Exception: " + ex.Message.ToString());
                    insJos = "FAIL";
                }
            }
            this.DataReqInMQLog.Info("JobOrdScanPack: wms_jobordscan_pack insertion status. " + insJos);
            return insJos;
        }
        private String JobOrdMasterPack(List<JobOrdMasterPack> dataList)
        {
            String insJos = "SUCCESS";

            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
            {
                try
                {
                    sdeEntities entities = new sdeEntities();
                    insertJobOrdMasterPack(entities, dataList);
                    scopeOuter.Complete();
                }
                catch (Exception ex)
                {
                    this.DataReqInMQLog.Error("JobOrdMasterPack Exception: " + ex.Message.ToString());
                    insJos = "FAIL";
                }
            }
            this.DataReqInMQLog.Info("JobOrdMasterPack: wms_jobordmaster_pack insertion status. " + insJos);
            return insJos;
        }
        private String JobOrdMasterPackDetail(List<JobOrdMasterPackDetail> dataList)
        {
            String insJos = "SUCCESS";

            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
            {
                try
                {
                    sdeEntities entities = new sdeEntities();
                    insertJobOrdMasterPackDetail(entities, dataList);
                    scopeOuter.Complete();
                }
                catch (Exception ex)
                {
                    this.DataReqInMQLog.Error("JobOrdMasterPackDetail Exception: " + ex.Message.ToString());
                    insJos = "FAIL";
                }
            }
            this.DataReqInMQLog.Info("JobOrdMasterPackDetail: wms_jobordscan_packdetail insertion status. " + insJos);
            return insJos;
        }
        private String JobItem(List<JobItem> dataList)
        {
            String insJos = "SUCCESS";

            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
            {
                try
                {
                    sdeEntities entities = new sdeEntities();
                    insertJobItem(entities, dataList);
                    scopeOuter.Complete();
                }
                catch (Exception ex)
                {
                    this.DataReqInMQLog.Error("JobItem Exception: " + ex.Message.ToString());
                    insJos = "FAIL";
                }
            }
            this.DataReqInMQLog.Info("JobItem: netsuite_jobitem insertion status. " + insJos);
            return insJos;
        }
        private String JobOrdMaster(List<JobOrdMaster> dataList)
        {
            String insJos = "SUCCESS";

            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
            {
                try
                {
                    sdeEntities entities = new sdeEntities();
                    insertJobOrdMaster(entities, dataList);
                    scopeOuter.Complete();
                }
                catch (Exception ex)
                {
                    this.DataReqInMQLog.Error("JobOrdMaster Exception: " + ex.Message.ToString());
                    insJos = "FAIL";
                }
            }
            this.DataReqInMQLog.Info("JobOrdMaster: netsuite_jobordmaster insertion status. " + insJos);
            return insJos;
        }
        private String JobMOPack(List<JobMoPack> dataList)
        {
            String insJos = "SUCCESS";

            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
            {
                try
                {
                    sdeEntities entities = new sdeEntities();
                    insertJobMOPack(entities, dataList);
                    scopeOuter.Complete();
                }
                catch (Exception ex)
                {
                    this.DataReqInMQLog.Error("JobMOPack Exception: " + ex.Message.ToString());
                    insJos = "FAIL";
                }
            }
            this.DataReqInMQLog.Info("JobMOPack: netsuite_jobmo_pack insertion status. " + insJos);
            return insJos;
        }
        private String POReceive(List<POReceive> porList)
        {
            String insJos = "SUCCESS";

            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
            {
                try
                {
                    sdeEntities entities = new sdeEntities();
                    insertPOReceive(entities, porList);
                    scopeOuter.Complete();
                }
                catch (Exception ex)
                {
                    this.DataReqInMQLog.Error("POReceive Exception: " + ex.Message.ToString());
                    insJos = "FAIL";
                }
            }
            this.DataReqInMQLog.Info("POReceive: wms_poreceive insertion status. " + insJos);
            return insJos;
        }
        private String POReceiveItem(List<POReceiveItem> poriList)
        {
            String insJos = "SUCCESS";

            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
            {
                try
                {
                    sdeEntities entities = new sdeEntities();
                    insertPOReceiveItem(entities, poriList);
                    scopeOuter.Complete();
                }
                catch (Exception ex)
                {
                    this.DataReqInMQLog.Error("POReceiveItem Exception: " + ex.Message.ToString());
                    insJos = "FAIL";
                }
            }
            this.DataReqInMQLog.Info("POReceiveItem: wms_poreceive item insertion status. " + insJos);
            return insJos;
        }
        private String SOReturn(List<SOReturn> sorList)
        {
            String insJos = "SUCCESS";

            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
            {
                try
                {
                    sdeEntities entities = new sdeEntities();
                    insertSOReturn(entities, sorList);
                    scopeOuter.Complete();
                }
                catch (Exception ex)
                {
                    this.DataReqInMQLog.Error("SOReturn Exception: " + ex.Message.ToString());
                    insJos = "FAIL";
                }
            }
            this.DataReqInMQLog.Info("SOReturn: netsuite_return insertion status. " + insJos);
            return insJos;
        }
        private String SOReturnItem(List<SOReturnItem> sriList)
        {
            String insJos = "SUCCESS";

            Int32 minute = Convert.ToInt32(@Resource.TIMEOUTQUEUE);
            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(minute)
            };

            using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))
            {
                try
                {
                    sdeEntities entities = new sdeEntities();
                    insertSOReturnItem(entities, sriList);
                    scopeOuter.Complete();
                }
                catch (Exception ex)
                {
                    this.DataReqInMQLog.Error("SOReturnItem Exception: " + ex.Message.ToString());
                    insJos = "FAIL";
                }
            }
            this.DataReqInMQLog.Info("SOReturnItem: netsuite_returnitem insertion status. " + insJos);
            return insJos;
        }

        private void insertJobOrdScan(sdeEntities entities, List<JobOrdScan> josList)
        {
            using (TransactionScope scope1 = new TransactionScope())
            {
                try
                {
                    this.DataReqInMQLog.Info("insertJobOrdScan: START");

                    for (int i = 0; i < josList.Count(); i++)
                    {
                        String strChkJobScan = "select count(*) from wms_jobordscan where jos_jobordscan_ID = '" + josList[i].jobOrdScanID + "'";
                        this.DataReqInMQLog.Debug("insertJobOrdScan: " + strChkJobScan);

                        String _jobordScan = "0";
                        _jobordScan = entities.Database.SqlQuery<string>(strChkJobScan).FirstOrDefault<string>();

                        this.DataReqInMQLog.Info("insertJobOrdScan: Total Record: " + _jobordScan);
                        if (_jobordScan == "0")
                        {
                            String moNo = null;

                            //var delete = "delete from wms_jobordscan where jos_jobordscan_ID = '" + josList[i].jobOrdScanID + "'";
                            //this.DataReqInMQLog.Debug("insertJobOrdScan: " + delete);
                            //entities.Database.ExecuteSqlCommand(delete);

                            if (josList[i].businessChannelCode.Equals("ET"))
                            {
                                moNo = "SO-" + josList[i].moNo;
                            }
                            else
                            {
                                moNo = josList[i].moNo;
                            }

                            var insertJobOrdScan = "insert into wms_jobordscan (jos_jobordscan_ID,jos_consignmentNote,jos_country_tag,jos_deliveryRef,jos_job_ID,jos_jobmo_ID,jos_ordRecNo,jos_scanDate,jos_moNo," +
                                "jos_businessChannel_ID,jos_businessChannel_code,jos_exportDate,jos_load_ind,jos_doNo,jos_createdDate,jos_rangeTo) values " +
                                "('" + josList[i].jobOrdScanID + "','" + josList[i].consignmentNote + "','" + josList[i].countryTag + "','" + josList[i].deliveryRef + "','" + josList[i].jobID + "'," +
                                "'" + josList[i].jobMoID + "','" + josList[i].ordRecNo + "','" + convertDateToString(josList[i].scanDate) + "','" + moNo + "','" + josList[i].businessChannelID + "'," +
                                "'" + josList[i].businessChannelCode + "','" + convertDateToString(josList[i].exportDate) + "','" + josList[i].loadInd + "','" + josList[i].doNo + "','" + convertDateToString(DateTime.Now) + "','" + convertDateToString(josList[i].rangeTo) + "')";

                            this.DataReqInMQLog.Debug("insertJobOrdScan: " + insertJobOrdScan);
                            entities.Database.ExecuteSqlCommand(insertJobOrdScan);
                        }
                    }

                    Guid gjob_id = Guid.NewGuid();
                    var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID, mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                    "('MQPUSH-JOB ORD SCAN', '" + gjob_id.ToString() + "', '" + josList.Count().ToString() + "', 'wms_jobordscan', 'PULLED', '" + convertDateToString(DateTime.Now) + "')";
                    this.DataReqInMQLog.Debug("Pull: " + insertMQ);
                    entities.Database.ExecuteSqlCommand(insertMQ);

                    scope1.Complete();
                }
                catch (Exception ex)
                {
                    this.DataReqInMQLog.Error("insertJobOrdScan Exception: " + ex.Message.ToString());
                }
            }
        }
        private void insertJobOrdScanPack(sdeEntities entities, List<JobOrdScanPack> jospList)
        {
            using (TransactionScope scope1 = new TransactionScope())
            {
                try
                {
                    for (int i = 0; i < jospList.Count(); i++)
                    {
                        String jobID = jospList[i].jobID;
                        String moNo = jospList[i].moNo;
                        String ordRecNo = jospList[i].ordRecNo;

                        String strChkJobScan = "select count(*) from wms_jobordscan_pack where josp_pack_ID = '" + jospList[i].jobordmaster_pack_id + "'";
                        this.DataReqInMQLog.Debug("insertJobOrdScanPack: " + strChkJobScan);

                        String _jobordScan = "0";
                        _jobordScan = entities.Database.SqlQuery<string>(strChkJobScan).FirstOrDefault<string>();

                        this.DataReqInMQLog.Info("insertJobOrdScanPack: Total Record: " + _jobordScan);
                        if (_jobordScan == "0")
                        {
                            //var delete = "delete from wms_jobordscan_pack where josp_pack_ID = '" + jospList[i].jobordmaster_pack_id + "'";
                            //this.DataReqInMQLog.Debug("insertJobOrdScanPack: " + delete);
                            //entities.Database.ExecuteSqlCommand(delete);

                            var insertJobOrdScanPack = "insert into wms_jobordscan_pack (josp_pack_ID,josp_status,josp_ordFulfill,josp_ordPoint,josp_posted_ind,josp_createdDate," +
                                "josp_rangeTo,josp_moNo, josp_jobID,josp_ordRecNo, josp_exportDate) values " +
                                "('" + jospList[i].jobordmaster_pack_id + "','" + jospList[i].status + "','" + jospList[i].ordFulfill + "','" + jospList[i].ordPoint + "','" + jospList[i].posted_ind + "'," +
                                "'" + convertDateToString(DateTime.Now) + "','" + convertDateToString(jospList[i].rangeTo) + "','" + jospList[i].moNo + "'," +
                                "'" + jospList[i].jobID + "','" + jospList[i].ordRecNo + "','" + convertDateToString(jospList[i].exportDate) + "')";
                            this.DataReqInMQLog.Debug("insertJobOrdScanPack: " + insertJobOrdScanPack);
                            entities.Database.ExecuteSqlCommand(insertJobOrdScanPack);
                        }

                    }

                    Guid gjob_id = Guid.NewGuid();
                    var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID, mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                    "('MQPUSH-JOB ORD SCAN PACK', '" + gjob_id.ToString() + "', '" + jospList.Count().ToString() + "', 'wms_jobordscan_pack', 'PULLED', '" + convertDateToString(DateTime.Now) + "')";
                    this.DataReqInMQLog.Debug("Pull: " + insertMQ);
                    entities.Database.ExecuteSqlCommand(insertMQ);

                    scope1.Complete();
                }
                catch (Exception ex)
                {
                    this.DataReqInMQLog.Error("insertJobOrdScanPack Exception: " + ex.Message.ToString());
                }
            }
        }
        private void insertJobOrdMasterPack(sdeEntities entities, List<JobOrdMasterPack> dataList)
        {
            using (TransactionScope scope1 = new TransactionScope())
            {
                try
                {
                    String tempJobID = null;
                    Boolean notExist = false;
                    for (int i = 0; i < dataList.Count(); i++)
                    {
                        var delete = "delete from netsuite_jobordmaster_pack where nsjomp_jobOrdMaster_pack_ID = '" + dataList[i].ordMasterPackID + "'";
                        this.DataReqInMQLog.Debug("insertJobOrdMasterPack: " + delete);
                        entities.Database.ExecuteSqlCommand(delete);

                        //if (dataList[i].jobID != tempJobID)
                        //{
                        //    tempJobID = dataList[i].jobID;
                        //    notExist = false;

                        //    var query1 = (from q1 in entities.netsuite_jobordmaster_pack
                        //                  where q1.nsjomp_job_ID == tempJobID
                        //                  select q1.nsjomp_job_ID).Distinct().ToList();
                        //    if (query1.Count() <= 0)
                        //    {
                        //        notExist = true;
                        //    }
                        //}
                        //if (notExist == true)
                        //{
                        var insertNetsuiteJobOrdMasterPack = "insert into netsuite_jobordmaster_pack (nsjomp_jobOrdMaster_pack_ID,nsjomp_jobOrdMaster_ID,nsjomp_job_ID,nsjomp_ordNo,nsjomp_ordPack," +
                        "nsjomp_qty,nsjomp_ordQty,nsjomp_ordPrice,nsjomp_ordReplace,nsjomp_ofrCode,nsjomp_status,nsjomp_ordPackStatus,nsjomp_ordFulfill,nsjomp_ordDetDate,nsjomp_ordPoint," +
                        "nsjomp_packTitle,nsjomp_ofrDesc,nsjomp_orderLine,nsjomp_createdDate, nsjomp_rangeTo,nsjomp_moNo, nsjomp_tax_code, nsjomp_gstamount) values " +
                        "('" + dataList[i].ordMasterPackID + "','" + dataList[i].ordMasterID + "','" + dataList[i].jobID + "','" + dataList[i].ordNo + "','" + dataList[i].ordPack + "'," +
                        "'" + dataList[i].ordQty + "','" + dataList[i].ordQty + "','" + dataList[i].ordPrice + "','" + dataList[i].ordReplace + "','" + dataList[i].ofrCode + "'," +
                        "'" + dataList[i].status + "','" + dataList[i].ordPackStatus + "','" + dataList[i].ordFulfill + "'," +
                        "'" + convertDateToString(dataList[i].ordDetDate) + "','" + dataList[i].ordPoint + "','" + dataList[i].packTitle.Replace("'", "''") + "'," +
                        "'" + dataList[i].ofrDesc.Replace("'", "''") + "','" + (i + 1) + "','" + convertDateToString(DateTime.Now) + "','" + convertDateToString(dataList[i].rangeTo) + "'," +
                        "'" + dataList[i].moNo + "','" + dataList[i].taxCode + "','" + dataList[i].gstAmount + "')";
                        this.DataReqInMQLog.Debug("insertJobOrdMasterPack: " + insertNetsuiteJobOrdMasterPack);
                        entities.Database.ExecuteSqlCommand(insertNetsuiteJobOrdMasterPack);
                        //}


                    }

                    Guid gjob_id = Guid.NewGuid();
                    var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID, mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                    "('MQPUSH-JOB ORD MASTER PACK', '" + gjob_id.ToString() + "', '" + dataList.Count().ToString() + "', 'netsuite_jobordmaster_pack', 'PULLED', '" + convertDateToString(DateTime.Now) + "')";
                    this.DataReqInMQLog.Debug("Pull: " + insertMQ);
                    entities.Database.ExecuteSqlCommand(insertMQ);

                    scope1.Complete();
                }
                catch (Exception ex)
                {
                    this.DataReqInMQLog.Error("insertJobOrdMasterPack Exception: " + ex.Message.ToString());
                }
            }
        }
        private void insertJobOrdMasterPackDetail(sdeEntities entities, List<JobOrdMasterPackDetail> dataList)
        {
            using (TransactionScope scope1 = new TransactionScope())
            {
                try
                {
                    String tempJobID = null;
                    Boolean notExist = false;

                    for (int i = 0; i < dataList.Count(); i++)
                    {
                        var delete = "delete from netsuite_jobordmaster_packdetail where nsjompd_jobOrdMaster_packDetail_ID = '" + dataList[i].ordMasterPackDetailID + "'";
                        this.DataReqInMQLog.Debug("insertJobOrdMasterPackDetail: " + delete);
                        entities.Database.ExecuteSqlCommand(delete);
                        //    if (dataList[i].jobID != tempJobID)
                        //    {
                        //        tempJobID = dataList[i].jobID;
                        //        notExist = false;

                        //        var query1 = (from q1 in entities.netsuite_jobordmaster_packdetail
                        //                      where q1.nsjompd_job_ID == tempJobID
                        //                      select q1.nsjompd_job_ID).Distinct().ToList();
                        //        if (query1.Count() <= 0)
                        //        {
                        //            notExist = true;
                        //        }
                        //    }
                        //    if (notExist == true)
                        //    {
                        var insertNetsuiteJobOrdMasterPackDetail = "insert into netsuite_jobordmaster_packdetail (nsjompd_jobOrdMaster_packDetail_ID,nsjompd_jobOrdMaster_pack_ID,nsjompd_job_ID," +
                            "nsjompd_ordPack,nsjompd_skuNo,nsjompd_isbn,nsjompd_isbn_secondary,nsjompd_sku_qty,nsjompd_item_ID,nsjompd_total_qty," +
                            "nsjompd_scanned_qty,nsjompd_createdDate,nsjompd_rangeTo, nsjompd_tax_code, nsjompd_item_price, nsjompd_gstamount, nsjompd_deliveryCharge, nsjompd_deliveryChargeGst) values ('" + dataList[i].ordMasterPackDetailID + "','" + dataList[i].ordMasterPackID + "'," +
                            "'" + dataList[i].jobID + "','" + dataList[i].ordPack + "','" + dataList[i].skuNo + "','" + dataList[i].isbn + "','" + dataList[i].isbnSecondary + "'," +
                            "'" + dataList[i].skuQty + "','" + dataList[i].itemID + "','" + dataList[i].totalQty + "','" + dataList[i].scannedQty + "'," +
                            "'" + convertDateToString(DateTime.Now) + "','" + convertDateToString(dataList[i].rangeTo) + "','" + dataList[i].taxCode + "','" + dataList[i].itemPrice + "','" + dataList[i].gstAmount + "','" + dataList[i].deliveryCharge + "','" + dataList[i].deliveryChargeGst + "')";
                        this.DataReqInMQLog.Debug("insertJobOrdMasterPackDetail: " + insertNetsuiteJobOrdMasterPackDetail);
                        entities.Database.ExecuteSqlCommand(insertNetsuiteJobOrdMasterPackDetail);

                        var updateItem = "update netsuite_jobordmaster_packdetail set nsjompd_item_internalID = (select mi_item_internalID from map_item where mi_item_isbn = netsuite_jobordmaster_packdetail.nsjompd_isbn) " +
                        "where nsjompd_jobOrdMaster_packDetail_ID = '" + dataList[i].ordMasterPackDetailID + "'";
                        this.DataReqInMQLog.Debug("insertJobOrdMasterPackDetail: " + updateItem);
                        entities.Database.ExecuteSqlCommand(updateItem);

                        //}
                    }

                    Guid gjob_id = Guid.NewGuid();
                    var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID, mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                    "('MQPUSH-JOB ORD MASTER DETAIL', '" + gjob_id.ToString() + "', '" + dataList.Count().ToString() + "', 'netsuite_jobordmaster_packdetail', 'PULLED', '" + convertDateToString(DateTime.Now) + "')";
                    this.DataReqInMQLog.Debug("Pull: " + insertMQ);
                    entities.Database.ExecuteSqlCommand(insertMQ);

                    scope1.Complete();
                }
                catch (Exception ex)
                {
                    this.DataReqInMQLog.Error("insertJobOrdMasterPackDetail Exception: " + ex.Message.ToString());
                }
            }
        }
        private void insertJobItem(sdeEntities entities, List<JobItem> dataList)
        {
            using (TransactionScope scope1 = new TransactionScope())
            {
                try
                {
                    String tempJobID = null;
                    Boolean notExist = false;
                    for (int i = 0; i < dataList.Count(); i++)
                    {
                        var delete = "delete from netsuite_jobitem where nsji_jobItem_ID = '" + dataList[i].jobItemID + "'";
                        this.DataReqInMQLog.Debug("insertJobItem: " + delete);
                        entities.Database.ExecuteSqlCommand(delete);

                        //if (dataList[i].jobID != tempJobID)
                        //{
                        //    tempJobID = dataList[i].jobID;
                        //    notExist = false;

                        //    var query1 = (from q1 in entities.netsuite_jobitem
                        //                  where q1.nsji_nsj_jobID == tempJobID
                        //                  select q1.nsji_nsj_jobID).Distinct().ToList();
                        //    if (query1.Count() <= 0)
                        //    {
                        //        notExist = true;
                        //    }
                        //}
                        //if (notExist == true)
                        //{
                        var insertNetsuiteJobItem = "insert into netsuite_jobitem (nsji_jobItem_ID,nsji_nsj_jobID,nsji_createdBy,nsji_createdDate,nsji_item_ID,nsji_item_qty," +
                            "nsji_posting_type,nsji_moNo,nsji_rangeTo) values ('" + dataList[i].jobItemID + "','" + dataList[i].jobID + "','" + dataList[i].createdBy + "'," +
                            "'" + convertDateToString(DateTime.Now) + "'," +
                            "'" + dataList[i].itemID + "','" + dataList[i].itemQty + "','" + dataList[i].postingType + "','" + dataList[i].moNo + "','" + convertDateToString(dataList[i].rangeTo) + "')";
                        this.DataFromNetsuiteLog.Debug(insertNetsuiteJobItem);
                        entities.Database.ExecuteSqlCommand(insertNetsuiteJobItem);

                        var updateItem = "update netsuite_jobitem set nsji_item_internalID = (select mi_item_internalID from map_item where mi_item_isbn = netsuite_jobitem.nsji_item_ID) " +
                        "where nsji_jobItem_ID = '" + dataList[i].jobItemID + "'";
                        this.DataReqInMQLog.Debug("insertJobItem: " + updateItem);
                        entities.Database.ExecuteSqlCommand(updateItem);



                        //}
                    }

                    Guid gjob_id = Guid.NewGuid();
                    var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID, mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                    "('MQPUSH-JOB ITEM', '" + gjob_id.ToString() + "', '" + dataList.Count().ToString() + "', 'netsuite_jobitem', 'PULLED', '" + convertDateToString(DateTime.Now) + "')";
                    this.DataReqInMQLog.Debug("Pull: " + insertMQ);
                    entities.Database.ExecuteSqlCommand(insertMQ);

                    scope1.Complete();
                }
                catch (Exception ex)
                {
                    this.DataReqInMQLog.Error("insertJobItem Exception: " + ex.Message.ToString());
                }
            }
        }
        private void insertJobOrdMaster(sdeEntities entities, List<JobOrdMaster> dataList)
        {
            using (TransactionScope scope1 = new TransactionScope())
            {
                try
                {
                    String tempJobID = null;
                    Boolean notExist = false;
                    for (int i = 0; i < dataList.Count(); i++)
                    {
                        var delete = "delete from netsuite_jobordmaster where nsjom_jobOrdMaster_ID = '" + dataList[i].ordMasterID + "'";
                        this.DataReqInMQLog.Debug("insertJobOrdMaster: " + delete);
                        entities.Database.ExecuteSqlCommand(delete);

                        String _student = "";
                        if (dataList[i].ordStudent.Length > 2)
                        {
                            _student = dataList[i].ordStudent;
                            this.DataReqInMQLog.Debug("insertJobOrdMaster: " + _student);

                            char LastChar = char.Parse(_student.Substring(_student.Length - 1, 1));
                            this.DataReqInMQLog.Debug("insertJobOrdMaster: " + LastChar);

                            int ascii_code = (int)LastChar;
                            this.DataReqInMQLog.Debug("insertJobOrdMaster: " + ascii_code);

                            if (ascii_code == 92)
                            {
                                _student = _student.Substring(0, _student.Length - 2);
                            }
                        }

                        var insertNetsuiteJobOrdMaster = "insert into netsuite_jobordmaster (nsjom_jobOrdMaster_ID,nsjom_nsj_job_ID,nsjom_jobmo_id,nsjom_ordRecNo,nsjom_ordStudent,nsjom_clsID," +
                            "nsjom_moNo,nsjom_consignmentNote,nsjom_processPeriod,nsjom_country,nsjom_createdDate,nsjom_rangeTo) values ('" + dataList[i].ordMasterID + "','" + dataList[i].jobID + "'," +
                            "'" + dataList[i].jobMoID + "','" + dataList[i].ordRecNo + "','" + _student + "','" + dataList[i].clsID.Replace(@"\", @"\\") + "','" + dataList[i].moNo + "'," +
                            "'" + dataList[i].consignmentNote + "','" + dataList[i].processPeriod + "','" + dataList[i].country + "','" + convertDateToString(DateTime.Now) + "'," +
                            "'" + convertDateToString(dataList[i].rangeTo) + "')";

                        this.DataReqInMQLog.Debug("insertJobOrdMaster >> : " + insertNetsuiteJobOrdMaster);
                        entities.Database.ExecuteSqlCommand(insertNetsuiteJobOrdMaster);
                    }

                    Guid gjob_id = Guid.NewGuid();
                    var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID, mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                    "('MQPUSH-JOB ORD MASTER', '" + gjob_id.ToString() + "', '" + dataList.Count().ToString() + "', 'netsuite_jobordmaster', 'PULLED', '" + convertDateToString(DateTime.Now) + "')";
                    this.DataReqInMQLog.Debug("Pull: " + insertMQ);
                    entities.Database.ExecuteSqlCommand(insertMQ);

                    scope1.Complete();
                }
                catch (Exception ex)
                {
                    this.DataReqInMQLog.Error("insertJobOrdMaster Exception: " + ex.Message.ToString());
                }
            }
        }
        private void insertJobMOPack(sdeEntities entities, List<JobMoPack> dataList)
        {
            using (TransactionScope scope1 = new TransactionScope())
            {
                try
                {
                    String tempJobID = null;
                    Boolean notExist = false;
                    for (int i = 0; i < dataList.Count(); i++)
                    {
                        var delete = "delete from netsuite_jobmo_pack where nsjmp_jobmoPack_ID = '" + dataList[i].jobMoPackID + "'";
                        this.DataReqInMQLog.Debug("insertJobMOPack: " + delete);
                        entities.Database.ExecuteSqlCommand(delete);
                        //if (dataList[i].jobID != tempJobID)
                        //{
                        //    tempJobID = dataList[i].jobID;
                        //    notExist = false;

                        //    var query1 = (from q1 in entities.netsuite_jobmo_pack
                        //                  where q1.nsjmp_nsj_jobID == tempJobID
                        //                  select q1.nsjmp_nsj_jobID).Distinct().ToList();
                        //    if (query1.Count() <= 0)
                        //    {
                        //        notExist = true;
                        //    }
                        //}
                        //if (notExist == true)
                        //{
                        var insertNetsuiteJobMOPack = "insert into netsuite_jobmo_pack (nsjmp_jobmoPack_ID,nsjmp_nsj_jobID,nsjmp_period,nsjmp_moNo,nsjmp_schID,nsjmp_schName,nsjmp_packID," +
                            "nsjmp_packTitles,nsjmp_packPrice,nsjmp_qty,nsjmp_amt,nsjmp_packISBN,nsjmp_createdDate,nsjmp_rangeTo) values ('" + dataList[i].jobMoPackID + "'," +
                            "'" + dataList[i].jobID + "','" + dataList[i].period + "','" + dataList[i].moNo + "','" + dataList[i].schID + "','" + dataList[i].schName.Replace("'", "''") + "'," +
                            "'" + dataList[i].packID + "','" + dataList[i].packTitles.Replace("'", "''") + "','" + dataList[i].packPrice + "','" + dataList[i].qty + "','" + dataList[i].amount + "'," +
                            "'" + dataList[i].packISBN + "','" + convertDateToString(DateTime.Now) + "','" + convertDateToString(dataList[i].rangeTo) + "')";
                        this.DataReqInMQLog.Debug("insertJobMOPack: " + insertNetsuiteJobMOPack);
                        entities.Database.ExecuteSqlCommand(insertNetsuiteJobMOPack);
                        //}
                    }

                    Guid gjob_id = Guid.NewGuid();
                    var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID, mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                    "('MQPUSH-JOB MO PACK', '" + gjob_id.ToString() + "', '" + dataList.Count().ToString() + "', 'netsuite_jobmo_pack', 'PULLED', '" + convertDateToString(DateTime.Now) + "')";
                    this.DataReqInMQLog.Debug("Pull: " + insertMQ);
                    entities.Database.ExecuteSqlCommand(insertMQ);

                    scope1.Complete();
                }
                catch (Exception ex)
                {
                    this.DataReqInMQLog.Error("insertJobMOPack Exception: " + ex.Message.ToString());
                }
            }
        }
        private void insertPOReceive(sdeEntities entities, List<POReceive> dataList)
        {
            using (TransactionScope scope1 = new TransactionScope())
            {
                try
                {
                    Guid refNo = Guid.NewGuid();
                    for (int i = 0; i < dataList.Count(); i++)
                    {
                        String strChkPOReceive = "select count(*) from wms_poreceive where po_poreceive_ID = '" + dataList[i].porID + "'";
                        this.DataReqInMQLog.Debug("insertPOReceive: " + strChkPOReceive);

                        String _poreceive = "0";
                        _poreceive = entities.Database.SqlQuery<string>(strChkPOReceive).FirstOrDefault<string>();

                        this.DataReqInMQLog.Info("insertPOReceive: Total Record: " + _poreceive);

                        if (_poreceive == "0")
                        {
                            var insertPOR = "insert into wms_poreceive (po_poreceive_ID,po_createdBy,po_modifiedBy,po_modifiedDate,po_poreceive_desc,po_poreceive_number,po_poreceive_invoice," +
                                "po_poreference_ID,po_pr_ID,po_createdDate,po_rangeTo) values ('" + dataList[i].porID + "','" + dataList[i].createdBy + "','" + dataList[i].modifiedBy + "'," +
                                "'" + convertDateToString(Convert.ToDateTime(dataList[i].modifiedDate)) + "','" + dataList[i].porDesc + "','" + dataList[i].porNumber + "'," +
                                "'" + dataList[i].porInvoice.Replace("'", "''") + "','" + dataList[i].referenceID + "','" + dataList[i].prID + "','" + convertDateToString(DateTime.Now) + "'," +
                                "'" + convertDateToString(Convert.ToDateTime(dataList[i].rangeTo)) + "')";
                            this.DataReqInMQLog.Debug("insertPOReceive: " + insertPOR);
                            entities.Database.ExecuteSqlCommand(insertPOR);
                        }
                    }

                    Guid gjob_id = Guid.NewGuid();
                    var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID, mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                    "('MQPUSH-PO RECEIVE', '" + gjob_id.ToString() + "', '" + dataList.Count().ToString() + "', 'wms_poreceive', 'PULLED', '" + convertDateToString(DateTime.Now) + "')";
                    this.DataReqInMQLog.Debug("Pull: " + insertMQ);
                    entities.Database.ExecuteSqlCommand(insertMQ);

                    scope1.Complete();
                }
                catch (Exception ex)
                {
                    this.DataReqInMQLog.Error("insertPOReceive Exception: " + ex.Message.ToString());
                }
            }
        }
        private void insertPOReceiveItem(sdeEntities entities, List<POReceiveItem> dataList)
        {
            using (TransactionScope scope1 = new TransactionScope())
            {
                try
                {
                    Guid refNo = Guid.NewGuid();
                    for (int i = 0; i < dataList.Count(); i++)
                    {
                        String strChkPOReceiveItem = "select count(*) from wms_poreceiveitem where poi_poreceiveitem_ID = '" + dataList[i].poriID + "'";
                        this.DataReqInMQLog.Debug("insertPOReceiveItem: " + strChkPOReceiveItem);

                        String _poreceiveitem = "0";
                        _poreceiveitem = entities.Database.SqlQuery<string>(strChkPOReceiveItem).FirstOrDefault<string>();

                        this.DataReqInMQLog.Info("insertPOReceiveItem: Total Record: " + _poreceiveitem);

                        if (_poreceiveitem == "0")
                        {
                            var insertPORItem = "insert into wms_poreceiveitem (poi_poreceiveitem_ID, poi_createdDate,poi_invoiceItem_qty,poi_item_ID,poi_location_code,poi_poreceive_ID,poi_poreceiveItem_qty," +
                                "poi_priItem_ID,poi_damage_qty) values ('" + dataList[i].poriID + "','" + convertDateToString(DateTime.Now) + "','" + dataList[i].invItemQty + "','" + dataList[i].itemID + "'," +
                                "'" + dataList[i].locationCode + "','" + dataList[i].porID + "','" + dataList[i].porItemQty + "','" + dataList[i].priItemID + "','" + dataList[i].dmgQty + "')";
                            this.DataReqInMQLog.Debug("insertPOReceiveItem: " + insertPORItem);
                            entities.Database.ExecuteSqlCommand(insertPORItem);

                            var updateItem = "update wms_poreceiveitem set poi_item_internalID = (select mi_item_internalID from map_item where mi_item_isbn = wms_poreceiveitem.poi_item_ID) " +
                            "where poi_poreceiveitem_ID = '" + dataList[i].poriID + "'";
                            this.DataReqInMQLog.Debug("insertJobItem: " + updateItem);
                            entities.Database.ExecuteSqlCommand(updateItem);
                        }
                    }

                    Guid gjob_id = Guid.NewGuid();
                    var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID, mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                    "('MQPUSH-PO RECEIVEITEM', '" + gjob_id.ToString() + "', '" + dataList.Count().ToString() + "', 'wms_poreceiveitem', 'PULLED', '" + convertDateToString(DateTime.Now) + "')";
                    this.DataReqInMQLog.Debug("Pull: " + insertMQ);
                    entities.Database.ExecuteSqlCommand(insertMQ);

                    scope1.Complete();
                }
                catch (Exception ex)
                {
                    this.DataReqInMQLog.Error("insertPOReceiveItem Exception: " + ex.Message.ToString());
                }
            }
        }
        private void insertSOReturn(sdeEntities entities, List<SOReturn> dataList)
        {
            using (TransactionScope scope1 = new TransactionScope())
            {
                try
                {
                    Guid refNo = Guid.NewGuid();
                    for (int i = 0; i < dataList.Count(); i++)
                    {
                        Int32 active = 0;
                        if (dataList[i].rrActive == true)
                        {
                            active = 1;
                        }

                        String strChkRAReceive = "select count(*) from wms_rareceive where nsr_rr_ID = '" + dataList[i].rrID + "'";
                        this.DataReqInMQLog.Debug("insertPOReceive: " + strChkRAReceive);

                        String _rareceive = "0";
                        _rareceive = entities.Database.SqlQuery<string>(strChkRAReceive).FirstOrDefault<string>();

                        this.DataReqInMQLog.Info("insertPOReceive: Total Record: " + _rareceive);

                        if (_rareceive == "0")
                        {
                            var insertSOReturn = "insert into wms_rareceive (nsr_rr_ID,nsr_rr_createdBy,nsr_rr_returnBy,nsr_rr_returnDate,nsr_rr_description,nsr_rr_number, " +
                                "nsr_rr_reference,nsr_rr_schID,nsr_createdDate,nsr_rangeTo,nsr_rr_active,nsr_rr_status) " +
                                "values ('" + dataList[i].rrID + "','" + dataList[i].rrCreatedBy + "','" + dataList[i].rrReturnBy + "'," +
                                "'" + convertDateToString(Convert.ToDateTime(dataList[i].rrReturnDate)) + "','" + dataList[i].rrDesc + "','" + dataList[i].rrNumber + "'," +
                                "'" + dataList[i].rrReference + "','" + dataList[i].schID + "','" + convertDateToString(DateTime.Now) + "'," +
                                "'" + convertDateToString(Convert.ToDateTime(dataList[i].rrRangeTo)) + "','" + active + "','" + dataList[i].rrStatus + "')";
                            this.DataReqInMQLog.Debug("insertSOReturn: " + insertSOReturn);
                            entities.Database.ExecuteSqlCommand(insertSOReturn);

                            var updateItem = "update wms_rareceive set nsr_rr_internalID = (select nsr_rr_internalID from netsuite_return where nsr_rr_ID = wms_rareceive.nsr_rr_ID) " +
                            "where nsr_rr_ID = '" + dataList[i].rrID + "'";
                            this.DataReqInMQLog.Debug("insertJobItem: " + updateItem);
                            entities.Database.ExecuteSqlCommand(updateItem);
                        }
                    }

                    Guid gjob_id = Guid.NewGuid();
                    var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID, mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                    "('MQPUSH-SO RETURN', '" + gjob_id.ToString() + "', '" + dataList.Count().ToString() + "', 'netsuite_return', 'PULLED', '" + convertDateToString(DateTime.Now) + "')";
                    this.DataReqInMQLog.Debug("Pull: " + insertMQ);
                    entities.Database.ExecuteSqlCommand(insertMQ);

                    scope1.Complete();
                }
                catch (Exception ex)
                {
                    this.DataReqInMQLog.Error("insertSOReturn Exception: " + ex.Message.ToString());
                }
            }
        }
        private void insertSOReturnItem(sdeEntities entities, List<SOReturnItem> dataList)
        {
            using (TransactionScope scope1 = new TransactionScope())
            {
                try
                {
                    Guid refNo = Guid.NewGuid();
                    for (int i = 0; i < dataList.Count(); i++)
                    {
                        String strChkRAReceiveItem = "select count(*) from wms_rareceiveitem where nsri_rritem_ID = '" + dataList[i].riID + "'";
                        this.DataReqInMQLog.Debug("insertRAReceiveItem: " + strChkRAReceiveItem);

                        String _rareceiveitem = "0";
                        _rareceiveitem = entities.Database.SqlQuery<string>(strChkRAReceiveItem).FirstOrDefault<string>();

                        this.DataReqInMQLog.Info("insertPOReceiveItem: Total Record: " + _rareceiveitem);

                        if (_rareceiveitem == "0")
                        {
                            var insertSOReturnItem = "insert into wms_rareceiveitem (nsri_rritem_ID,nsri_nsr_rr_ID, nsri_createdDate,nsri_rritem_return_qty,nsri_rritem_invoice,nsri_rritem_isbn,nsri_rritem_isbn2,nsri_createdBy," +
                            "nsri_rritem_status,nsri_remarks,nsri_rritem_max_return,nsri_rritem_receive_qty,nsri_rritem_posting_qty,nsri_pack_ID)" +
                            "values ('" + dataList[i].riID + "','" + dataList[i].rrID + "','" + convertDateToString(DateTime.Now) + "','" + dataList[i].riReturnQty + "','" + dataList[i].riInvoice + "'," +
                            "'" + dataList[i].riIsbn + "','" + dataList[i].riIsbn2 + "','" + dataList[i].riCreatedBy + "','" + dataList[i].riStatus + "'," +
                            "'" + dataList[i].riRemarks + "','" + dataList[i].riMaxReturn + "','" + dataList[i].riReceiveQty + "','" + dataList[i].riPostingQty + "'," +
                            "'" + dataList[i].riPackID + "')";
                            this.DataReqInMQLog.Debug("insertSOReturnItem: " + insertSOReturnItem);
                            entities.Database.ExecuteSqlCommand(insertSOReturnItem);

                            var updateItem = "update wms_rareceiveitem set nsri_item_internalID = (select nsri_item_internalID from netsuite_returnitem where nsri_rritem_ID = wms_rareceiveitem.nsri_rritem_ID) " +
                                "where nsri_rritem_ID = '" + dataList[i].riID + "'";
                            this.DataReqInMQLog.Debug("insertJobItem: " + updateItem);
                            entities.Database.ExecuteSqlCommand(updateItem);
                        }
                    }

                    Guid gjob_id = Guid.NewGuid();
                    var insertMQ = "insert into netsuitedataformq (mq_transactionType, mq_nsj_jobID, mq_tranID, mq_consolidateTable, mq_status, mq_updatedDate) values " +
                                    "('MQPUSH-SO RETURNITEM', '" + gjob_id.ToString() + "', '" + dataList.Count().ToString() + "', 'netsuite_returnitem', 'PULLED', '" + convertDateToString(DateTime.Now) + "')";
                    this.DataReqInMQLog.Debug("Pull: " + insertMQ);
                    entities.Database.ExecuteSqlCommand(insertMQ);

                    scope1.Complete();
                }
                catch (Exception ex)
                {
                    this.DataReqInMQLog.Error("insertSOReturnItem: " + ex.Message.ToString());
                }
            }
        }
        #endregion

        #region General
        public Boolean login(string loginEmail)
        {
            Status status = new Status();
            try
            {
                service.Timeout = 820000000;
                service.CookieContainer = new CookieContainer();
                ApplicationInfo appinfo = new ApplicationInfo();
                appinfo.applicationId = @Resource.NETSUITE_LOGIN_APPLICATIONID;
                service.applicationInfo = appinfo;

                Passport passport = new Passport();
                passport.account = @Resource.NETSUITE_LOGIN_ACCOUNT;
                passport.email = loginEmail;

                RecordRef role = new RecordRef();
                role.internalId = @Resource.NETSUITE_LOGIN_ROLE_INTERNALID;

                passport.role = role;
                // Get password from DB rather than resource
                //passport.password = @Resource.NETSUITE_LOGIN_PASSWORD;
                passport.password = getNetsuitePassword(loginEmail);

                status = service.login(passport).status;
            }
            catch (Exception ex)
            {
                this.DataFromNetsuiteLog.Error("Login: " + ex.ToString());
            }
            return status.isSuccess;
        }
        public Boolean logout()
        {
            Status status = new Status();
            try
            {
                status = (service.logout()).status;
                if (status.isSuccess == true)
                {
                }
                else
                {
                    this.DataFromNetsuiteLog.Error("Logout: Login Netsuite failed.");
                }
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("a session at a time"))
                {
                    this.DataFromNetsuiteLog.Debug("Logout Exception: " + ex.ToString());
                }
                else
                {
                    this.DataFromNetsuiteLog.Error("Logout Exception: " + ex.ToString());
                }
            }
            return status.isSuccess;
        }
        public DateTime convertDate(DateTime date)
        {
            DateTime convertedDate = DateTime.Now;
            try
            {
                convertedDate = Convert.ToDateTime(date.ToString("yyyy-MM-dd HH:mm:ss"));
            }
            catch (Exception ex)
            {
                this.DataFromNetsuiteLog.Error(ex.ToString());
            }
            return convertedDate;
        }
        public String convertDateToString(DateTime date)
        {
            String convertedDate = null;
            try
            {
                convertedDate = date.ToString("yyyy-MM-dd HH:mm:ss");
            }
            catch (Exception ex)
            {
                this.DataFromNetsuiteLog.Error(ex.ToString());
            }
            return convertedDate;
        }
        public String checkRecordRefIsNull(RecordRef recordRef)
        {
            String value = null;
            if (recordRef == null)
            {
                value = "";
            }
            else
            {
                value = recordRef.name;
            }
            return value;
        }
        public String checkRecordRefIsNull_internalID(RecordRef recordRef)
        {
            String value = null;
            if (recordRef == null)
            {
                value = "";
            }
            else
            {
                value = recordRef.internalId;
            }
            return value;
        }
        public String checkIsNull(String str)
        {
            if (String.IsNullOrEmpty(str))
            {
                str = "";
            }
            return str;
        }
        public String SplitItemByName(String str)
        {
            String itemName = "";
            if (!String.IsNullOrEmpty(str))
            {
                String[] tempItem = str.Split(' ');
                if (tempItem.Count() > 2)
                {
                    for (int j = 2; j < tempItem.Count(); j++)
                    {
                        tempItem[1] += " " + tempItem[j];
                    }
                    itemName = tempItem[1];
                }
            }
            return itemName;
        }
        public String SplitItemByISBN(String str)
        {
            String value = "";
            if (!String.IsNullOrEmpty(str))
            {
                String[] tempItem = str.Split(' ');
                value = tempItem[0];
            }
            return value;
        }
        public String SplitEntityByID(String str)
        {
            String value = "";
            if (!String.IsNullOrEmpty(str))
            {
                String[] tempEntity = str.Split(' ');
                value = tempEntity[0];
            }
            return value;
        }
        public String SplitEntityByName(String str)
        {
            String value = "";
            if (!String.IsNullOrEmpty(str))
            {
                String[] tempEntity = str.Split(' ');
                if (tempEntity.Count() > 2)
                {
                    for (int j = 2; j < tempEntity.Count(); j++)
                    {
                        tempEntity[1] += " " + tempEntity[j];
                    }
                    value = tempEntity[1];
                }
            }
            return value;
        }
        public String SplitSalesOrderTerm(String str)
        {
            String value = "";
            if (!String.IsNullOrEmpty(str))
            {
                String[] tempTerm = str.Split(' ');
                Int32 n;
                Boolean isNumeric = Int32.TryParse(tempTerm[0], out n);
                if (isNumeric == true)
                {
                    value = n.ToString();
                }
            }
            return value;
        }
        public String SplitMoNo(String str)
        {
            String moNo = "";
            if (!String.IsNullOrEmpty(str))
            {
                String[] tempMoNo = str.Split('-');
                if (tempMoNo.Count() >= 2)
                {
                    moNo = tempMoNo[1];
                }
            }
            return moNo;
        }
        public String SplitTeacherName(String str)
        {
            String teacherName = "";
            if (!String.IsNullOrEmpty(str))
            {
                String[] tempItem = str.Split(' ');
                if (tempItem.Count() >= 2)
                {
                    teacherName = tempItem[0] + " " + tempItem[1];
                }
                else
                {
                    teacherName = str;
                }
            }
            return teacherName;
        }
        public String GetFirstSixChar(String str)
        {
            String charValue = "";
            Int32 strLength = 0;
            if (!String.IsNullOrEmpty(str))
            {
                strLength = str.Length;
                if (strLength > 6)
                {
                    charValue = str.Substring(0, 6);
                }
                else
                {
                    charValue = str;
                }

            }
            return charValue;
        }

        #endregion

        /*
        public Boolean SOExcessFulfillment(List<ExcessFulfillment> exFulList)
        {
            Boolean status = false;
            using (TransactionScope scope1 = new TransactionScope())
            {
                using (sdeEntities entities = new sdeEntities())
                {
                    for (int i = 0; i < exFulList.Count(); i++)
                    {
                        try
                        {
                            
                            //var query1 = (from jomp in entities.netsuite_jobordmaster_pack
                            //              join jom in entities.netsuite_jobordmaster on jomp.nsjomp_jobOrdMaster_ID equals jom.nsjom_jobOrdMaster_ID
                            //              join job in entities.netsuite_job on jom.nsjom_nsj_job_ID equals job.nsj_jobID
                            //              select new { job.nsj_country_tag, job.nsj_businessChannel_ID, jomp.nsjomp_jobOrdMaster_pack_ID, jomp.nsjomp_jobOrdMaster_ID }).ToList();
                            
                            var update = "update wms_jobordscan_pack set josp_excessQty = '" + exFulList[i].excessQty + "' where josp_pack_ID = '" + exFulList[i].josp_packID + "' and " +
                                "josp_jobOrdMaster_ID='" + exFulList[i].jobOrdMasterID + "'";
                            this.DataFromNetsuiteLog.Debug(update);
                            entities.Database.ExecuteSqlCommand(update);
                            status = true;

                        }
                        catch (Exception ex)
                        {
                            this.DataFromNetsuiteLog.Error(ex.ToString());
                            status = false;
                        }
                    }
                    if (status == true)
                    {
                        scope1.Complete();
                    }
                }
            }
            return status;
        }*/

        #region Data Patching
        private Boolean DataPatching(sdeEntities entities, RequestNetsuiteEntity r)
        {
            String createdDate = convertDateToString(DateTime.Now);
            DateTime trangeFrom = Convert.ToDateTime(r.rn_rangeFrom);
            DateTime trangeTo = Convert.ToDateTime(r.rn_rangeTo);
            Record[] pffRecord = null;

            Boolean status = false;
            Boolean isValidCust = true;

            if (isValidCust == true)
            {
                var option = new TransactionOptions
                {
                    IsolationLevel = IsolationLevel.RepeatableRead,
                    Timeout = TimeSpan.FromSeconds(2400)
                };

                ////var qMo = (from q1 in entities.patchmoes 
                ////           where q1.isRun == "0"
                ////           select new  
                ////           {
                ////              q1.moNo,
                ////              q1.moNo_InternalID,
                ////              q1.recid,
                ////           }).ToList();

                //var qMo = (from q1 in entities.netsuite_jobmo_address_temp
                //           where q1.nsjma_recID > 1692
                //           select new
                //           {
                //               q1.nsjma_jobMoAddress_ID,
                //               q1.nsjma_jobMoAddress_1,
                //               q1.nsjma_jobMoAddress_2,
                //               q1.nsjma_jobMoAddress_3,
                //               q1.nsjma_jobMoAddress_tel,
                //               q1.nsjma_recID
                //           }
                //            ).ToList();

                using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    string tranid = "SO-MY00369";
                    string job_id = "0a23ac79-2ebd-4ee4-a43f-1a241ae299c4";
                    var deleteNetsuiteJobMoCls = "delete from netsuite_jobmocls where nsjmc_jobmo_id in (select b.nsjm_jobmo_id from netsuite_jobmo b " +
                                                 "where b.nsjm_moNo = '" + tranid + "' and b.nsjm_nsj_job_ID = '" + job_id + "') and " +
                                                 "nsjmc_jobID = '" + job_id + "'";
                    entities.Database.ExecuteSqlCommand(deleteNetsuiteJobMoCls);

                    scope1.Complete();
                    status = true;
                    #region Commented
                    //if (qMo != null && qMo.Count() > 0)
                    //{
                    //    Int32 tolRow = 0;
                    //    try
                    //    {
                    //        String rangeTo = convertDateToString(Convert.ToDateTime(r.rn_rangeTo));
                    //        Int32 tolRecords = qMo.Count();

                    //        for (int g = 0; g < tolRecords; g++)
                    //        {
                    //            Boolean isValid = true;
                    //            //String moNoInternalID = qMo[g].moNo_InternalID;  
                    //            //String moNo = qMo[g].moNo;  

                    //            if (isValid == true)
                    //            {
                    //                #region insert tax,rate,discount
                    //                /*
                    //                    List<NewSO> newSOList = new List<NewSO>();
                    //                    List<SyncSO> syncSOList = new List<SyncSO>();

                    //                    var q20 = (from q1 in entities.netsuite_syncso
                    //                               where q1.nt2_moNo == moNo 
                    //                               select new SyncSO
                    //                               {
                    //                                   itemInternalID = q1.nt2_item_internalID,  
                    //                                   tax = q1.nt2_tax,
                    //                                   discount = q1.nt2_discount,
                    //                                   rate = q1.nt2_rate, 
                    //                                   basedPrice = q1.nt2_basedprice,
                    //                                   pricelevel = q1.nt2_pricelevel,
                    //                                   SEISmoNo = q1.nt2_SEIS_moNo
                    //                               }).ToList();

                    //                    syncSOList = q20; 

                    //                    String itemID = "";
                    //                    String title = "";
                    //                    String itemInternalID = ""; 
                    //                    Double tax = 0; 
                    //                    Double rate = 0; 
                    //                    Double discPercantage = 0; 
                    //                    Double basedPrice = 0;
                    //                    String priceLevel = string.Empty;

                    //                    #region from netsuite_syncso 
                    //                    Int32 line = 0; 
                    //                    foreach (var i in syncSOList)
                    //                    {
                    //                        if (!String.IsNullOrEmpty(i.SEISmoNo))
                    //                        {
                    //                            var newSoSql = (from q1 in entities.netsuite_newso
                    //                                            where q1.nt1_moNo == i.SEISmoNo
                    //                                            && q1.nt1_item_internalID == i.itemInternalID
                    //                                            select new NewSO()
                    //                                            {
                    //                                                itemInternalID = q1.nt1_item_internalID, 
                    //                                                tax = q1.nt1_tax,
                    //                                                discount = q1.nt1_discount,
                    //                                                rate = q1.nt1_rate, 
                    //                                                basedPrice = q1.nt1_basedprice,
                    //                                                pricelevel = q1.nt1_pricelevel
                    //                                            });

                    //                            newSOList = newSoSql.ToList();
                    //                            tax = Convert.ToDouble(newSOList[0].tax);
                    //                            rate = Convert.ToDouble(newSOList[0].rate);
                    //                            discPercantage = Convert.ToDouble(newSOList[0].discount);
                    //                            basedPrice = Convert.ToDouble(newSOList[0].basedPrice);
                    //                            priceLevel = newSOList[0].pricelevel;
                    //                        }
                    //                        else
                    //                        {
                    //                            tax = Convert.ToDouble(i.tax);
                    //                            rate = Convert.ToDouble(i.rate);
                    //                            discPercantage = Convert.ToDouble(i.discount);
                    //                            basedPrice = Convert.ToDouble(i.basedPrice);
                    //                            priceLevel = i.pricelevel;
                    //                        }

                    //                        itemID = "";
                    //                        title = "";
                    //                        itemInternalID = i.itemInternalID; 

                    //                         var item = (from ii in entities.map_item
                    //                                    where ii.mi_item_internalID == itemInternalID
                    //                                    select ii).FirstOrDefault();

                    //                        if (item != null)
                    //                        { ;
                    //                            itemID = checkIsNull(item.mi_item_isbn); 
                    //                            title = checkIsNull(item.mi_item_description).Replace("'", "''");  
                    //                        } 

                    //                        var insertPatchData = "insert into patchdata (moNo,moNo_InternalID,item_isbn,tax,discount,rate,basedprice,pricelevel) " +
                    //                           "values ('" + moNo + "','" + moNoInternalID + "','" + itemID + "'," +
                    //                            "'" + tax + "','" + discPercantage + "','" + rate + "','" + basedPrice + "','" + priceLevel + "')";
                    //                        entities.Database.ExecuteSqlCommand(insertPatchData);


                    //                        line++;
                    //                    } 
                    //                    #endregion

                    //                    Int32 rowCount = g + 1;
                    //                    tolRow = rowCount;

                    //                var updatePatchMo = "update patchmo SET isRun = '1' WHERE recid = " + qMo[g].recid;
                    //                entities.Database.ExecuteSqlCommand(updatePatchMo);



                    //                string jobAdd1 = qMo[g].nsjma_jobMoAddress_1;
                    //                string jobAdd2 = qMo[g].nsjma_jobMoAddress_2;
                    //                string jobAdd3 = qMo[g].nsjma_jobMoAddress_3;
                    //                string jobAddTel = qMo[g].nsjma_jobMoAddress_tel;

                    //                var qFor = (from q2 in entities.forwarderadds
                    //                            where q2.Address1 == jobAdd1
                    //                            && q2.Address2 == jobAdd2
                    //                            && q2.Address3 == jobAdd3
                    //                            && q2.Phone == jobAddTel
                    //                            select new
                    //                            {
                    //                                q2.Addressee,
                    //                                q2.City,
                    //                                q2.State,
                    //                                q2.Postcode,
                    //                                q2.Country
                    //                            }).ToList();
                    //                if (qFor.Count() > 0)
                    //                {
                    //                    String Address4 = string.Empty;

                    //                    Address4 = qFor[0].Postcode + " " + qFor[0].City + " " + qFor[0].State + " " + qFor[0].Country;
                    //                    var updTemJobAdd = "update netsuite_jobmo_address_temp set nsjma_jobMoAddress_name = '" + qFor[0].Addressee + "', nsjma_jobMoAddress_4 = '" + Address4 + "'" +
                    //                                        ", nsjma_flag = '3' WHERE nsjma_recID = " + qMo[g].nsjma_recID;
                    //                    entities.Database.ExecuteSqlCommand(updTemJobAdd);
                    //                }
                    //                */
                    //                #endregion
                    //            }


                    //        } 
                    //        scope1.Complete();
                    //        status = true;
                    //    }
                    //    catch (Exception ex)
                    //    {
                    //        this.DataFromNetsuiteLog.Error("DataPatching Exception: " + tolRow + pffRecord.Count() + ex.ToString());
                    //    }
                    //}
                    #endregion
                }
            }
            return status;
        }
        private Boolean BackOrderPatching(sdeEntities entities, RequestNetsuiteEntity r)
        {
            List<cls_customer> listCust = new List<cls_customer>();
            Boolean isValidCust = true;

            Record[] pffRecord = null;
            Boolean status = false;

            Status netsuiteStatus = new Status();
            service.Timeout = 1000000000;
            service.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();
            appinfo.applicationId = @Resource.NETSUITE_LOGIN_APPLICATIONID;
            service.applicationInfo = appinfo;

            Passport passport = new Passport();
            passport.account = @Resource.NETSUITE_LOGIN_ACCOUNT;
            passport.email = @Resource.NETSUITE_LOGIN_EMAIL;

            RecordRef role = new RecordRef();
            role.internalId = @Resource.NETSUITE_LOGIN_ROLE_INTERNALID;

            passport.role = role;
            //kang Get netsuite password DB
            //passport.password = @Resource.NETSUITE_LOGIN_PASSWORD;
            passport.password = getNetsuitePassword(@Resource.NETSUITE_LOGIN_EMAIL);

            netsuiteStatus = service.login(passport).status;
            Boolean loginStatus = netsuiteStatus.isSuccess;
            if (loginStatus == true)
            {
                AsyncResult pffResponse = service.getAsyncResult(r.rn_jobID, 1);
                AsyncSearchResult salesOrderSearchResult = (AsyncSearchResult)pffResponse;
                pffRecord = salesOrderSearchResult.searchResult.recordList;

                try
                {
                    netsuiteStatus = (service.logout()).status;
                }
                catch (Exception ex)
                {
                    isValidCust = false;
                }
            }
            else
            {
                isValidCust = false;
            }

            if (isValidCust == true)
            {
                var option = new TransactionOptions
                {
                    IsolationLevel = IsolationLevel.RepeatableRead,
                    Timeout = TimeSpan.FromSeconds(2400)
                };

                using (var scope1 = new TransactionScope(TransactionScopeOption.Required, option))
                {
                    if (pffRecord != null && pffRecord.Count() > 0)
                    {
                        try
                        {
                            String rangeTo = convertDateToString(Convert.ToDateTime(r.rn_rangeTo));
                            String createdDate = convertDateToString(DateTime.Now);

                            for (int i = 0; i < pffRecord.Length; i++)
                            {
                                SalesOrder so = (SalesOrder)pffRecord[i];
                                String moNo = so.tranId;
                                String moNoInternalID = so.internalId;
                                String mostatus = so.status;

                                var updPatchData = "update patchmo SET status = '" + mostatus + "',isRun = 1 where moNo_InternalID = '" + moNoInternalID + "' and isRun = 0 ";
                                entities.Database.ExecuteSqlCommand(updPatchData);

                            }

                            var updateRequestNetsuite = "update requestnetsuite set rn_status='UPLOADED', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                                "where rn_jobID = '" + r.rn_jobID + "'";
                            this.DataFromNetsuiteLog.Debug("LatestSalesOrders: " + updateRequestNetsuite);
                            entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                            scope1.Complete();
                            status = true;
                        }
                        catch (Exception ex)
                        {
                            status = false;
                        }
                    }
                    else
                    {
                        var updateRequestNetsuite = "update requestnetsuite set rn_status='NO-DATA', rn_completedAt = '" + convertDateToString(DateTime.Now) + "' " +
                            "where rn_jobID = '" + r.rn_jobID + "'";
                        entities.Database.ExecuteSqlCommand(updateRequestNetsuite);

                        scope1.Complete();

                    }
                }
            }
            return status;
        }
        public Boolean unfulfillSOTesting(RequestNetsuiteEntity r)
        {
            Boolean status1 = false;
            Record[] pffRecord = null;
            DateTime rangeFrom = Convert.ToDateTime(r.rn_rangeFrom);
            DateTime rangeTo = Convert.ToDateTime(r.rn_rangeTo);

            Status netsuiteStatus = new Status();
            service.Timeout = 1000000000;
            service.CookieContainer = new CookieContainer();
            ApplicationInfo appinfo = new ApplicationInfo();
            appinfo.applicationId = @Resource.NETSUITE_LOGIN_APPLICATIONID;
            service.applicationInfo = appinfo;

            Passport passport = new Passport();
            passport.account = @Resource.NETSUITE_LOGIN_ACCOUNT;
            passport.email = @Resource.NETSUITE_LOGIN_EMAIL;

            RecordRef role = new RecordRef();
            role.internalId = @Resource.NETSUITE_LOGIN_ROLE_INTERNALID;

            passport.role = role;
            //kang get netsuite password from DB
            //passport.password = @Resource.NETSUITE_LOGIN_PASSWORD;
            passport.password = getNetsuitePassword(@Resource.NETSUITE_LOGIN_EMAIL);

            netsuiteStatus = service.login(passport).status;
            Boolean loginStatus1 = netsuiteStatus.isSuccess;
            if (loginStatus1 == true)
            {
                this.DataFromNetsuiteLog.Debug("LatestSalesOrders: Login Netsuite success.");
                this.DataFromNetsuiteLog.Info("LatestSalesOrders: Retrieving sales order every 2 hours from Netsuite.");

                AsyncResult pffResponse = service.getAsyncResult(r.rn_jobID, 1);
                AsyncSearchResult salesOrderSearchResult = (AsyncSearchResult)pffResponse;
                pffRecord = salesOrderSearchResult.searchResult.recordList;

                netsuiteStatus = (service.logout()).status;
            }


            var option = new TransactionOptions
            {
                IsolationLevel = IsolationLevel.RepeatableRead,
                Timeout = TimeSpan.FromSeconds(2400)
            };

            using (TransactionScope scope1 = new TransactionScope())
            {
                Boolean loginStatus = login(@Resource.NETSUITE_LOGIN_EMAIL);

                if (loginStatus == true)
                {
                    using (sdeEntities entities = new sdeEntities())
                    {
                        AsyncStatusResult job = new AsyncStatusResult();
                        Int32 ordCount = 0;
                        Int32 rowCount = 0;
                        Guid gjob_id = Guid.NewGuid();

                        var queryAA = (from q1 in entities.wms_jobordscan
                                       join q2 in entities.netsuite_jobmo on q1.jos_moNo equals q2.nsjm_moNo
                                       where (q1.jos_rangeTo > rangeFrom && q1.jos_rangeTo <= rangeTo)
                                       && q1.jos_businessChannel_code == "ET"
                                       select new
                                       {
                                           q1.jos_moNo,
                                           q2.nsjm_moNo_internalID,
                                           isFirstRun = q1.jos_netsuiteProgress == null ? "Y" : "N"
                                       })
                                        .Distinct()
                                        .ToList();

                        var query1 = (from d in queryAA
                                      select new { d.jos_moNo, d.nsjm_moNo_internalID }).Distinct().ToList();

                        foreach (var q1 in query1)
                        {
                            try
                            {
                                if (pffRecord != null)
                                {
                                    SalesOrder so = (SalesOrder)pffRecord[0];

                                    var query2 = (from josp in entities.wms_jobordscan_pack
                                                  join jomp in entities.netsuite_jobordmaster_pack on josp.josp_pack_ID equals jomp.nsjomp_jobOrdMaster_pack_ID
                                                  join jompd in entities.netsuite_jobordmaster_packdetail on jomp.nsjomp_jobOrdMaster_pack_ID equals jompd.nsjompd_jobOrdMaster_pack_ID
                                                  where josp.josp_ordFulFill > 0 && josp.josp_moNo == q1.jos_moNo
                                                  && josp.josp_rangeTo > rangeFrom && josp.josp_rangeTo <= rangeTo
                                                  select new
                                                  {
                                                      josp.josp_pack_ID,
                                                      jompd.nsjompd_item_internalID,
                                                      jomp.nsjomp_jobOrdMaster_ID,
                                                      qty = josp.josp_ordFulFill
                                                  }).ToList();

                                    var groupQ2 = from p in query2
                                                  let k = new
                                                  {
                                                      itemInternalID = p.nsjompd_item_internalID,
                                                  }
                                                  group p by k into g
                                                  select new
                                                  {
                                                      itemInternalID = g.Key.itemInternalID,
                                                      fulFillQty = g.Sum(p => p.qty)
                                                  };

                                    List<String> deCommitItem = new List<String>();
                                    List<Int32> deCommitQty = new List<Int32>();
                                    Hashtable htNSItems = new Hashtable(); //Add all Netsuite items into Hash Table - WY-26.Dec.2014
                                    foreach (var item in groupQ2)
                                    {
                                        deCommitItem.Add(item.itemInternalID);
                                        deCommitQty.Add(Convert.ToInt32(item.fulFillQty));
                                        htNSItems.Add(item.itemInternalID, Convert.ToInt32(item.fulFillQty));//Add all Netsuite items into Hash Table - WY-26.Dec.2014
                                    }

                                    if (pffRecord.Count() > 0)
                                    {
                                        for (int i = 0; i < so.itemList.item.Count(); i++)
                                        {
                                            Boolean isExist = false;
                                            isExist = htNSItems.Contains(so.itemList.item[i].item.internalId);
                                            if (isExist)
                                            {
                                                int fulfilQty = (int)htNSItems[so.itemList.item[i].item.internalId];
                                                fulfilQty = fulfilQty - Convert.ToInt32(so.itemList.item[i].quantityCommitted);

                                                htNSItems.Remove(so.itemList.item[i].item.internalId);
                                                htNSItems.Add(so.itemList.item[i].item.internalId, fulfilQty);
                                            }

                                        }
                                        rowCount = ordCount + 1;

                                        #region Compare NS and DB Items - WY-26.Dec.2014
                                        this.DataFromNetsuiteLog.Debug("SOFulfillmentUpdate: Start Compare NS and DB Items");
                                        foreach (DictionaryEntry entry in htNSItems)
                                        {
                                            if (Convert.ToInt32(entry.Value) > 0)
                                            {
                                                var insertItem = "insert into unfulfillso (uf_transactiontype,uf_mono,uf_itemInternalID,uf_fulfillQty,uf_rangeFrom,uf_rangeTo,uf_createdDate) " +
                                                                 " values ('SSA-FULFILLMENT','" + q1.jos_moNo + "', '" + entry.Key.ToString() + "','" + entry.Value + "', " +
                                                                 " '" + convertDateToString(rangeFrom) + "','" + convertDateToString(rangeTo) + "','" + convertDateToString(DateTime.Now) + "') ";
                                                this.DataFromNetsuiteLog.Debug("SOFulfillmentUpdate: " + insertItem);
                                                entities.Database.ExecuteSqlCommand(insertItem);
                                            }
                                        }
                                        this.DataFromNetsuiteLog.Debug("SOFulfillmentUpdate: End Compare NS and DB Items");
                                        #endregion

                                        ordCount++;
                                        status1 = true;
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                status1 = false;
                                if (rowCount == 0)
                                {
                                    rowCount++;
                                }
                                break;
                            }
                        }//end of ordMaster 
                        scope1.Complete();
                    }//end of sdeEntities
                }
                else
                {
                    this.DataFromNetsuiteLog.Fatal("SOFulfillmentUpdate: Login Netsuite failed.");
                }
            }//end of scopeOuter
            logout();
            return status1;
        }
        #endregion

        private TokenPassport createTokenPassport()
        {
            string nonce = computeNonce();
            long timestamp = computeTimestamp();
            TokenPassportSignature signature = computeSignature(account, consumerKey, consumerSecret, tokenId, tokenSecret, nonce, timestamp);

            TokenPassport tokenPassport = new TokenPassport();
            tokenPassport.account = account;
            tokenPassport.consumerKey = consumerKey;
            tokenPassport.token = tokenId;
            tokenPassport.nonce = nonce;
            tokenPassport.timestamp = timestamp;
            tokenPassport.signature = signature;
            return tokenPassport;
        }

        private static string computeNonce()
        {
            RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
            byte[] data = new byte[20];
            rng.GetBytes(data);
            int value = Math.Abs(BitConverter.ToInt32(data, 0));
            return value.ToString();
        }

        private static long computeTimestamp()
        {
            return ((long)(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1))).TotalSeconds);
        }

        private static TokenPassportSignature computeSignature(string compId, string consumerKey, string consumerSecret, string tokenId, string tokenSecret, string nonce, long timestamp)
        {
            string baseString = compId + "&" + consumerKey + "&" + tokenId + "&" + nonce + "&" + timestamp;
            string key = consumerSecret + "&" + tokenSecret;
            string signature = "";
            var encoding = new System.Text.ASCIIEncoding();
            byte[] keyBytes = encoding.GetBytes(key);
            byte[] baseStringBytes = encoding.GetBytes(baseString);
            //using (var hmacSha1 = new HMACSHA1(keyBytes))
            //{
            //    byte[] hashBaseString = hmacSha1.ComputeHash(baseStringBytes);
            //    signature = Convert.ToBase64String(hashBaseString);
            //}
            //TokenPassportSignature sign = new TokenPassportSignature();
            //sign.algorithm = "HMAC-SHA1";

            //ANET-44 SDE/ISAAC - TBA changing the signature method.
            //Commented above code by Brash Developer on 24-June-2021
            //Issue :- There is an ongoing 24 hours test window for HMAC-SHA1 Deprecation for Integrations Using Token-based Authentication (TBA), 
            //if possible you can use HMAC-SHA256 signature method.
            using (var hmacSha256 = new HMACSHA256(keyBytes))
            {
                byte[] hashBaseString = hmacSha256.ComputeHash(baseStringBytes);
                signature = Convert.ToBase64String(hashBaseString);
            }
            TokenPassportSignature sign = new TokenPassportSignature();
            sign.algorithm = "HMAC-SHA256";

            sign.Value = signature;
            return sign;
        }

        public String WelComeMessage(String name)
        {
            return String.Format("{0}, Hello ", name);
        }
        public String ConnectToSde()
        {
            return "SDE is connected now.";
        }
    }
}
